{"dbEnvironment":"snowflake","version":"1.72.5","jobsTree":{"id":236,"name":"ROOT","children":[{"id":8453,"name":"Product_ETL","children":[],"jobs":[{"id":2591195,"name":"University PG programs Payout process","description":"","type":"ORCHESTRATION","tag":"9502a292-2277-46de-9069-03fc0de9265b"}]}],"jobs":[]},"orchestrationJobs":[{"id":2591195,"revision":121,"created":1716977991603,"timestamp":1716977991603,"components":{"2591200":{"id":2591200,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-448,"y":240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pg_university_payout_ext"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_ext\" as\nwith elt2 as (\nselect a.*  exclude(\"cohort_name\"), gst.\"GST\",C.\"cohort_name\" as \"cohort_name\",\ncase when \"paymentCountry\" like 'India' then \"order_selling_price\" * ( 1 - (1/1.18))\n\twhen \"paymentCountry\" like 'Singapore' then \"order_selling_price\" * ( 1 - (1/1.07))\n\twhen \"paymentCountry\" like 'United Kingdom' then \"order_selling_price\"* ( 1 - (1/1.20)) \nelse 0 end as \"serviceTax_adjusted\",\nmax(a.\"ndate\") over (partition by a.\"userEmail\",\"Program Name\" ) as \"latest_payment_dt\",  \nmin(a.\"ndate\") over (partition by a.\"userEmail\",\"Program Name\" ) as \"first_payment_dt\",\ncase when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",\"Program Name\") = 1 then 1\nElse 0 end as \"only_prep_bought\",   \nround(sum(\"collection_USD\") over (partition by a.\"userEmail\",\"Program Name\" ),2) as \"Total_Collection_USD\", \ncase when NVL(round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\" ),2),0) > 0 \n then round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\" ),2) else \"Total_Collection_USD\" end\nas \"max_SellingPrice_USD\",\n'Extn' as \"order_type\"\n\nfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" a \n left outer join  \n (select \"Geo\", \"GST\" from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"finance_cost\" \n\twhere \"GST\" is not null group by 1,2\n )gst on a.\"paymentCountry\" = gst.\"Geo\" \n left outer join \n (select lower(B.\"mail\") as \"userEmail\" ,A.\"program_id\", NVL( max(\"cohort_name\") ,\n\tmax(case when A.\"cohort_id\" =0 and A.\"active_cohort_id\"=0 then 'Flexi Learners'\n\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\"=0 then 'Cohort to Flexi'\n\twhen A.\"cohort_id\" =0 and A.\"active_cohort_id\">0 then 'Flexi to Cohort'\n\twhen A.\"cohort_id\" <> A.\"active_cohort_id\" then 'Cohort Learner (Cohort Change Processed)' \n\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\">0 then 'Cohort Learner (No Cohort Change)'\n\telse null end ) ) as \"cohort_name\"\n\tfrom \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_learner_program\" A\n\tinner join  \"SL_ANALYTICS_DB\".\"CLOUD6\".\"target_users\"   B on B.\"uid\"  = A.\"user_id\" \n\tleft outer join \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_cohort\" C on A.\"active_cohort_id\" = C.\"id\"\n\tgroup by 1,2\n ) C \n on C.\"userEmail\"=   lower(a.\"userEmail\") and C.\"program_id\" = a.\"course ID\"  and a.\"initialProductType_id\" in (2,3)\n where a.\"orderNumber\" is not null and  \"collection_USD\"> 0 and \"paymentQueryType\" ='B2C' \n and lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad')\n and ( a.\"orderNumber\"  like '%_EXTN_%'  )\n )\n\n\nselect main.\"userEmail\" as \"Email\",\nmain.\"order_type\" as \"order_type\",\nmain.\"Program Name\" as \"Program Name\",\nmain.\"universityFlag\" as \"University_flag\",\nmax(to_char(main.\"ndate\",'YYYYMM')) as \"year_month\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentDate\" else null end) as \"paymentDate\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"reconciliation_id\" else null end) as \"reconciliation_id\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"ReconcileOption\" else null end) as \"ReconcileOption\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"orderNumber\" else null end) as \"orderNumber\",\nNULL as \"refundedOrderNumber\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"currency\" else null end) as \"currency\",\nmax( main.\"mainpaymentCourse\") as \"paymentCourse\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentGeo\" else null end) as \"paymentGeo\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentCountry\" else null end) as \"paymentCountry\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentTrainingType\" else null end) as \"paymentTrainingType\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentQueryType\" else null end) as \"paymentQueryType\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentCategory\" else null end) as \"paymentCategory\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentGateway\" else null end) as \"paymentGateway\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"RefundReconciliation_id\" else null end) as \"RefundReconciliation_id\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"refundUnit\" else null end) as \"refundUnit\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"partialRefundAmount\" else null end) as \"partialRefundAmount\" ,\nmax(main.\"ndate\") as \"ndate\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  emi.\"EMITerm\" else null end) as \"EMITerm\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  emi.\"fee\" else null end) as \"fee\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  emi.\"applicableOnwards\" else null end) as \"applicableOnwards\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  emi.\"emi_subvention_rate\" else null end) as \"emi_subvention_rate\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  emi.\"TDR\" else null end) as \"TDR\" ,\n--sum(case when main.\"latest_payment_dt\" = main.\"ndate\" then  emi.\"POS_subvention_excluded\" else null end) as \"POS_subvention_excluded\" ,\nsum(emi.\"POS_subvention_excluded\") as \"POS_subvention_excluded\" ,\nsum(emi.\"loan_disbursed_amount\") \"loan_disbursed_amount\", -- Added on 2023-05-30 : By SP - LI-510\nsum(main.\"order_selling_price\") as \"POS_order_selling_price\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"GST\" else null end) as \"GST\" ,\nmax(main.\"contract_selling_price\") as \"selling_price\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"deductionsCurrency\" else null end) as \"deductionsCurrency\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"affiliatePaymentCosts\" else null end) as \"affiliatePaymentCosts\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"minPayout\" else null end) as \"minPayout\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end) as \"payoutPercentage\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"minASP\" else null end) as \"minASP\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"maxASP\" else null end) as \"maxASP\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"financeCharges\" else null end) as \"financeCharges\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"SalesCharges\" else null end) as \"SalesCharges\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"marketingCharges\" else null end) as \"marketingCharges\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"voucherCosts\" else null end) as \"voucherCosts\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"instructorCosts\" else null end) as \"instructorCosts\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"teachingAssistantsCosts\" else null end) as \"teachingAssistantsCosts\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"platformCosts\" else null end) as \"platformCosts\",\nsum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax\",\n1 as \"main_course_cd\",\n1 as \"prep_course_cd\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"conv_to_USD\" else null end) as \"conv_to_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"to_inr\" else null end) as \"to_inr\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"deductionsCurrency_to_USD\" else null end) as \"deductionsCurrency_to_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"CourseName\" else null end) as \"CourseName\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"Parent orderNumber\" else null end) as \"Parent_orderNumber\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"MRP_USD\" else null end) as \"MRP_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"parent_collection_USD\" else null end) as \"parent_collection_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"discount_Amount_USD\" else null end) as \"discount_Amount_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"discount_Amount_INR\" else null end) as \"discount_Amount_INR\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"discount_percentage\" else null end) as \"discount_percentage\",\nmax( main.\"maincohort_name\" ) as \"cohort_name\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  extract(year from main.\"ndate\") else null end) as \"yr\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  extract(month from main.\"ndate\") else null end) as \"month\",\nmax(\"first_payment_dt\") as \"first_payment_date\",\nmax(case when main.\"first_payment_dt\" = main.\"ndate\" then  main.\"orderNumber\" else null end) as \"first_order_number\",\nmax(case when main.\"first_payment_dt\" = main.\"ndate\" then  main.\"reconciliation_id\" else null end) as \"first_reconciliation_id\",\nmax(\"latest_payment_dt\") as \"latest_payment_date\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"orderNumber\" else null end) as \"latest_order_number\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"reconciliation_id\" else null end) as \"latest_reconciliation_id\",\n1 as \"main_course_bought\",\nsum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"collection_amount\" ,\nsum(main.\"order_selling_price\"/main.\"conv_to_USD\") - sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"collection_minus_GST\",\nsum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") as \"collection_minus_GST_and_TDR_subvention_costs\",\n--sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"service_Tax_USD\",0)) as \"collection_minus_GST_and_TDR_subvention_costs\",\nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") as \"FinanceCharges_cost\",\nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") as \"SalesCharges_cost\",\nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") as \"MarketingCharges_cost\",\nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") as \"Voucher_cost\",\nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") as \"Instructor_cost\",\nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\") as \"Platform_cost\",\n\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\")\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") -- Added on 2023-05-30 : By SP - LI-510\nelse sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\")\nend as \"Revenue_for_payout_calculation\" ,\n \ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100) \nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)  -- Added on 2023-05-30 : By SP - LI-510\nelse  GREATEST((sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) end as \"order_payout\" ,\n \n \n-- Adding Simplilearns payout also - 20230525\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then 100-main.\"payoutPercentage\" else null end)/100) \nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then 100-main.\"payoutPercentage\" else null end)/100)  -- Added on 2023-05-30 : By SP - LI-510\nelse  GREATEST((sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) end as \"order_payout_to_SL\" ,\n\n \ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100) -- Added on 2023-05-30 : By SP - LI-510\nelse  GREATEST((sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) end as \"final_pay\",\n\n\n-- Adding Simplilearns payout also - 20230525\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100)\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum((main.\"order_selling_price\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100) -- Added on 2023-05-30 : By SP - LI-510\nelse  GREATEST((sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) end as \"final_pay_to_SL\",\n\n1 as \"latest_order_row\",\n'Complete order' as \"Order_tag\" ,\n\nsum(main.\"service_Tax_INR\") as \"serviceTax_INR\",\n--sum(NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") as \"serviceTax_INR\",\nsum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"order_selling_price_USD\",\nsum(main.\"order_selling_price\"*main.\"to_inr\") as \"order_selling_price_INR\",\nsum(main.\"order_selling_price\"*main.\"to_inr\") - sum(main.\"service_Tax_INR\") as \"collection_minus_GST_INR\",\nsum(emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") as \"POS_subvention_excluded_USD\",\nsum(emi.\"POS_subvention_excluded\"*main.\"to_inr\") as \"POS_subvention_excluded_INR\",\nsum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" )\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" ) -- Added on 2023-05-30 : By SP - LI-510\nelse sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"*main.\"to_inr\")*main.\"platformCosts\")\nend as \"Revenue_for_payout_calculation_INR\" ,\n\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" ) * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" ) * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100) -- Added on 2023-05-30 : By SP - LI-510\nelse GREATEST((sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"*main.\"to_inr\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) end as \"order_payout_INR\" ,\n\n-- Adding Simplilearns payout also - 20230525\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" ) * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100)\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" )  * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100) -- Added on 2023-05-30 : By SP - LI-510\nelse GREATEST((sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"*main.\"to_inr\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) end as \"order_payout_to_SL_INR\" ,\n\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" ) * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" ) * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100) -- Added on 2023-05-30 : By SP - LI-510\nelse GREATEST((sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"*main.\"to_inr\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) end as \"final_pay_INR\",\n\n-- Adding Simplilearns payout also - 20230525\ncase when main.\"universityFlag\" in ('MIT xPRO')   \tthen sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" ) * (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100)\nwhen main.\"universityFlag\" = 'IFACET, IIT Kanpur' and max(main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' then sum(main.\"order_selling_price\"*main.\"to_inr\" - main.\"service_Tax_INR\" )* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100) -- Added on 2023-05-30 : By SP - LI-510\nelse GREATEST((sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) - \nmax(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"financeCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"SalesCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"marketingCharges\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"voucherCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"instructorCosts\") - \nmax((main.\"order_selling_price\"*main.\"to_inr\")*main.\"teachingAssistantsCosts\") - max((main.\"order_selling_price\"*main.\"to_inr\")*main.\"platformCosts\"))* (max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  100-main.\"payoutPercentage\" else null end)/100)\n, max(main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) end as \"final_pay_to_SL_INR\"\n\n\n\nfrom \n(select elt2.*, pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n pgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n pgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\",pgpay_inp.\"maxASP\",\n-- case when lower(\"paymentCourse\") like '%getting started%' then NULL else \"paymentCourse\" end as \"mainpaymentCourse\",\n\"paymentCourse\" as \"mainpaymentCourse\",\n case when lower(\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n \ncase when elt2.\"currency\" = 'USD' THEN 1\n         when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n         when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n         when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n         when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n         when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n         when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\",\ncase when elt2.\"currency\"='INR' then 1\n              when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n              when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n              when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n              when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n              when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\nEND as \"to_inr\",\t\t \ncase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n         when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n         when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n         when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n         when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n         when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n         when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" end as \"deductionsCurrency_to_USD\",\ncase when pgpay_inp.\"deductionsCurrency\"='INR' then 1\n              when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN rate.\"USD.to.INR\"\n              when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n              when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n              when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n              when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t  when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"\nEND as \"deductionsCurrency_to_INR\"\t \n\t\t \n\t\t \n\n\n from  elt2\n \nLEFT OUTER JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n \nLEFT JOIN (select distinct * from  \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\" )  pgpay_inp on  \n elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n   and elt2.\"ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") and elt2.\"ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n   and  elt2.\"Total_Collection_USD\" >= pgpay_inp.\"minASP\" and elt2.\"Total_Collection_USD\" <= pgpay_inp.\"maxASP\"\n   and pgpay_inp.\"universityFlag\" is not null and pgpay_inp.\"programName\" is not null\nwhere    elt2.\"order_type\" = 'Extn' and ( (elt2.\"ndate\" < '2022-01-01' and upper(pgpay_inp.\"universityFlag\") IN ('IU','IIIT BANGALORE')) or elt2.\"ndate\"  >='2022-07-01')\n ) main\n\nLEFT JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n    ON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  and main.\"orderNumber\" = emi.\"orderNumber\"\ngroup by 1,2,3,4"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591201":{"id":2591201,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":640,"y":736,"width":32,"height":32,"inputConnectorIDs":[2591227],"outputSuccessConnectorIDs":[2591221],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql_PUBLIC_target_anomaly_alerts_stg_2"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CREATE OR REPLACE TABLE ${ev_default_db_name}.${ev_sf_schema_public}.\"target_anomaly_alerts_stg\" AS\n\nselect  SHA2_HEX(concat(ifnull(\"Email\",'-'),ifnull(\"Program Name\",'-'),ifnull(\"Order Number\",'-'),ifnull(\"Payment Geo\",'-'),\n\t\t\t\t\t\tifnull(\"University\",'-'),ifnull(\"Deviation\",'0'),ifnull(\"Category\",'-'),ifnull(\"Sub-Category\",'-'),\n                        ifnull(\"Status\",'-')\n                       )) as \"SHA2_HEX_ID\" ,\n\t\tcurrent_date \"TimeStamp\",\n        0 \"No. of Days\"\n            ,\n        * from \n(\n-------------------------------------------\n----checkpoint1--elt2 order check ---------\n-------------------------------------------\n(select null as \"Email\", null as \"Program Name\",\"orderNumber\" as \"Order Number\",null as \"Payment Geo\", null as \"Month\",  null as \"University\", null as \"Deviation\",'elt2 Check' as \"Category\",\n'Order check' as \"Sub-Category\",'Missing order' as \"Status\" from ( select distinct \"orderNumber\" from (\nselect * from \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\" where \"orderNumber\" in(\nselect * from (\nselect distinct \"orderNumber\"from (\nselect *,to_date(to_timestamp(\"paymentDate\")) as \"payment_date\" from \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\"\nwhere \"payment_date\">='2022-01-01' and not(\"orderNumber\" like any ('SMPL_B2B%','CSTM_CORP%')) \n  and not (\"transactionId\" like any ('APP_FREE%','WEB_FREE%')) and \"course_id\" not in (1018,1019,1020) and not(\"userEmail\" like any ('%simplilearnautomation%'))\n  )where \"orderNumber\" not in\n\n(select distinct \"orderNumber\" from(\nselect * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"ndate\">='2022-01-01'  and  not (\"orderNumber\" is null and \"refundedOrderNumber\" is null)\n) where not(\"orderNumber\" is null) and not(\"orderNumber\" like any ('00%')) --and \"orderNumber\"!='BACKEND_1641204895_SP718612'\norder by \"orderNumber\")\n\n)) and \"is_test_payment\"=0\norder by \"orderNumber\"))\n\nunion all\n--------elt2 collection check\nselect \"userEmail\" as \"Email\", \"Program Name\",\"orderNumber\" as \"Order Number\",\"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University\",\n\"deviation\" as \"Deviation\",'elt2 Check' as \"Category\",'Collection check' as \"Sub-Category\",'Deviation in Collection' as \"Status\" from(\nselect \"userEmail\",\"Program Name\",\"orderNumber\",\"collection_pr\",\"collection_ue\",\"paymentCountry\",\"paymentGeo\",\"University\",\"collection_pr\"-\"collection_ue\" as \"deviation\",\"currency\" from(\nselect *,\ncase when \"collection_pr\"=\"collection_ue\" then 1 else 0 end as \"flag\" from(\nselect * from(\n(select \"orderNumber\",round(sum(\"amount\"),0) as \"collection_pr\",max(\"paymentRegion\") as \"paymentRegion\",max(\"paymentCountry\") as \"paymentCountry\",sum(\"discountAmount\") as \"discountAmount\" from (\nselect *,to_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n from \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\"\nwhere \"payment_date\">='2022-01-01' and not(\"orderNumber\" like any ('SMPL_B2B%','CSTM_CORP%')) \n and not (\"transactionId\" like any ('APP_FREE%','WEB_FREE%')) and \"course_id\" not in (1018,1019,1020) and not(\"userEmail\" like any ('%simplilearnautomation%')))\nwhere \"is_test_payment\"=0\ngroup by 1) pr left join\n\n(select \"orderNumber\" as \"oN\",round(sum(\"order_selling_price\"),0) as \"collection_ue\",max(\"paymentGeo\") as \"paymentGeo\",max(\"University Name\") as \"University\",\n max(\"userEmail\") as \"userEmail\",max(\"Program Name\") as \"Program Name\",max(\"currency\") as \"currency\",max(\"ndate\") as \"ndate\" from(\nselect * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"ndate\">='2022-01-01'  and  not (\"orderNumber\" is null and \"refundedOrderNumber\" is null)\n) where not(\"orderNumber\" is null) and not(\"orderNumber\" like any ('00%'))\ngroup by 1) ue \non pr.\"orderNumber\"=ue.\"oN\")\norder by \"orderNumber\"))\nwhere \"flag\"=0 and abs(\"deviation\")>1 and \"University\" is not null) \n\nunion all\n----------------------------------------------------------------\n---checkpoint 3----pg payout inputs duplicate entry check\n----------------------------------------------------------------\nselect null as \"Email\", \"Program Name\", null as \"Order Number\", \"Payment Geo\", null as \"Month\", \"University\", null as \"Deviation\",'PG Payout Input sheet check' as \"Category\",\n'Duplicate entry check' as \"Sub-Category\",'Duplicate Entry' as \"Status\" from (\nselect \"universityFlag\" as \"University\", \"programName\" as \"Program Name\", \"paymentGeo\" as \"Payment Geo\" from(\nselect \"universityFlag\",\"programName\",\"paymentGeo\",count(\"programName\") as \"count\" from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\"\ngroup by 1,2,3\nhaving \"count\">1))\n\nunion all\n--------pg payout inputs missing value check\nselect null as \"Email\",\"programName\" as \"Program Name\", null as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"universityFlag\" as \"University\", null as \"Deviation\",'PG Payout Input sheet check' as \"Category\",\n'Missing value check' as \"Sub-Category\",'Missing value' as \"Status\" from (\nselect * from (\nselect *,\ncase when \"universityFlag\" is null then 1 else 0 end as \"Flag1\",\ncase when \"programName\" is null then 1 else 0 end as \"Flag2\",\ncase when \"paymentGeo\" is null then 1 else 0 end as \"Flag3\",\ncase when \"deductionsCurrency\" is null then 1 else 0 end as \"Flag4\",\ncase when \"affiliatePaymentCosts\" is null then 1 else 0 end as \"Flag5\",\ncase when \"minPayout\" is null then 1 else 0 end as \"Flag6\",\ncase when \"payoutPercentage\" is null then 1 else 0 end as \"Flag7\",\ncase when \"contractStartDate\" is null then 1 else 0 end as \"Flag8\",\ncase when \"contractEndDate\" is null then 1 else 0 end as \"Flag9\",\ncase when \"minASP\" is null then 1 else 0 end as \"Flag10\",\ncase when \"maxASP\" is null then 1 else 0 end as \"Flag11\",\ncase when \"financeCharges\" is null then 1 else 0 end as \"Flag12\",\ncase when \"SalesCharges\" is null then 1 else 0 end as \"Flag13\",\ncase when \"marketingCharges\" is null then 1 else 0 end as \"Flag14\",\ncase when \"voucherCosts\" is null then 1 else 0 end as \"Flag15\",\ncase when \"instructorCosts\" is null then 1 else 0 end as \"Flag16\",\ncase when \"teachingAssistantsCosts\" is null then 1 else 0 end as \"Flag17\",\ncase when \"platformCosts\" is null then 1 else 0 end as \"Flag18\"\nfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\"\n  ) where \"Flag1\"=1 or \"Flag2\"=1 or \n  \"Flag3\"=1 or \"Flag4\"=1 or \n  \"Flag5\"=1 or \"Flag6\"=1 or \n  \"Flag7\"=1 or \"Flag8\"=1 or \n  \"Flag9\"=1 or \"Flag10\"=1 or \n  \"Flag11\"=1 or \"Flag12\"=1 or \n  \"Flag13\"=1 or \"Flag14\"=1 or \n  \"Flag15\"=1 or \"Flag16\"=1 or \n  \"Flag17\"=1 or \"Flag18\"=1)\n  \nunion all\n---------pg payout inputs program name validation\nselect null as \"Email\", \"programName\" as \"Program Name\", null as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\",\n\"universityFlag\" as \"University\", null as \"Deviation\",'PG Payout Input sheet check' as \"Category\",\n'Program Name validation' as \"Sub-Category\",'Program Name mismatch' as \"Status\" from (\nselect * from(\n(select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\") A left join\n(select distinct \"Program Name\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad')) B\non A.\"programName\"=B.\"Program Name\")) where \"Program Name\" is null\norder by \"Program Name\")\n\nunion all\n-------------------------------------------------------------------\n----checkpoint 4----finance control check for current month entry\n-------------------------------------------------------------------\n  (select null as \"Email\", null as \"Program Name\", null as \"Order Number\", null as \"Payment Geo\",to_date(year(current_date)||'-'||month(current_date)||'-01') as \"Month\",\nnull as \"University\", null as \"Deviation\",'Finance Control sheet check' as \"Category\",\n'Current Month Entry Check' as \"Sub-Category\",'Missing Current Month Entry' as \"Status\" from (\nselect *,\ncase when \"yr1\"!=year(current_date) or \"mnth1\"!=month(current_date) then 1 else 0 end as \"Flag\"\nfrom(\nselect \"Month\",year(to_date(\"Month\")) as \"yr1\",month(to_date(\"Month\")) as \"mnth1\",year(current_date),month(current_date)\nfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" where \"Month\"<=current_date\norder by \"Month\" desc limit 1)) where \"Flag\"=1\n\nunion all\n---------finance control check for historical entries   \nselect null as \"Email\", null as \"Program Name\", null as \"Order Number\", null as \"Payment Geo\",null as \"Month\",\nnull as \"University\", null as \"Deviation\",'Finance Control sheet check' as \"Category\",\n'Historical entry check' as \"Sub-Category\",'Missing Historical Entry' as \"Status\" from (\nselect *, case when \"no_of_months\"!=\"count\" then 1 else 0 end as \"Flag\" from(\nselect *, round((\"Month\"-\"Start_date\")/30) as \"no_of_months\",count(\"Month\") over (partition by \"Start_date\") as \"count\" from(\nselect to_date(\"Month\") as \"Month\",to_date('2018-12-01') as \"Start_date\" from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n -- where month(to_date(\"Month\"))!=5\n ))order by \"Month\" desc limit 1)where \"Flag\"=1\n\nunion all\n ---------finance control check for missing values\nselect null as \"Email\", null as \"Program Name\", null as \"Order Number\", null as \"Payment Geo\",\"Month\" as \"Month\",\nnull as \"University\", null as \"Deviation\",'Finance Control sheet check' as \"Category\",\n'Missing value check' as \"Sub-Category\",'Missing Value' as \"Status\" from (select * from(\nselect * ,\ncase when \"Month\" is null then 1 else 0 end as \"Flag1\",\ncase when \"INR.to.1.USD\" is null then 1 else 0 end as \"Flag2\",\ncase when \"AUD.to.1.USD\" is null then 1 else 0 end as \"Flag3\",\ncase when \"GBP.to.1.USD\" is null then 1 else 0 end as \"Flag4\",\ncase when \"EUR.to.1.USD\" is null then 1 else 0 end as \"Flag5\",\ncase when \"USD.to.INR\" is null then 1 else 0 end as \"Flag6\",\ncase when \"AUD.to.INR\" is null then 1 else 0 end as \"Flag7\",\ncase when \"GBP.to.INR\" is null then 1 else 0 end as \"Flag8\",\ncase when \"EUR.to.INR\" is null then 1 else 0 end as \"Flag9\",\ncase when \"CAD.to.INR\" is null then 1 else 0 end as \"Flag10\",\ncase when \"SGD.to.INR\" is null then 1 else 0 end as \"Flag11\",\ncase when \"CAD.to.1.USD\" is null then 1 else 0 end as \"Flag12\",\ncase when \"TDR.IN\" is null then 1 else 0 end as \"Flag13\",\ncase when \"TDR.AMERICAS\" is null then 1 else 0 end as \"Flag14\",\ncase when \"TDR.ROW\" is null then 1 else 0 end as \"Flag15\",\ncase when \"Sales.Commission.IN\" is null then 1 else 0 end as \"Flag16\",\ncase when \"Sales.Commission.AMERICAS\" is null then 1 else 0 end as \"Flag17\",\ncase when \"Sales.Commission.ROW\" is null then 1 else 0 end as \"Flag18\",\ncase when \"Trainer.fee.LVC\" is null then 1 else 0 end as \"Flag19\",\ncase when \"Trainer.fee.CR\" is null then 1 else 0 end as \"Flag20\",\ncase when \"Month\">='2021-10-01'and \"SGD.to.1.USD\" is null then 1 else 0 end as \"Flag21\"\nfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")\nwhere \"Flag1\"=1 or \"Flag2\"=1 or \n  \"Flag3\"=1 or \"Flag4\"=1 or \n  \"Flag5\"=1 or \"Flag6\"=1 or \n  \"Flag7\"=1 or \"Flag8\"=1 or \n  \"Flag9\"=1 or \"Flag10\"=1 or \n  \"Flag11\"=1 or \"Flag12\"=1 or \n  \"Flag13\"=1 or \"Flag14\"=1 or \n  \"Flag15\"=1 or \"Flag16\"=1 or \n  \"Flag17\"=1 or \"Flag18\"=1 or\n  \"Flag19\"=1 or \"Flag20\"=1 or \n  \"Flag21\"=1  ))\n\nunion all\n-----------------------------------------------------------------------------------------------------------\n------------------------------------------Checkpoint 5 UPG cases                                                              \n-----------------------------------------------------------------------------------------------------------                                                                         \n\n(select \"Email\" as \"Email\", \"Program Name\", \"order_Number\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", \"latest_payment_date\" as \"Month\", \"University_flag\" as \"University\", \"collection_elt2\"-\"collection_amount\" as \"Deviation\",'Upgarde case' as \"Category\",\n'Collection check' as \"Sub-Category\",'Deviation in collection' as \"Status\" from (\n select *,\"collection_elt2\"-\"collection_amount\" as \"Deviation\",\n case when abs(\"collection_elt2\"-\"collection_amount\")>1 then 1 else 0 end as \"Collection_Flag\" from(\n select *,(\"order_selling_price_elt2\")+(\"order_selling_price_parent\") as \"collection_elt2\" from(\n   select * from((                                                                        \n  select * from(\n    (select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\n   from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" \n         where \"orderNumber\" like '%CSTM_UPG%' and \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C' and \"orderNumber\" not in ('CSTM_UPG_8EHIV2FWEYQ'))\n                    group by 1,2,3) payout\n  left join\n\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"orderNumber_elt2\") as \"orderNumber_elt2\",sum(\"collection_USD\") as \"collection_USD\",max(\"SellingPrice_USD\") as \"SellingPrice_USD\",\n  sum(\"order_selling_price_elt2\") as \"order_selling_price_elt2\" ,max(\"parent_collection_USD\") as \"parent_collection_USD\", max(\"currency\") as \"currency\",max(\"paymentCountry\") as \"paymentCountry\",max(\"paymentGeo\") as \"paymentGeo_\"\n   from (select *,\"order_selling_price\"/\"elt_conv_to_USD\" as \"order_selling_price_elt2\" ,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"\n         from(\n  select * from (\n  select * from (\n  (select *,\n   case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"elt_conv_to_USD\"\n   \n   from((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01' and \"orderNumber\" is not null)a\n     left join\n   (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")b\n on extract(year from a.\"ndate\") =  extract(year from to_date(b.\"Month\")) and extract(month from a.\"ndate\") =   extract(month from to_date(b.\"Month\")))\n    ) A\n\n  left join\n\n  (select \"userEmail\" as \"uE\",\"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" like '%CSTM_UPG%' and \"ndate\">='2022-01-01'\n  group by 1,2)B\n  on A.\"userEmail\"=B.\"uE\" and A.\"Program Name\"=B.\"PN\")) where \"oN\" is not null))where \"mapped_reconciliation_id\" is not null\n  group by 1,2)elt2\n    left join\n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"\n     \n  ))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"\n  ))F\n  left join\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"Program Name_1\",max(\"ndate_\") as \"ndate_parent\",max(\"order_selling_price_parent\") as \"order_selling_price_parent\" \n   from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01')u1\n    left join\n  (select *\n   from((select  \"reconciliation_id\" as \"mp\",sum(\"order_selling_price_parent\") as \"order_selling_price_parent\",max(\"ndate\") as \"ndate_\",max(\"currency\") as \"currency\" \n         from(select *,\"order_selling_price\"/\"parent_conv_to_USD\" as \"order_selling_price_parent\" from (select *,\n              case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"parent_conv_to_USD\" from\n              ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\")O\n              left join\n          (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")K\n            on extract(year from O.\"ndate\") =  extract(year from to_date(K.\"Month\")) and extract(month from O.\"ndate\") =   extract(month from to_date(K.\"Month\"))\n              )))\n  group by 1)))u2\n    on u1.\"mapped_reconciliation_id\" =u2.\"mp\") where \"mp\" is not null\n  group by 1,2)G\n  on F.\"Email\"=G.\"email\" and F.\"Program Name\"=G.\"Program Name_1\")))where \"Collection_Flag\"=1\n  \n  --------- removing unnecessary order_numbers causing False anomalies ---- \n\tand \"order_Number\" not in ('CSTM_UPG_PARTIAL_SUBS_I23F4GVYTAW','CSTM_UPG_A42RCMV2NC8','CSTM_UPG_EOQ032WRX30',\n\t\t\t\t'CSTM_UPG_PARTIAL_SUBS_4UH64GQG25W','CSTM_UPG_EHI11UDDHVP','CSTM_UPG_PARTIAL_SUBS_AWSR5VN9LJ6',\n\t\t\t\t'CSTM_UPG_70SKULM7YOQ','CSTM_UPG_AW47FX8ZS1C','CSTM_UPG_2KQ7SSS6DZT')\n  )\n                                                                         \n                                                                         \nunion all                                                                         \n------------------------------------------------------------------------------------------------\n--Extension case\n\nselect \"Email\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"collection_elt2\"-\"collection_amount\" as \"Deviation\",'Extension case' as \"Category\",\n'Collection check' as \"Sub-Category\",'Deviation in collection' as \"Status\" from (\nselect *,\ncase when abs(\"collection_elt2\"-\"collection_amount\")>1 then 1 else 0 end as \"Flag\" from (\nselect *,(\"order_selling_price\"/\"conv_to_USD\") as \"collection_elt2\" from (\n(select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"order_type\"='Extn' and \"latest_payment_date\">='2022-07-01')A\nleft join\n(select \"userEmail\",\"Program Name\" as \"Program Name_\",sum(\"order_selling_price\") as \"order_selling_price\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" like '%EXTN%' and \"ndate\">='2022-07-01' and \"Program Type\"  in ('PG','Bootcamp','Study Abroad')\ngroup by 1,2)B\non A.\"Email\"=B.\"userEmail\" and A.\"Program Name\"=B.\"Program Name_\"))) where \"Flag\"=1\n)\n\nunion all\n------------------------------------------------------------------------------\n-----checkpoint 2-------------------------------------------------------------\n------------------------------------------------------------------------------\n----Complete Order Check FullPayment order check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", \"ndate\" as \"Month\", \"universityFlag\" as \"University\", null as \"Deviation\",'Complete order check' as \"Category\",\n'Full Payment check' as \"Sub-Category\",'Missing order' as \"Status\" from (\nselect * from(select * from (select * from(\n(\nselect \"userEmail\",\"Program Name\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"University\",\"payment_Geo\" from (\nselect \"userEmail\",\"Program Name\", \"University\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"only_prep_bought\",\"oN\",\"mp\",\"payment_Geo\" from (\n(select \"userEmail\",\"Program Name\",max(\"University Name\") as \"University\", max(\"ndate\") as \"ndate\",max(\"orderNumber\") as \"orderNumber\",sum(\"collection_USD\") as \"sum_collection_USD\",max(\"paymentGeo\") as \"payment_Geo\",\n sum(\"collection_INR\") as \"sum_collection_INR\",max(\"SellingPrice_USD\") as \"max_SellingPrice_USD\",max(\"paymentCountry\") as \"paymentCountry\",max(\"only_prep_bought\") as \"only_prep_bought\", max(\"mp\") as \"mp\"\n  from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                              and \"ndate\"<dateadd(day,-1,TO_DATE(current_date)) and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%PARTIAL%','%EXTN%'))\ngroup by 1,2) u1 left join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" like any ('%UPG%','CSTM_PARTIAL%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where \"sum_collection_USD\">0  and \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null\norder by \"userEmail\",\"Program Name\"\n)elt2\nLEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"payment_Geo\" = pgpay_inp.\"paymentGeo\")\n where \"universityFlag\" is not null) A\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"University_flag\" is not null and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") B\non A.\"userEmail\"=B.\"Email\" and A.\"Program Name\"=B.\"Program_Name\" and A.\"universityFlag\"=B.\"University_flag\")\nwhere \"Email\" is null)\n\nunion all\n\n-----------complete order FullPayment order Collection check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"payment_Geo\" as \"Payment Geo\", \"ndate_elt\" as \"Month\",\"universityFlag\" as \"University\", \"Deviation\",'Complete order check' as \"Category\",\n'Full Payment collection check' as \"Sub-Category\",'Deviation in Collection' as \"Status\" from (\nselect *,(\"collection_elt2\"-\"collection_amount\") as \"Deviation\",\ncase when abs(round(\"collection_elt2\")-round(\"collection_amount\"))>1 then 1 else 0 end as \"Flag\" from (\nselect * from(select * from (select * from(select \"userEmail\",\"Program Name\",\"universityFlag\",sum(\"collection_elt2\") as \"collection_elt2\",max(\"orderNumber\") as \"orderNumber\", max(\"ndate\") as \"ndate_elt\" from(\n        select *,\"order_selling_price\"/\"conv_to_USD\" as \"collection_elt2\" from (\n              select *,\n               case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\"            \n                             from((\nselect * from (\nselect * from (\n(select *\n  from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null \n                              and \"ndate\"<=dateadd(day,-1,TO_DATE(current_date)) and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%PARTIAL%','%EXTN%','CSTM_REPEAT%'))) u1 left join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" like any ('%UPG%','CSTM_PARTIAL%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null\norder by \"userEmail\",\"Program Name\")elt2\n                                           \nLEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\")))group by 1,2,3) where \"ndate_elt\">='2022-07-01') elt\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") payout\non elt.\"userEmail\"=payout.\"Email\" and elt.\"Program Name\"=payout.\"Program_Name\" and elt.\"universityFlag\"=payout.\"University_flag\")\nwhere \"Email\" is not null)) where \"Flag\"=1\n\nunion all\n\n----------------partial payment order check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", \"ndate\" as \"Month\", \"universityFlag\" as \"University\", null as \"Deviation\",'Complete order check' as \"Category\",\n'Partial Payment check' as \"Sub-Category\",'Missing order' as \"Status\" from (\nselect * from((select * from((\nselect \"userEmail\",\"Program Name\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"order_selling_price\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"University\",\"payment_Geo\",\n  case when abs(\"sum_collection_USD\"-\"max_SellingPrice_USD\")>1 then 1 else 0 end as \"Flag\" from (\nselect \"userEmail\",\"Program Name\", \"University\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"order_selling_price\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"only_prep_bought\",\"oN\",\"mp\",\"payment_Geo\" from (\n(select \"userEmail\",\"Program Name\",max(\"University Name\") as \"University\", max(\"ndate\") as \"ndate\",max(\"orderNumber\") as \"orderNumber\",sum(\"collection_USD\") as \"sum_collection_USD\",max(\"paymentGeo\") as \"payment_Geo\",\nsum(\"order_selling_price\") as \"order_selling_price\", sum(\"collection_INR\") as \"sum_collection_INR\",max(\"SellingPrice_USD\") as \"max_SellingPrice_USD\",max(\"paymentCountry\") as \"paymentCountry\",max(\"only_prep_bought\") as \"only_prep_bought\", max(\"mp\") as \"mp\"\n  from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                              and \"ndate\"<=dateadd(day,-1,TO_DATE(current_date)) and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%EXTN%')) and \"orderNumber\" like any('%PARTIAL%')\ngroup by 1,2) u1 left join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere not(\"orderNumber\" like any ('%PARTIAL%'))  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where \"sum_collection_USD\">0  and \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null and \"Flag\"!=1\norder by \"userEmail\",\"Program Name\")elt2\n\nLEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"payment_Geo\" = pgpay_inp.\"paymentGeo\")\n where \"universityFlag\" is not null)A\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") B\non A.\"userEmail\"=B.\"Email\" and A.\"Program Name\"=B.\"Program_Name\" and A.\"universityFlag\"=B.\"University_flag\")\nwhere \"Email\" is null)\n\nunion all\n\n-------------------partial payment collection check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"latest_orderNumber\" as \"Order Number\", \"payment_Geo\" as \"Payment Geo\", \"checkDate\" as \"Month\",\"universityFlag\" as \"University\", \"Deviation\",'Complete order check' as \"Category\",\n'Partial Payment collection check' as \"Sub-Category\",'Deviation in collection' as \"Status\" from (\nselect *,(\"collection_elt2\"-\"collection_amount\") as \"Deviation\",\ncase when abs(\"collection_elt2\"-\"collection_amount\")>1 then 1 else 0 end as \"Collection_Flag\" from (\nselect * from(\nselect * from((\n  select \"userEmail\",\"Program Name\",\"universityFlag\",max(\"latest_orderNumber\") as \"latest_orderNumber\",sum(\"collection_elt2\") as \"collection_elt2\", max(\"ndate\") as \"checkDate\" from(\n  select *,\"order_selling_price\"/\"conv_to_USD\" as \"collection_elt2\",last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\",\"universityFlag\" order by \"ndate\")\n   as \"latest_orderNumber\" from(\n  select *,\n               case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\"\n               from((\nselect * from (select *,\n  case when abs(sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\") - \"SellingPrice_USD\")>1 then 0 else 1 end as \"Flag\" from (\nselect * from (\n(select * from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null \n                               and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%EXTN%','CSTM_REPEAT%')) \n and \"orderNumber\" like any('%PARTIAL%')) u1 \nleft join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere not(\"orderNumber\" like any ('%PARTIAL%'))  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where  \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null)where \"Flag\"=1\norder by \"userEmail\",\"Program Name\")elt2\n\n\n  LEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\")))group by 1,2,3)elt\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") payout\non elt.\"userEmail\"=payout.\"Email\" and elt.\"Program Name\"=payout.\"Program_Name\" and elt.\"universityFlag\"=payout.\"University_flag\")\nwhere \"Email\" is not null and \"checkDate\">='2022-07-01'))) where \"Collection_Flag\"=1 \n\nunion all\n------------------------------------------------\n-------checkpoint 6--Refund scenario updated    \n------------------------------------------------                                                                     \n(select \"Email\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", (\"collection_amount\"+\"refund_elt2_USD\")*(-1) as \"Deviation\",'Refund' as \"Category\",\n \"Sub-Category\",'Deviation in Refund Collection' as \"Status\" from (\nselect * from (\nselect *,\ncase when \"collection_amount\"+\"refund_elt2_USD\" >1 then 1 else 0 end as \"RefundFlag\"\n from ( \nselect * from(\n(select \"Email\",\"Program Name\",\"University_flag\",sum(\"collection_amount\") as \"collection_amount\",max(\"orderNumber\") as \"orderNumber\", max(\"paymentGeo\") as \"paymentGeo\" from \n (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"order_type\" in ('Refund','Chargeback') and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C'\norder by \"latest_payment_date\")group by 1,2,3)pay\n\nLEFT JOIN\n\n(select \"userEmail\",\"Program Name\" as \"Program Name_\",sum(\"partialRefundAmount_USD\") as \"refund_elt2_USD\", max(\"Sub-Category\") as \"Sub-Category\"\nfrom(\nselect *,\"partialRefundAmount\"/\"conv_to_USD_\" as \"partialRefundAmount_USD\" from (\nselect *,\ncase when \"currency\" = 'USD' THEN 1\n         when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n         when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n         when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n         when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n         when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n         when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD_\" from(\n(select *,\ncase when \"Flag\"=1 then 'Partial Refund' else 'Full Refund' end as \"Sub-Category\" \nfrom (\nselect *,\ncase when (\"order_selling_price_order\"-sum(\"partialRefundAmount\") over (partition by \"userEmail\",\"Program Name\"))>0 then 1 else 0 end as \"Flag\"\nfrom (\n (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"refundedOrderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-07-01' and \"partialRefundAmount\">0\norder by \"userEmail\",\"Program Name\") A\n\nLEFT JOIN\n\n(select \"userEmail\" as \"email\",\"Program Name\" as \"PName\",sum(\"order_selling_price\") as \"order_selling_price_order\"\nfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') \ngroup by \"userEmail\",\"Program Name\")B\n  on A.\"userEmail\"=B.\"email\" and A.\"Program Name\"=B.\"PName\")))elt2\n  \nLEFT JOIN\n\n(select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\") rate on \n extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and \n           extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\")))))group by 1,2)elt\n  on pay.\"Email\"=elt.\"userEmail\" and pay.\"Program Name\"=elt.\"Program Name_\")))where \"RefundFlag\"=1)\n  \n  union all\n  \nselect \"Email\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"sum_final_payout\" as \"Deviation\",'Refund' as \"Category\",\n'Refund Payout Check' as \"Sub-Category\",'Deviation in Refund Payout' as \"Status\" from (\nselect * from (\n(select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"order_type\" not in ('Chargeback','Refund') and \"paymentQueryType\"='B2C')A\nleft join\n(select * from (\nselect \"Email\" as \"email\",\"Program Name\" as \"programName\",\"University_flag\" as \"uni\", sum(\"final_payout\") as \"sum_final_payout\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\ngroup by 1,2,3\norder by \"Email\",\"Program Name\")where \"sum_final_payout\"<-1)B\non A.\"Email\"=B.\"email\" and A.\"Program Name\"=B.\"programName\" and A.\"University_flag\"=B.\"uni\") \nwhere \"email\" is not null and \"latest_payment_date\">='2022-07-01')\n)\n  \nunion all\n-----------------------------------------------\n--checkpoint 7---------------------------------\n-----------------------------------------------\n  ---fullPayment -- Partial Payment\n (select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from \n  (\n  select *,\"final_payout\"-\"final_payout_elt2\" as \"Deviation in Payout\" from (\n  select *, 'FullPayment or PartialPayment' as \"order\" from (\n  select *,\n  case when abs(\"final_payout\"-\"final_payout_elt2\")>1 then 1 else 0 end as \"Flag_diff\"\n  from ( select *, \n  GREATEST((\"revenueForPayoutUSD\")* (\"payoutPercentage\"/100), \"minPayout\"/\"deductionsCurrency_to_USD\") as \"final_payout_elt2\" from(\n    select *,\"Revenue_for_payout_calculation\" as \"revenueForPayoutUSD\" from(\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\"='Order' and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C') payout\n\n  left join\n\n  (select *\n  from(\n  select \"userEmail\",\"Program Name\" as \"Program_Name\",\"universityFlag\",max(\"ndate\") as \"ndate_elt2\",max(\"latest_orderNumber\"),\n  sum(\"order_selling_price\"/\"conv_to_USD\") as \"collection_elt2_USD\",\n  sum(\"collection_minusGSTelt2\"/\"conv_to_USD\") as \"collection_minusGSTelt2_USD\",\n  sum(\"collectionMinusGST&TDRSub\"/\"conv_to_USD\") as \"collectionMinusGST&TDRSub_USD\",\n  sum((\"collectionMinusGST&TDRSub\"/\"conv_to_USD\")-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"\n     -\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"-\"TeachingAssistants_cost\"\n     -\"Platform_cost\") as \"revenueForPayoutUSD_1\",max(\"payoutPercentage\") as \"payoutPercentage_1\",max(\"minPayout\") as \"minPayout_1\"\n  from (\n  select *,\n  \"POS_subvention_excluded\"-\"serviceTax_elt2\" as \"collectionMinusGST&TDRSub\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from(\n  select *,\"order_selling_price\"-\"serviceTax_elt2\" as \"collection_minusGSTelt2\",\n  case when \"emi_subvention_rate\" is not null then \"order_selling_price\"-(\"order_selling_price\"*\"emi_subvention_rate\"/100)\n  else \"order_selling_price\"-(\"order_selling_price\"*\"TDR\") end as \"collection_excl_subvention\"\n  from(\n  select *,\n  case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\",\n  case when \"deductionsCurrency\" = 'USD' THEN 1\n           when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"deductionsCurrency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"deductionsCurrency_to_USD\",\n  case when \"paymentCountry\" like 'India' then \"order_selling_price\" * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then \"order_selling_price\" * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then \"order_selling_price\"* ( 1 - (1/1.20)) else 0 end as \"serviceTax_elt2\"\n  from (\n  (select * from (\n  select *,\n  case when abs(sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\") -\"total_collection\")>1 then 0 else 1 end \"Completed_order_Check\"\n  from (\n  select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"latest_orderNumber\", \n  case when \"SellingPrice_USD\" is null then sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\")\n  else \"SellingPrice_USD\" end as \"total_collection\" from (\n  (select * from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\n  count(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n      Else 0 end as \"only_prep_bought\"\n          from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                                and \"ndate\"<current_date and \"collection_USD\">0) A left join\n               (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('CSTM_UPG%','%EXTN%'))) u1\n\n  left join \n\n  (select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"orderNumber\" like any ('CSTM_UPG%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%')) --\n  group by 1,2) u2\n\n  on u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\")\n  where \"only_prep_bought\"!=1 and \"oN\" is null and \"mp\" is null)) where \"Completed_order_Check\"=1) elt2\n\n  LEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\"))))\n      group by 1,2,3))elt\n\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program_Name\" and payout.\"University_flag\"=elt.\"universityFlag\")))\n  where \"final_payout_elt2\" is not null) where \"Flag_diff\"=1)\n  )\n\n  union all\n  -----upgrade\n    select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from \n  (\n  select *,\"final_payout\"-\"FinalPayout_elt2\" as \"Deviation in Payout\" from (\n  select *,\n    case when abs(\"final_payout\"-\"FinalPayout_elt2\")>1 then 1 else 0 end as \"flag_diff\",\n    'Upgrade' as \"order\" from (\n  select *, greatest((\"revenueForPayout\"*(\"payoutPercentage\"/100)),\"minPayout\"/\"deductionsCurrency_to_USD\") as \"FinalPayout_elt2\" from (\n  select *, \"Revenue_for_payout_calculation\" as \"revenueForPayout\" from (\n  select *,\n  (\"Collection_minus_TDR-Subvention\"/\"conv_to_USD\")-\"serviceTaxUSD\" as \"CollectionMinusGST&TDRSUB\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from (\n  select *,\n  (\"collection_elt2\"-\"serviceTaxUSD\") as \"collection_minus_GST_elt2\",\n  case when \"emi_subvention_rate\" is not null then round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*(\"emi_subvention_rate\")/100)))\n      else round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*\"TDR\")),2) end as \"Collection_minus_TDR-Subvention\"\n\n  from (\n  (select *,\n  case when \"paymentCountry\" like 'India' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.20)) else 0 end as \"serviceTaxUSD\"\n     from (\n  select *,round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") as \"collection_elt2\" from(\n   select * from((                                                                        \n  select * from(\n    (select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\n   from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" \n         where \"orderNumber\" like '%CSTM_UPG%' and \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C')\n                    group by 1,2,3) payout\n  left join\n\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"orderNumber_elt2\") as \"orderNumber_elt2\",sum(\"collection_USD\") as \"collection_USD\",max(\"SellingPrice_USD\") as \"SellingPrice_USD\",\n  sum(\"order_selling_price\") as \"order_selling_price_elt2\" ,max(\"parent_collection_USD\") as \"parent_collection_USD\", max(\"currency\") as \"currency\",max(\"paymentCountry\") as \"paymentCountry\",max(\"paymentGeo\") as \"paymentGeo_\"\n   from (select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"\n         from(\n  select * from (\n  select * from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01' and \"orderNumber\" is not null) A\n\n  left join\n\n  (select \"userEmail\" as \"uE\",\"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" like '%CSTM_UPG%' and \"ndate\">='2022-01-01'\n  group by 1,2)B\n  on A.\"userEmail\"=B.\"uE\" and A.\"Program Name\"=B.\"PN\")) where \"oN\" is not null))where \"mapped_reconciliation_id\" is not null\n  group by 1,2)elt2\n    left join\n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"\n  ))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"))F\n  left join\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"Program Name_1\",max(\"ndate_\") as \"ndate_parent\",max(\"order_selling_price_parent\") as \"order_selling_price_parent\", max(\"parent_conv_to_USD\") as \"parent_conv_to_USD\" from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01')u1\n    left join\n  (select *,\n   case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"parent_conv_to_USD\"\n   from((select  \"reconciliation_id\" as \"mp\",sum(\"order_selling_price\") as \"order_selling_price_parent\",max(\"ndate\") as \"ndate_\",max(\"currency\") as \"currency\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  group by 1)O\n                left join\n                (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")K\n                 on extract(year from O.\"ndate_\") =  extract(year from to_date(K.\"Month\")) and extract(month from O.\"ndate_\") =   extract(month from to_date(K.\"Month\"))\n                ))u2\n    on u1.\"mapped_reconciliation_id\" =u2.\"mp\") where \"mp\" is not null\n  group by 1,2)G\n  on F.\"Email\"=G.\"email\" and F.\"Program Name\"=G.\"Program Name_1\"))))main\n  left join\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" )emi\n  on main.\"orderNumber_elt2\"=emi.\"orderNumber\" and main.\"reconciliation_id_\"=emi.\"reconciliation_id\"))))))where \"flag_diff\"=1\n  )\n\n  union all\n  -----extension\n      select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from \n  (\n  select *,\"final_payout\"-\"FinalPayout_elt2\" as \"Deviation in Payout\" from (\n  select *,\n    case when abs(\"final_payout\"-\"FinalPayout_elt2\")>1 then 1 else 0 end as \"flag_diff\",'Extension' as \"order\" from (\n  select *, greatest((\"revenueForPayout\"*(\"payoutPercentage\"/100)),\"minPayout\"/\"deductionsCurrency_to_USD\") as \"FinalPayout_elt2\" from (\n  select *,\n  \"CollectionMinusGST&TDRSUB\"-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"-\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"\n      -\"TeachingAssistants_cost\"-\"Platform_cost\" as \"revenueForPayout_1\", \"Revenue_for_payout_calculation\" as \"revenueForPayout\" from (\n  select *,((\"Collection_minus_TDR-Subvention\"/\"conv_to_USD\")-\"serviceTaxUSD\") as \"CollectionMinusGST&TDRSUB\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from(\n  select *,\n  \"collection_elt2\"-\"serviceTaxUSD\" as \"collection_minus_GST_elt2\",\n  case when \"emi_subvention_rate\" is not null then round((\"order_selling_price_elt2\"-(\"order_selling_price_elt2\"*(\"emi_subvention_rate\")/100)))\n      else round((\"order_selling_price_elt2\"-(\"order_selling_price_elt2\"*\"TDR\")),2) end as \"Collection_minus_TDR-Subvention\"\n  from(\n   select *,\n  case when \"paymentCountry\" like 'India' then round((\"order_selling_price_elt2\"/\"conv_to_USD\") * ( 1 - (1/1.18)))\n  when \"paymentCountry\" like 'Singapore' then round((\"order_selling_price_elt2\"/\"conv_to_USD\") * ( 1 - (1/1.07)))\n  when \"paymentCountry\" like 'United Kingdom' then round((\"order_selling_price_elt2\"/\"conv_to_USD\") * ( 1 - (1/1.20))) else 0 end as \"serviceTaxUSD\"\n     from (                                                                        \n  select * from (\n  (select *,(\"order_selling_price_elt2\"/\"conv_to_USD\") as \"collection_elt2\" from (\n  ((select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\" \n    from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\"='Extn' and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C') group by 1,2,3)payout\n  left join\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"paymentCountry\") as \"paymentCountry\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n  --last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\" desc) \n         max(\"orderNumber_elt2\") as \"orderNumber_elt2\",max(\"University Name\") as \"University Name\",sum(\"order_selling_price\") as \"order_selling_price_elt2\",max(\"ndate\") as \"ndate\",max(\"paymentGeo\") as \"paymentGeo_\"\n                  from (select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"orderNumber\" like '%EXTN%' and \"ndate\">='2022-07-01' and \"Program Type\"  in ('PG','Bootcamp','Study Abroad'))\n  where \"orderNumber\" like '%EXTN%' and \"ndate\">='2022-07-01' and \"Program Type\"  in ('PG','Bootcamp','Study Abroad')\n  group by 1,2\n  )elt2\n  LEFT JOIN \n  (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\") rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n  LEFT JOIN \n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"))) main\n  left join\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" )emi\n  on main.\"orderNumber_elt2\"=emi.\"orderNumber\" and main.\"reconciliation_id_\"=emi.\"reconciliation_id\" )))))))where \"flag_diff\"=1)\n  ) \n\n  union all\n  ----refund\n  select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from\n  (\n  select *,\"final_payout1\"-\"final_payout1\" as \"Deviation in Payout\" from (\n  select *,case when abs(\"final_payout1\"-\"final_payout1\") >1 then 1 else 0 end as \"flag_diff\",'Refund' as \"order\" from (\n  select *, \n  case when abs(\"order_payout\")>\"FinalPayout_elt2_order\" then \"FinalPayout_elt2_order\"*(-1) else \"order_payout\" end as \"FinalPayoutRefund_\",\"final_payout1\" as \"FinalPayoutRefund\"\n  from (\n  select *, \n  GREATEST ((\"partialRefundAmount\"/\"conv_to_USD_\") *(\"payoutPercentage\"/100) ,\"minPayout\") * (-1) as \"order_payout\"\n  from (\n  (select * from(                                                                        \n  (select \"Email\",\"Program Name\",\"University_flag\",sum(\"final_payout\") as \"final_payout1\",max(\"minPayout\"/\"deductionsCurrency_to_USD\") as \"minPayout\",max(\"payoutPercentage\") as \"payoutPercentage\",\n   sum(\"collection_amount\") as \"collection_amount\",max(\"orderNumber\") as \"orderNumber\", max(\"paymentGeo\") as \"paymentGeo\" from \n   (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\" in ('Refund','Chargeback') and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C'\n  order by \"latest_payment_date\")group by 1,2,3)pay\n  left join\n  (select \"userEmail\",\"Program Name\" as \"Program Name_\",sum(\"refund_elt2_USD\") as \"refund_elt2_USD\" ,max(\"Sub-Category\") as \"Sub-Category\",\n   sum(\"partialRefundAmount\") as \"partialRefundAmount\", max(\"conv_to_USD_\") as \"conv_to_USD_\" from(\n  select *,(\"partialRefundAmount\"/\"conv_to_USD_\") as \"refund_elt2_USD\",\n  case when \"Flag\"=1 then 'Partial Refund' else 'Full Refund' end as \"Sub-Category\"\n  from (\n  select *,\n  case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD_\" from(\n  (select *,\"order_selling_price_order\"-\"partialRefundAmount\",\n  case when abs(\"order_selling_price_order\"-\"partialRefundAmount\")>1 then 1 else 0 end as \"Flag\" from(\n  select * from(\n  (select \"userEmail\",\"Program Name\",max(\"refundedOrderNumber\") as \"refundedOrderNumber\",sum(\"partialRefundAmount\") as \"partialRefundAmount\",max(\"ndate\") as \"ndate\", \n   max(\"currency\") as \"currency\" from (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"refundedOrderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-07-01' and \"partialRefundAmount\">0\n  order by \"userEmail\",\"Program Name\")group by 1,2)A\n\n  left join\n\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"PName\",sum(\"order_selling_price\") as \"order_selling_price_order\"\n  from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"orderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') \n  group by \"userEmail\",\"Program Name\")B\n    on A.\"userEmail\"=B.\"email\" and A.\"Program Name\"=B.\"PName\")))elt2\n  left join\n  (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\") rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))))order by \"ndate\")\n    group by 1,2 )elt\n  on pay.\"Email\"=elt.\"userEmail\" and pay.\"Program Name\"=elt.\"Program Name_\")\n  )rfd\n\n    left join\n  ----------------------\n  --order+partial\n  (\n  (select \"Email\" as \"Email_\",\"Program Name\" as \"Program Name_\",\"universityFlag\" as \"University_\",\"final_payout_elt2\" as \"FinalPayout_elt2_order\",\"orderNumber\" as \"order_Number\"  \n   from (\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\"='Order' and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C') payout\n\n  left join\n\n  (select *, \n  GREATEST((\"revenueForPayoutUSD\")* (\"payoutPercentage\"/100), \"minPayout\") as \"final_payout_elt2\"\n  from(\n  select \"userEmail\",\"Program Name\" as \"Program_Name\",\"universityFlag\",max(\"ndate\") as \"ndate_elt2\",max(\"latest_orderNumber\"),\n  sum(\"order_selling_price\"/\"conv_to_USD\") as \"collection_elt2_USD\",\n  sum(\"collection_minusGSTelt2\"/\"conv_to_USD\") as \"collection_minusGSTelt2_USD\",\n  sum(\"collectionMinusGST&TDRSub\"/\"conv_to_USD\") as \"collectionMinusGST&TDRSub_USD\",\n  sum((\"collectionMinusGST&TDRSub\"/\"conv_to_USD\")-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"\n     -\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"-\"TeachingAssistants_cost\"\n     -\"Platform_cost\") as \"revenueForPayoutUSD\",max(\"payoutPercentage\") as \"payoutPercentage\",max(\"minPayout\"/\"deductionsCurrency_to_USD\") as \"minPayout\"\n  from (\n  select *,\n  \"collection_excl_subvention\"-\"serviceTax_elt2\" as \"collectionMinusGST&TDRSub\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from(\n  select *,\"order_selling_price\"-\"serviceTax_elt2\" as \"collection_minusGSTelt2\",\n  case when \"emi_subvention_rate\" is not null then \"order_selling_price\"-(\"order_selling_price\"*\"emi_subvention_rate\"/100)\n  else \"order_selling_price\"-(\"order_selling_price\"*\"TDR\") end as \"collection_excl_subvention\"\n  from(\n  select *,\n  case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\",\n  case when \"deductionsCurrency\" = 'USD' THEN 1\n           when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"deductionsCurrency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"deductionsCurrency_to_USD\",\n  case when \"paymentCountry\" like 'India' then \"order_selling_price\" * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then \"order_selling_price\" * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then \"order_selling_price\"* ( 1 - (1/1.20)) else 0 end as \"serviceTax_elt2\"\n  from (\n  (select * from (\n  select *,\n  case when abs(sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\") -\"total_collection\")>1 then 0 else 1 end \"Completed_order_Check\"\n  from (\n  select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"latest_orderNumber\", \n  case when \"SellingPrice_USD\" is null then sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\")\n  else \"SellingPrice_USD\" end as \"total_collection\" from (\n  (select * from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\n  count(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n      Else 0 end as \"only_prep_bought\"\n          from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                                and \"ndate\"<current_date and \"collection_USD\">0) A left join\n               (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('CSTM_UPG%','%EXTN%'))) u1\n\n  left join \n\n  (select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"orderNumber\" like any ('CSTM_UPG%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%')) --\n  group by 1,2) u2\n\n  on u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\")\n  where \"only_prep_bought\"!=1 and \"oN\" is null and \"mp\" is null)) where \"Completed_order_Check\"=1) elt2\n\n  LEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\"))))\n      group by 1,2,3))elt\n\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program_Name\" and payout.\"University_flag\"=elt.\"universityFlag\")\n  where \"final_payout_elt2\" is not null\n  )\n\n  union all\n  --upgrade\n  select \"Email\" as \"Email_\",\"Program Name\" as \"Program Name_\",\"University_flag\" as \"University_\",\"FinalPayout_elt2\" as \"FinalPayout_elt2_order\",\"order_Number\" from (\n  select *,\n    case when \"University_flag\"='IU' then 0 else greatest((\"revenueForPayout\"*(\"payoutPercentage\"/100)),\"minPayout\"/\"deductionsCurrency_to_USD\") end as \"FinalPayout_elt2\" from (\n  select *,\n  \"CollectionMinusGST&TDRSUB\"-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"-\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"\n      -\"TeachingAssistants_cost\"-\"Platform_cost\" as \"revenueForPayout\" from (\n  select *,\n  (\"Collection_minus_TDR-Subvention\"/\"conv_to_USD\")-\"serviceTaxUSD\" as \"CollectionMinusGST&TDRSUB\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from (\n  select *,\n  (\"collection_elt2\"-\"serviceTaxUSD\") as \"collection_minus_GST_elt2\",\n  case when \"emi_subvention_rate\" is not null then round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*(\"emi_subvention_rate\")/100)))\n      else round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*\"TDR\")),2) end as \"Collection_minus_TDR-Subvention\"\n\n  from (\n  (select *,\n  case when \"paymentCountry\" like 'India' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.20)) else 0 end as \"serviceTaxUSD\"\n     from (\n  select *,round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") as \"collection_elt2\" from(\n   select * from((                                                                        \n  select * from(\n    (select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\n   from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" \n         where \"orderNumber\" like '%CSTM_UPG%' and \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C')\n                    group by 1,2,3) payout\n  left join\n\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"orderNumber_elt2\") as \"orderNumber_elt2\",sum(\"collection_USD\") as \"collection_USD\",max(\"SellingPrice_USD\") as \"SellingPrice_USD\",\n  sum(\"order_selling_price\") as \"order_selling_price_elt2\" ,max(\"parent_collection_USD\") as \"parent_collection_USD\", max(\"currency\") as \"currency\",max(\"paymentCountry\") as \"paymentCountry\",max(\"paymentGeo\") as \"paymentGeo_\"\n   from (select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"\n         from(\n  select * from (\n  select * from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01' and \"orderNumber\" is not null) A\n\n  left join\n\n  (select \"userEmail\" as \"uE\",\"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" like '%CSTM_UPG%' and \"ndate\">='2022-01-01'\n  group by 1,2)B\n  on A.\"userEmail\"=B.\"uE\" and A.\"Program Name\"=B.\"PN\")) where \"oN\" is not null))where \"mapped_reconciliation_id\" is not null\n  group by 1,2)elt2\n    left join\n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"\n  ))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"))F\n  left join\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"Program Name_1\",max(\"ndate_\") as \"ndate_parent\",max(\"order_selling_price_parent\") as \"order_selling_price_parent\", max(\"parent_conv_to_USD\") as \"parent_conv_to_USD\" from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01')u1\n    left join\n  (select *,\n   case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"parent_conv_to_USD\"\n   from((select  \"reconciliation_id\" as \"mp\",sum(\"order_selling_price\") as \"order_selling_price_parent\",max(\"ndate\") as \"ndate_\",max(\"currency\") as \"currency\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  group by 1)O\n                left join\n                (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")K\n                 on extract(year from O.\"ndate_\") =  extract(year from to_date(K.\"Month\")) and extract(month from O.\"ndate_\") =   extract(month from to_date(K.\"Month\"))\n                ))u2\n    on u1.\"mapped_reconciliation_id\" =u2.\"mp\") where \"mp\" is not null\n  group by 1,2)G\n  on F.\"Email\"=G.\"email\" and F.\"Program Name\"=G.\"Program Name_1\"))))main\n  left join\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" )emi\n  on main.\"orderNumber_elt2\"=emi.\"orderNumber\" and main.\"reconciliation_id_\"=emi.\"reconciliation_id\"))))))ord\n  on rfd.\"Email\"=ord.\"Email_\" and rfd.\"Program Name\"=ord.\"Program Name_\" and rfd.\"University_flag\"=ord.\"University_\")))) where \"flag_diff\"=1)\n  )\n\nunion all\n------------------------------------\n----checkpoint 8--------------------\n------------------------------------\nselect \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\",\ncase when \"flag1\"=1 then \"collection_amount\"-\"collection_amount1\"\n        when \"flag2\"=1 then \"collection_minus_GST\"-\"collection_minus_GST1\"\n        when \"flag3\"=1 then \"Revenue_for_payout_calculation\"-\"Revenue_for_payout_calculation1\"\n        when \"flag4\"=1 then \"final_payout\"-\"final_payout1\" else null end as \"Deviation\",\n        'Historical Data Check' as \"Category\",\n case when \"flag1\"=1 then 'Collection'\n        when \"flag2\"=1 then 'Collection minus GST' \n        when \"flag3\"=1 then 'Revenue for Payout' \n        when \"flag4\"=1 then 'Final Payout' else null end as \"Sub-Category\",'Deviation from Historical Data' as \"Status\"  from (\nselect *,\ncase when abs(\"collection_amount\"-\"collection_amount1\")>1 then 1 else 0 end as \"flag1\",\ncase when abs(\"collection_minus_GST\"-\"collection_minus_GST1\")>1 then 1 else 0 end as \"flag2\",\ncase when abs(\"Revenue_for_payout_calculation\"-\"Revenue_for_payout_calculation1\")>1 then 1 else 0 end as \"flag3\",\ncase when abs(\"final_payout\"-\"final_payout1\")>1 then 1 else 0 end as \"flag4\"\nfrom(\n(select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\"<to_date(extract(year from current_date)||'-'||extract(month from current_date)||'-01') and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C')A\n\nleft join\n(select \"Email\" as \"email\",\"Program Name\" as \"Program_Name\",\"orderNumber\" as \"orderNumber1\",\"order_type\" as \"orderType\",\"University_flag\" as \"UniversityFlag\",\"collection_amount\"  as \"collection_amount1\",\n \"collection_minus_GST\" as \"collection_minus_GST1\",\"Revenue_for_payout_calculation\" as \"Revenue_for_payout_calculation1\",\"final_payout\" as \"final_payout1\"\n from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_freezed_table\")B\n \n on A.\"Email\"=B.\"email\" and A.\"Program Name\"=B.\"Program_Name\" and A.\"order_type\"=B.\"orderType\" and A.\"University_flag\"=B.\"UniversityFlag\" and A.\"orderNumber\"=B.\"orderNumber1\")\n        where \"email\" is not null and \"orderNumber\" not in ('CSTM_UPG_9XLOXNHMWO4','CSTM_6X4GCSDEWCF')\n) where \"flag1\"=1 or \"flag2\"=1 or\n        \"flag3\"=1 or \"flag4\"=1\n        \n)"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591202":{"id":2591202,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":928,"y":400,"width":32,"height":32,"inputConnectorIDs":[2591270],"outputSuccessConnectorIDs":[2591218],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"university_payout_table_with_b2b_final_new_logic_2"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_stg\" \nas      \n\nselect * from \n(\n  \n  \t-------------------------------------------------------------------------------\n    ---------------------- B2C current months payout data -------------------------\n    -------------------------------------------------------------------------------\n\t(\n\tselect * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_temp\"\n      where substr(\"latest_payment_date\",1,7) \n\t\t\t> ( select max(substr(\"latest_payment_date\",1,7)) \n\t\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\")\n    )\n  \t\n  \tunion all\n\t\n  \t-------------------------------------------------------------------------------\n    ------------- B2B data for last month as previous data is Freezed -------------\n    -------------------------------------------------------------------------------\n\n\tselect * from \n\t(\n\tselect \n\t\tNULL as \"Email\",\n\t\t'Order' as \"order_type\",\n\t\t\"payment_date\" as \"paymentDate\",\n\t\tNULL as \"reconciliation_id\",\n\t\tNULL as \"ReconcileOption\",\n\t\t\"Order_Number__c\" as \"orderNumber\",\n\t\tNULL as \"refundedOrderNumber\",\n\t\t\"CurrencyIsoCode\"  as \"currency\",\n\t\t\"programName\" as \"paymentCourse\",\n\t\t\"programName\" as \"Program Name\",\n\t\t\"geo\" as \"paymentGeo\",\n\t\tCOALESCE(\"ShippingCountry\",\"BillingCountry\",\"Invoice_Billing_Country__c\") as \"paymentCountry\",\n\t\tNULL as \"paymentTrainingType\",\n\t\t'B2B' as \"paymentQueryType\",\n\t\tNULL as \"paymentCategory\",\n\t\tNULL as \"paymentGateway\",\n\t\tNULL as \"RefundReconciliation_id\",\n\t\tNULL as \"refundUnit\",\n\t\tNULL as \"partialRefundAmount\",\n\t\t\"payment_date\" as \"ndate\",\n\t\tNULL as \"EMITerm\",\n\t\tNULL as \"fee\",\n\t\tNULL as \"applicableOnwards\",\n\t\tNULL as \"emi_subvention_rate\",\n\t\tNULL as \"TDR\",\n\t\tNULL as \"POS_subvention_excluded\",\n\t\tNULL as \"POS_order_selling_price\",\n\t\tNULL as \"GST\",\n\t\tNULL as \"selling_price\",\n\t\t\"universityFlag\" \"University_flag\",\n\t\t\"deductionsCurrency\", --from payout table\n\t\t\"affiliatePaymentCosts\", --payout table\n\t\t\"minPayout\", --payout table\n\t\t\"payoutPercentage\",\n\t\t\"minASP\", --payout\n\t\t\"maxASP\", --payout\n\t\t\"financeCharges\", --payout\n\t\t\"SalesCharges\", --payout\n\t\t\"marketingCharges\", --payout\n\t\t\"voucherCosts\", --payout\n\t\t\"instructorCosts\", --payout\n\t\t\"teachingAssistantsCosts\", --payout\n\t\t\"platformCosts\", --payout\n\t\tNULL as \"serviceTax\",\n\t\t1 as \"main_course_cd\",\n\t\tNULL as \"prep_course_cd\",\n\t\t\"conv_to_USD\",\n\t\tcase when \"CurrencyIsoCode\" ='INR' then 1\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'USD' THEN \"USD.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'AUD' THEN \"AUD.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'GBP' THEN \"GBP.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'EUR' THEN \"EUR.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'CAD' THEN \"CAD.to.INR\"\n\t\t\t\tEND as \"to_inr\",\n\t\tcase when \"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\"\n\t\t\t\tend as \"deductionsCurrency_to_USD\", --null\n\t\t--/* added as part of order details onboarding on 20211207 */\n\t\tNULL as \"CourseName\",\n\t\tNULL as  \"Parent_orderNumber\",\n\t\tNULL as \"MRP_USD\",\n\t\tNULL as \"parent_collection_USD\",\n\t\tnull as \"discount_Amount_USD\",\n\t\tnull as \"discount_Amount_INR\",\n\t\tNULL as \"discount_percentage\",\n\t\t--/* end of order details onboarding on 20211207 */\n\t\textract(year from to_date(\"Month\")) as \"yr\",\n\t\textract(month from to_date(\"Month\")) as \"month\",\n\t\t\"payment_date\" as \"first_payment_date\",\n\t\t\"Order_Number__c\" as \"first_order_number\",\n\t\tNULL as \"first_reconciliation_id\",\n\t\t\"payment_date\" as \"latest_payment_date\",\n\t\t\"Order_Number__c\" as \"latest_order_number\",\n\t\tNULL as \"latest_reconciliation_id\",\n\t\t1 as \"main_course_bought\",\n\t\t\"payment_received\" as \"collection_amount\", -- payment received\n\t\t\"payment_received\" as \"collection_minus_GST\",  -- payment received\n\t\t\"payment_received\" as \"collection_minus_GST_and_TDR_subvention_costs\",  -- payment received\n\t\tNULL as \"Affiliate_payment_cost\",\n\t\tNULL as \"FinanceCharges_cost\",\n\t\tNULL as \"SalesCharges_cost\",\n\t\tNULL as \"MarketingCharges_cost\",\n\t\tNULL as \"Voucher_cost\",\n\t\tNULL as \"Instructor_cost\",\n\t\tNULL as \"TeachingAssistants_cost\",\n\t\tNULL as \"Platform_cost\",\n\t\t\"payment_received\" as \"Revenue_for_payout_calculation\",  -- payment received\n\t\t\"Payout per order\" as \"order_payout\",\n\t\t\"Final_payout\",\n\t\t1 as \"latest_order_row\",\n\t\tNULL as \"Email_wise_payout\",\n\t\tNULL as \"refund_flag\",\n\t\t'Complete order' as \"Order_tag\",\n\t\tnull \"number of participants\",\n\t\t\"Account_Name_Text__c\" as \"account name\",\n\t\t\"USD.to.INR\", \n\t\tnull as \"cohort_name\",\n\t\tNULL as \"serviceTax_INR\",\n\t\tNULL as \"order_selling_price_USD\",\n\t\tNULL as \"collection_minus_GST_INR\",\n\t\tNULL as \"order_selling_price_INR\",\n\t\tNULL as \"POS_subvention_excluded_USD\", \n\t\tNULL as \"POS_subvention_excluded_INR\",\n\t\tNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\tNULL as \"Revenue_for_payout_calculation_INR\",\n\t\tNULL as \"order_payout_INR\",\n\t\tNULL as \"final_payout_INR\",\n\t\t\"Payout on Delivered Milstone\",\n\t\t\"cumulative_payout\",\n\t\t\"remainder_payout\"\n\t\t  \n\t\t,NULL \"order_payout_to_SL\"\n\t\t,NULL \"final_payout_to_SL\"\n\t\t,NULL \"order_payout_to_SL_INR\"\n\t\t,NULL \"final_payout_to_SL_INR\"\n\t\t,NULL \"loan_disbursed_amount\"\n\t\t,NULL \"first_lvc_attended_date\"\n\t\t,NULL At_least_1_LVC_attended\n\t\t,NULL \"old_latest_payment_date\"\n\t\t,NULL \"Revised_Logic_Applicable_Flag\"\n      \t,NULL \"mapped_reconciliation_id\" -- Added on 20240305 :SP\t\n\t\t,NULL \"Program Type\" -- Added on 20240305 :SP\t\n        , NULL \"enrollment_rn\"\n\tfrom\n\t\t(\n\t\t\tselect * from  ${ev_default_db_name}.\"LRS_ANALYTICS\".\"target_b2b_order\" main\n\t\t\t\n\t\t\tinner join ${ev_default_db_name}.\"PRODCT_TEMP\".\"b2b_payout_milestone\"  mile\n\t\t\ton main.\"OrderNumber\"=mile.\"Order_Number__c\"\n\t\t\t\n\t\t\tleft join \n\t\t\t(\n\t\t\t\tselect *, TO_CHAR(date(\"Month\"),'YYYYMM') \"YYYYMM\"--extract(year from to_date(\"Month\")) as \"yr\", extract(month from to_date(\"Month\")) as \"month\"\n\t\t\t\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n\t\t\t)inr_conv\n\t\t\ton mile.\"milestone_mmyy\" = inr_conv.\"YYYYMM\"\n\t\t\twhere \"milestone_mmyy\">\n\t\t\t\t\t\t\t(select max(replace(substr(\"latest_payment_date\",1,7),'-','')) \n\t\t\t\t\t\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\")\n\t\t)\n\n\t)\n  \n  \n  \tunion all\n\t\n  \t-------------------------------------------------------------------------------\n    --------------- Freezed table(B2B+B2C) data till 20240301 ---------------------\n    -------------------------------------------------------------------------------\n\t(\n\tselect * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n      where (\"order_type\" <> 'RefundUPG' and \"latest_payment_date\" < '2024-03-01' and \"University_flag\" not ilike '%ihub%') \n      \t\tor (\"latest_payment_date\" between '2024-03-01' and '2024-03-31' and \"University_flag\" not ilike '%ihub%') \n\tqualify case when \"order_type\" not in ('Refund','Chargeback','RefundUPG') and \"Email\" is not null\n\t\t\t\tthen row_number() over (partition by \"Email\",\"Program Name\",\"order_type\",\"University_flag\" order by \"latest_payment_date\" desc,\"ndate\" desc) end = 1 \n\tor \t\tcase when \"order_type\" in ('Refund','Chargeback','RefundUPG')\n\t\t\t\tthen row_number() over (partition by \"Email\",\"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc,\"ndate\" desc) end = 1 \n    or\t\tcase when \"Email\" is null\n\t\t\t\tthen row_number() over (partition by \"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc,\"ndate\" desc) end = 1 \n\t)\n   \t  \n  \t\n  \t-------------------------------------------------------------------------------\n    --------- Freezed table(B2B+B2C) data till last month since 20240301 ----------\n    -------------------------------------------------------------------------------\n  \tunion all\n  \t(\n\tselect * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n      where \"latest_payment_date\">='2024-04-01' or \"University_flag\" ilike  '%ihub%'\n    )\n\t\n\n)\n\n--qualify row_number() over (partition by \"Email\",\"Program Name\",\"order_type\",\"University_flag\" order by \"latest_payment_date\" desc)=1\n/*qualify case when \"order_type\" not in ('Refund','Chargeback','RefundUPG') and \"Email\" is not null\n\t\t\t\tthen row_number() over (partition by \"Email\",\"Program Name\",\"order_type\",\"University_flag\" order by \"latest_payment_date\" desc) end = 1 \nor \t\tcase when \"order_type\" in ('Refund','Chargeback','RefundUPG')\n\t\t\t\tthen row_number() over (partition by \"Email\",\"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc) end = 1 \nor\t\tcase when \"Email\" is null\n\t\t\t\tthen row_number() over (partition by \"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc) end = 1 \n*/\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591203":{"id":2591203,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":368,"y":736,"width":32,"height":32,"inputConnectorIDs":[2591221],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2899801,2979302],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql_PUBLIC_target_anomaly_alerts_2"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--CREATE Or replace table \"SL_ANALYTICS_DB\".\"PUBLIC\".\"target_anomaly_alerts\" AS\n\ndelete from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\"\nwhere \"TimeStamp\" = current_date;\n\nINSERT INTO ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\"\n\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\",\n0 \"No. of Days\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg\" \nwhere \"SHA2_HEX_ID\" not in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\") \n\nunion all\n\nselect a.*,b.\"No. of Days\"+1 from\n(\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg\" \nwhere \"SHA2_HEX_ID\" in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\") )a\nleft join\n(select \"SHA2_HEX_ID\" ,max( \"No. of Days\") as \"No. of Days\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\" group by 1) b\nON a.\"SHA2_HEX_ID\" = b.\"SHA2_HEX_ID\"\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591204":{"id":2591204,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":432,"y":400,"width":32,"height":32,"inputConnectorIDs":[2591336],"outputSuccessConnectorIDs":[2591225],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"university_payout_table_with_b2b_temp"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\" as  \n \n( \n  \n--------------------------------------------------------\n------------- B2C payout data except KPMG --------------\n--------------------------------------------------------\nselect \n\tpayout_table.\"Email\",\n\tpayout_table.\"order_type\",\n\tpayout_table.\"paymentDate\",\n\tpayout_table.\"reconciliation_id\",\n\tpayout_table.\"ReconcileOption\",\n\tpayout_table.\"orderNumber\",\n\tpayout_table.\"refundedOrderNumber\",\n\tpayout_table.\"currency\",\n\tpayout_table.\"paymentCourse\",\n\tpayout_table.\"Program Name\",\n  \tpayout_table.\"paymentGeo\",\n\tpayout_table.\"paymentCountry\",\n\tpayout_table.\"paymentTrainingType\",\n\tpayout_table.\"paymentQueryType\",\n\tpayout_table.\"paymentCategory\",\n\tpayout_table.\"paymentGateway\",\n\tpayout_table.\"RefundReconciliation_id\",\n\tpayout_table.\"refundUnit\",\n\tpayout_table.\"partialRefundAmount\",\n\tpayout_table.\"ndate\",\n\tpayout_table.\"EMITerm\",\n\tpayout_table.\"fee\",\n\tpayout_table.\"applicableOnwards\",\n\tpayout_table.\"emi_subvention_rate\",\n\tpayout_table.\"TDR\",\n\tpayout_table.\"POS_subvention_excluded\",\n\tpayout_table.\"POS_order_selling_price\",\n\tpayout_table.\"GST\",\n\tpayout_table.\"selling_price\",\n\tpayout_table.\"University_flag\",\n\tpayout_table.\"deductionsCurrency\",\n\tpayout_table.\"affiliatePaymentCosts\",\n\tpayout_table.\"minPayout\",\n\tpayout_table.\"payoutPercentage\",\n\tpayout_table.\"minASP\",\n\tpayout_table.\"maxASP\",\n\tpayout_table.\"financeCharges\",\n\tpayout_table.\"SalesCharges\",\n\tpayout_table.\"marketingCharges\",\n\tpayout_table.\"voucherCosts\",\n\tpayout_table.\"instructorCosts\",\n\tpayout_table.\"teachingAssistantsCosts\",\n\tpayout_table.\"platformCosts\",\n\tpayout_table.\"serviceTax\",\n\tpayout_table.\"main_course_cd\",\n\tpayout_table.\"prep_course_cd\",\n\tpayout_table.\"conv_to_USD\",\n\tpayout_table.\"to_inr\",\n\tpayout_table.\"deductionsCurrency_to_USD\",\n\tpayout_table.\"CourseName\",\n\tpayout_table.\"Parent_orderNumber\",\n\tpayout_table.\"MRP_USD\",\n\tpayout_table.\"parent_collection_USD\",\n\tpayout_table.\"discount_Amount_USD\",\n\tpayout_table.\"discount_Amount_INR\",\n\tpayout_table.\"discount_percentage\",\n\tpayout_table.\"yr\",\n\tpayout_table.\"month\",\n\tpayout_table.\"first_payment_date\",\n\tpayout_table.\"first_order_number\",\n\tpayout_table.\"first_reconciliation_id\",\n\tpayout_table.\"latest_payment_date\",\n\tpayout_table.\"latest_order_number\",\n\tpayout_table.\"latest_reconciliation_id\",\n\tpayout_table.\"main_course_bought\",\n\tpayout_table.\"collection_amount\",\n\tpayout_table.\"collection_minus_GST\",\n\tpayout_table.\"collection_minus_GST_and_TDR_subvention_costs\",\n\tpayout_table.\"Affiliate_payment_cost\",\n\tpayout_table.\"FinanceCharges_cost\",\n\tpayout_table.\"SalesCharges_cost\",\n\tpayout_table.\"MarketingCharges_cost\",\n\tpayout_table.\"Voucher_cost\",\n\tpayout_table.\"Instructor_cost\",\n\tpayout_table.\"TeachingAssistants_cost\",\n\tpayout_table.\"Platform_cost\",\n\tpayout_table.\"Revenue_for_payout_calculation\",\n\tpayout_table.\"order_payout\",\n\tpayout_table.\"final_payout\",\n\tpayout_table.\"latest_order_row\",\n\tpayout_table.\"Email_wise_payout\",\n\tpayout_table.\"refund_flag\",\n\tpayout_table.\"Order_tag\",\n\tNULL as \"number of participants\",\n\tNULL as \"account name\",\n\tcurrency.\"USD.to.INR\",\n\tpayout_table.\"cohort_name\",\n\tpayout_table.\"serviceTax_INR\",\n\tpayout_table.\"order_selling_price_USD\",\n\tpayout_table.\"collection_minus_GST_INR\",\n\tpayout_table.\"order_selling_price_INR\",\n\tpayout_table.\"POS_subvention_excluded_USD\", \n\tpayout_table.\"POS_subvention_excluded_INR\",\n\tpayout_table.\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\tpayout_table.\"Revenue_for_payout_calculation_INR\",\n\tpayout_table.\"order_payout_INR\",\n\tpayout_table.\"final_payout_INR\",\n\tNULL \"Payout on Delivered Milstone\",\n\tNULL \"cumulative_payout\",\n\tNULL \"remainder_payout\"\n\t,\"order_payout_to_SL\"\n\t,\"final_payout_to_SL\"\n\t,\"order_payout_to_SL_INR\"\n\t,\"final_payout_to_SL_INR\"\n\t,payout_table.\"loan_disbursed_amount\"\n\t,\"first_lvc_attended_date\"\n\t,At_least_1_LVC_attended\n\t,\"old_latest_payment_date\"\n\t,\"Revised_Logic_Applicable_Flag\"\n  \t,  \tpayout_table.\"mapped_reconciliation_id\" -- Added on 20240305 :SP\t\n\t,\tpayout_table.\"Program Type\"-- Added on 20240305 :SP\t\n   \t, \"enrollment_rn\"\n\nfrom ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table\" payout_table\nleft join \n(\n\tselect *, \n\t\textract(year from to_date(\"Month\")) as \"yr\", \n\t\textract(month from to_date(\"Month\")) as \"month\"\n\tfrom ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"conversion_rates_monthwise\"\n) currency \non payout_table.\"yr\" = currency.\"yr\"\nand payout_table.\"month\" = currency.\"month\"\n\nwhere  not (\"latest_payment_date\" between '2022-01-01' and '2022-06-30' and \"University_flag\" = 'KPMG') -- SP : 20220921\n)\n\nunion all\n\n--------------------------------------------------------\n------------- B2B payout data --------------------------\n--------------------------------------------------------\n(\nselect * from \n  (\n\tselect *,\n\t\tNULL \"Payout on Delivered Milstone\",\n\t\tNULL \"cumulative_payout\",\n\t\tNULL \"remainder_payout\"\n\t\t,NULL \"order_payout_to_SL\"\n\t\t,NULL \"final_payout_to_SL\"\n\t\t,NULL \"order_payout_to_SL_INR\"\n\t\t,NULL \"final_payout_to_SL_INR\"\n\t\t,NULL \"loan_disbursed_amount\"\n\t\t,NULL \"first_lvc_attended_date\"\n\t\t,NULL At_least_1_LVC_attended\n\t\t,NULL \"old_latest_payment_date\"\n\t\t,NULL \"Revised_Logic_Applicable_Flag\"\n      \t,NULL \"mapped_reconciliation_id\" -- Added on 20240305 :SP\t\n\t\t,NULL \"Program Type\"-- Added on 20240305 :SP\t\n\t, NULL \"enrollment_rn\"\n    \n\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"b2b_payout_till_june_2022\" \n\twhere \"ndate\" < '2022-01-01'\n\n\tunion all\n\tselect \n\t\tNULL as \"Email\",\n\t\t'Order' as \"order_type\",\n\t\t\"payment_date\" as \"paymentDate\",\n\t\tNULL as \"reconciliation_id\",\n\t\tNULL as \"ReconcileOption\",\n\t\t\"Order_Number__c\" as \"orderNumber\",\n\t\tNULL as \"refundedOrderNumber\",\n\t\t\"CurrencyIsoCode\"  as \"currency\",\n\t\t\"programName\" as \"paymentCourse\",\n\t\t\"programName\" as \"Program Name\",\n\t\t\"geo\" as \"paymentGeo\",\n\t\tCOALESCE(\"ShippingCountry\",\"BillingCountry\",\"Invoice_Billing_Country__c\") as \"paymentCountry\",\n\t\tNULL as \"paymentTrainingType\",\n\t\t'B2B' as \"paymentQueryType\",\n\t\tNULL as \"paymentCategory\",\n\t\tNULL as \"paymentGateway\",\n\t\tNULL as \"RefundReconciliation_id\",\n\t\tNULL as \"refundUnit\",\n\t\tNULL as \"partialRefundAmount\",\n\t\t\"payment_date\" as \"ndate\",\n\t\tNULL as \"EMITerm\",\n\t\tNULL as \"fee\",\n\t\tNULL as \"applicableOnwards\",\n\t\tNULL as \"emi_subvention_rate\",\n\t\tNULL as \"TDR\",\n\t\tNULL as \"POS_subvention_excluded\",\n\t\tNULL as \"POS_order_selling_price\",\n\t\tNULL as \"GST\",\n\t\tNULL as \"selling_price\",\n\t\t\"universityFlag\" \"University_flag\",\n\t\t\"deductionsCurrency\", --from payout table\n\t\t\"affiliatePaymentCosts\", --payout table\n\t\t\"minPayout\", --payout table\n\t\t\"payoutPercentage\",\n\t\t\"minASP\", --payout\n\t\t\"maxASP\", --payout\n\t\t\"financeCharges\", --payout\n\t\t\"SalesCharges\", --payout\n\t\t\"marketingCharges\", --payout\n\t\t\"voucherCosts\", --payout\n\t\t\"instructorCosts\", --payout\n\t\t\"teachingAssistantsCosts\", --payout\n\t\t\"platformCosts\", --payout\n\t\tNULL as \"serviceTax\",\n\t\t1 as \"main_course_cd\",\n\t\tNULL as \"prep_course_cd\",\n\t\t\"conv_to_USD\",\n\t\tcase when \"CurrencyIsoCode\" ='INR' then 1\n\t\t\twhen \"CurrencyIsoCode\"  = 'USD' THEN \"USD.to.INR\"\n\t\t\twhen \"CurrencyIsoCode\"  = 'AUD' THEN \"AUD.to.INR\"\n\t\t\twhen \"CurrencyIsoCode\"  = 'GBP' THEN \"GBP.to.INR\"\n\t\t\twhen \"CurrencyIsoCode\"  = 'EUR' THEN \"EUR.to.INR\"\n\t\t\twhen \"CurrencyIsoCode\"  = 'CAD' THEN \"CAD.to.INR\"\n\t\tEND as \"to_inr\",\n\t\tcase when \"deductionsCurrency\" = 'USD' THEN 1\n\t\t\twhen \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\twhen \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\twhen \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\twhen \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\twhen \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\"\n\t\tend as \"deductionsCurrency_to_USD\", --null\n\t\t/* added as part of order details onboarding on 20211207 */\n\t\tNULL as \"CourseName\",\n\t\tNULL as  \"Parent_orderNumber\",\n\t\tNULL as \"MRP_USD\",\n\t\tNULL as \"parent_collection_USD\",\n\t\tnull as \"discount_Amount_USD\",\n\t\tnull as \"discount_Amount_INR\",\n\t\tNULL as \"discount_percentage\",\n\t\t/* end of order details onboarding on 20211207 */\n\t\textract(year from to_date(\"Month\")) as \"yr\",\n\t\textract(month from to_date(\"Month\")) as \"month\",\n\t\t\"payment_date\" as \"first_payment_date\",\n\t\t\"Order_Number__c\" as \"first_order_number\",\n\t\tNULL as \"first_reconciliation_id\",\n\t\t\"payment_date\" as \"latest_payment_date\",\n\t\t\"Order_Number__c\" as \"latest_order_number\",\n\t\tNULL as \"latest_reconciliation_id\",\n\t\t1 as \"main_course_bought\",\n\t\t\"payment_received\" as \"collection_amount\", -- payment received\n\t\t\"payment_received\" as \"collection_minus_GST\",  -- payment received\n\t\t\"payment_received\" as \"collection_minus_GST_and_TDR_subvention_costs\",  -- payment received\n\t\tNULL as \"Affiliate_payment_cost\",\n\t\tNULL as \"FinanceCharges_cost\",\n\t\tNULL as \"SalesCharges_cost\",\n\t\tNULL as \"MarketingCharges_cost\",\n\t\tNULL as \"Voucher_cost\",\n\t\tNULL as \"Instructor_cost\",\n\t\tNULL as \"TeachingAssistants_cost\",\n\t\tNULL as \"Platform_cost\",\n\t\t\"payment_received\" as \"Revenue_for_payout_calculation\",  -- payment received\n\t\t\"Payout per order\" as \"order_payout\",\n\t\t\"Final_payout\",\n\t\t1 as \"latest_order_row\",\n\t\tNULL as \"Email_wise_payout\",\n\t\tNULL as \"refund_flag\",\n\t\t'Complete order' as \"Order_tag\",\n\t\tnull \"number of participants\",\n\t\t\"Account_Name_Text__c\" as \"account name\",\n\t\t\"USD.to.INR\", \n\t\tnull as \"cohort_name\",\n\t\tNULL as \"serviceTax_INR\",\n\t\tNULL as \"order_selling_price_USD\",\n\t\tNULL as \"collection_minus_GST_INR\",\n\t\tNULL as \"order_selling_price_INR\",\n\t\tNULL as \"POS_subvention_excluded_USD\", \n\t\tNULL as \"POS_subvention_excluded_INR\",\n\t\tNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\tNULL as \"Revenue_for_payout_calculation_INR\",\n\t\tNULL as \"order_payout_INR\",\n\t\tNULL as \"final_payout_INR\",\n\t\t\"Payout on Delivered Milstone\",\n\t\t\"cumulative_payout\",\n\t\t\"remainder_payout\"\n\t\t,NULL \"order_payout_to_SL\"\n\t\t,NULL \"final_payout_to_SL\"\n\t\t,NULL \"order_payout_to_SL_INR\"\n\t\t,NULL \"final_payout_to_SL_INR\"\n\t\t,NULL \"loan_disbursed_amount\"\n\t\t,NULL \"first_lvc_attended_date\"\n\t\t,NULL At_least_1_LVC_attended\n\t\t,NULL \"old_latest_payment_date\"\n\t\t,NULL \"Revised_Logic_Applicable_Flag\"\t\n      \t,NULL \"mapped_reconciliation_id\" -- Added on 20240305 :SP\t\n\t\t,NULL \"Program Type\" -- Added on 20240305 :SP\t\n   \t,NULL \"enrollment_rn\"\n\n\tfrom\n\t(\n\t\tselect * from  ${ev_default_db_name}.\"LRS_ANALYTICS\".\"target_b2b_order\" main\n\t\t\n\t\tinner join ${ev_default_db_name}.\"PRODCT_TEMP\".\"b2b_payout_milestone\"  mile\n\t\ton main.\"OrderNumber\"=mile.\"Order_Number__c\"\n\t\t\n\t\tleft join \n\t\t(\n\t\t\tselect *, TO_CHAR(date(\"Month\"),'YYYYMM') \"YYYYMM\"\n\t\t\t--extract(year from to_date(\"Month\")) as \"yr\", extract(month from to_date(\"Month\")) as \"month\"\n\t\t\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n\t\t)inr_conv\n\t\ton mile.\"milestone_mmyy\" = inr_conv.\"YYYYMM\"\n\t\t\n\t\twhere \"milestone_mmyy\">202206\n\t\t--where \"OrderNumber\"=00061806\n\t)\n  )\n)\n \n \n--------------------------------------------------------\n------------- B2C only KPMG payout data ----------------\n--------------------------------------------------------\nunion all\n(\nselect \n\t\"Email\",\n\t\"order_type\",\n\t\"paymentDate\", \n\t\"reconciliation_id\",\n\t\"ReconcileOption\",\n\t\"orderNumber\",\n\t\"refundedOrderNumber\",\n\t\"currency\",\n\t\"paymentCourse\",\n\t\"Program Name\",\n\t\"paymentGeo\",\n\t\"paymentCountry\",\n\t\"paymentTrainingType\",\n\t\"paymentQueryType\",\n\t\"paymentCategory\",\n\t\"paymentGateway\",\n\t\"RefundReconciliation_id\",\n\t\"refundUnit\",\n\t\"partialRefundAmount\",\n\t\"ndate\",\n\t\"EMITerm\",\n\t\"fee\",\n\t\"applicableOnwards\",\n\t\"emi_subvention_rate\",\n\t\"TDR\",\n\t\"POS_subvention_excluded\",\n\t\"POS_order_selling_price\",\n\t\"GST\",\n\t\"selling_price\",\n\t\"University_flag\",\n\t\"deductionsCurrency\",\n\t\"affiliatePaymentCosts\",\n\t\"minPayout\",\n\t\"payoutPercentage\",\n\t\"minASP\",\n\t\"maxASP\",\n\t\"financeCharges\",\n\t\"SalesCharges\",\n\t\"marketingCharges\",\n\t\"voucherCosts\",\n\t\"instructorCosts\",\n\t\"teachingAssistantsCosts\",\n\t\"platformCosts\",\n\t\"serviceTax\",\n\t\"main_course_cd\",\n\t\"prep_course_cd\",\n\t\"conv_to_USD\",\n\t\"to_inr\",\n\t\"deductionsCurrency_to_USD\",\n\t\"CourseName\",\n\t\"Parent_orderNumber\",\n\t\"MRP_USD\",\n\t\"parent_collection_USD\",\n\t\"discount_Amount_USD\",\n\t\"discount_Amount_INR\",\n\t\"discount_percentage\",\n\t\"yr\",\n\t\"month\",\n\t\"first_payment_date\",\n\t\"first_order_number\",\n\t\"first_reconciliation_id\",\n\t\"latest_payment_date\",\n\t\"latest_order_number\",\n\t\"latest_reconciliation_id\",\n\t\"main_course_bought\",\n\t\"collection_amount\",\n\t\"collection_minus_GST\",\n\t\"collection_minus_GST_and_TDR_subvention_costs\",\n\t\"Affiliate_payment_cost\",\n\t\"FinanceCharges_cost\",\n\t\"SalesCharges_cost\",\n\t\"MarketingCharges_cost\",\n\t\"Voucher_cost\",\n\t\"Instructor_cost\",\n\t\"TeachingAssistants_cost\",\n\t\"Platform_cost\",\n\t\"Revenue_for_payout_calculation\",\n\t\"order_payout\",\n\t\"final_payout\",\n\t\"latest_order_row\",\n\t\"Email_wise_payout\",\n\t\"refund_flag\",\n\t\"Order_tag\",\n\tNULL \"number of participants\",\n\t\"account name\",\n\t\"USD.to.INR\",\n\t\"cohort_name\",\n\t\"serviceTax_INR\",\n\t\"order_selling_price_USD\",\n\t\"collection_minus_GST_INR\",\n\t\"order_selling_price_INR\",\n\t\"POS_subvention_excluded_USD\",\n\t\"POS_subvention_excluded_INR\",\n\t\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\"Revenue_for_payout_calculation_INR\",\n\t\"order_payout_INR\",\n\t\"final_payout_INR\",\n\t\"Payout on Delivered Milstone\",\n\t\"cumulative_payout\",\n\t\"remainder_payout\"\n\t,NULL \"order_payout_to_SL\"\n\t,NULL \"final_payout_to_SL\"\n\t,NULL \"order_payout_to_SL_INR\"\n\t,NULL \"final_payout_to_SL_INR\"\n\t,NULL \"loan_disbursed_amount\"\n\t,NULL \"first_lvc_attended_date\"\n\t,NULL At_least_1_LVC_attended\n\t,NULL \"old_latest_payment_date\"\n\t,NULL \"Revised_Logic_Applicable_Flag\"\n    ,NULL \"mapped_reconciliation_id\" -- Added on 20240305 :SP\t\n    ,NULL \"Program Type\" -- Added on 20240305 :SP\t\n     \t,NULL \"enrollment_rn\"\n\nfrom ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_30JUN2022_KPMG\"\n)\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591205":{"id":2591205,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1136,"y":288,"width":32,"height":32,"inputConnectorIDs":[2591218,2591231],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2591267],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or_"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591206":{"id":2591206,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":384,"y":48,"width":32,"height":32,"inputConnectorIDs":[2591229],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of university_payout_table_30JUN2022_KPMG"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table  ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_30JUN2022_KPMG\" \nas \nselect \n\"Email\",\n\"order_type\",\ncase when \"paymentDate\" like '%-%-%' then\n\t\tto_timestamp(substr(\"paymentDate\",1,10),'DD-MM-YYYY') \n\twhen \"paymentDate\" like '%/%/%' then \n    \tto_timestamp(split_part(\"paymentDate\",' ',1),'MM/DD/YY') end\nas \"paymentDate\", \n\"reconciliation_id\",\n\"ReconcileOption\",\n\"orderNumber\",\n\"refundedOrderNumber\",\n\"currency\",\n\"paymentCourse\",\n\"Program Name\",\n\"paymentGeo\",\n\"paymentCountry\",\n\"paymentTrainingType\",\n\"paymentQueryType\",\n\"paymentCategory\",\n\"paymentGateway\",\n\"RefundReconciliation_id\",\n\"refundUnit\",\n\"partialRefundAmount\",\n\"ndate\",\n\"EMITerm\",\n\"fee\",\n\"applicableOnwards\",\n\"emi_subvention_rate\",\n\"TDR\",\n\"POS_subvention_excluded\",\n\"POS_order_selling_price\",\n\"GST\",\n\"selling_price\",\n\"University_flag\",\n\"deductionsCurrency\",\n\"affiliatePaymentCosts\",\n\"minPayout\",\n\"payoutPercentage\",\n\"minASP\",\n\"maxASP\",\n\"financeCharges\",\n\"SalesCharges\",\n\"marketingCharges\",\n\"voucherCosts\",\n\"instructorCosts\",\n\"teachingAssistantsCosts\",\n\"platformCosts\",\n\"serviceTax\",\n\"main_course_cd\",\n\"prep_course_cd\",\n\"conv_to_USD\",\n\"to_inr\",\n\"deductionsCurrency_to_USD\",\n\"CourseName\",\n\"Parent_orderNumber\",\n\"MRP_USD\",\n\"parent_collection_USD\",\n\"discount_Amount_USD\",\n\"discount_Amount_INR\",\n\"discount_percentage\",\n\"yr\",\n\"month\",\n\"first_payment_date\",\n\"first_order_number\",\n\"first_reconciliation_id\",\n\"latest_payment_date\",\n\"latest_order_number\",\n\"latest_reconciliation_id\",\n\"main_course_bought\",\n\"collection_amount\",\n\"collection_minus_GST\",\n\"collection_minus_GST_and_TDR_subvention_costs\",\n\"Affiliate_payment_cost\",\n\"FinanceCharges_cost\",\n\"SalesCharges_cost\",\n\"MarketingCharges_cost\",\n\"Voucher_cost\",\n\"Instructor_cost\",\n\"TeachingAssistants_cost\",\n\"Platform_cost\",\n\"Revenue_for_payout_calculation\",\n\"order_payout\",\n\"final_payout\",\n\"latest_order_row\",\n\"Email_wise_payout\",\n\"refund_flag\",\n\"Order_tag\",\n\"number of participants\",\n\"account name\",\n\"USD.to.INR\",\n\"cohort_name\",\n\"serviceTax_INR\",\n\"order_selling_price_USD\",\n\"collection_minus_GST_INR\",\n\"order_selling_price_INR\",\n\"POS_subvention_excluded_USD\",\n\"POS_subvention_excluded_INR\",\n\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\"Revenue_for_payout_calculation_INR\",\n\"order_payout_INR\",\n\"final_payout_INR\",\n\"Payout on Delivered Milstone\",\n\"cumulative_payout\",\n\"remainder_payout\"\nfrom ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_30JUN2022_KPMG_stg\" ;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591207":{"id":2591207,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":928,"y":288,"width":32,"height":32,"inputConnectorIDs":[2591217],"outputSuccessConnectorIDs":[2591231],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"university_payout_table_with_b2b_final_new_logic"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_stg\" \nas      \n\nselect * from \n(\n  \n  \t-------------------------------------------------------------------------------\n    ---------------------- B2C current months payout data -------------------------\n    -------------------------------------------------------------------------------\n\t(\n\tselect * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_temp\"\n      where substr(\"latest_payment_date\",1,7) \n\t\t\t> ( select max(substr(\"latest_payment_date\",1,7)) \n\t\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\")\n    )\n  \t\n  \tunion all\n\t\n  \t-------------------------------------------------------------------------------\n    ------------- B2B data for last month as previous data is Freezed -------------\n    -------------------------------------------------------------------------------\n\n\tselect * from \n\t(\n\tselect \n\t\tNULL as \"Email\",\n\t\t'Order' as \"order_type\",\n\t\t\"payment_date\" as \"paymentDate\",\n\t\tNULL as \"reconciliation_id\",\n\t\tNULL as \"ReconcileOption\",\n\t\t\"Order_Number__c\" as \"orderNumber\",\n\t\tNULL as \"refundedOrderNumber\",\n\t\t\"CurrencyIsoCode\"  as \"currency\",\n\t\t\"programName\" as \"paymentCourse\",\n\t\t\"programName\" as \"Program Name\",\n\t\t\"geo\" as \"paymentGeo\",\n\t\tCOALESCE(\"ShippingCountry\",\"BillingCountry\",\"Invoice_Billing_Country__c\") as \"paymentCountry\",\n\t\tNULL as \"paymentTrainingType\",\n\t\t'B2B' as \"paymentQueryType\",\n\t\tNULL as \"paymentCategory\",\n\t\tNULL as \"paymentGateway\",\n\t\tNULL as \"RefundReconciliation_id\",\n\t\tNULL as \"refundUnit\",\n\t\tNULL as \"partialRefundAmount\",\n\t\t\"payment_date\" as \"ndate\",\n\t\tNULL as \"EMITerm\",\n\t\tNULL as \"fee\",\n\t\tNULL as \"applicableOnwards\",\n\t\tNULL as \"emi_subvention_rate\",\n\t\tNULL as \"TDR\",\n\t\tNULL as \"POS_subvention_excluded\",\n\t\tNULL as \"POS_order_selling_price\",\n\t\tNULL as \"GST\",\n\t\tNULL as \"selling_price\",\n\t\t\"universityFlag\" \"University_flag\",\n\t\t\"deductionsCurrency\", --from payout table\n\t\t\"affiliatePaymentCosts\", --payout table\n\t\t\"minPayout\", --payout table\n\t\t\"payoutPercentage\",\n\t\t\"minASP\", --payout\n\t\t\"maxASP\", --payout\n\t\t\"financeCharges\", --payout\n\t\t\"SalesCharges\", --payout\n\t\t\"marketingCharges\", --payout\n\t\t\"voucherCosts\", --payout\n\t\t\"instructorCosts\", --payout\n\t\t\"teachingAssistantsCosts\", --payout\n\t\t\"platformCosts\", --payout\n\t\tNULL as \"serviceTax\",\n\t\t1 as \"main_course_cd\",\n\t\tNULL as \"prep_course_cd\",\n\t\t\"conv_to_USD\",\n\t\tcase when \"CurrencyIsoCode\" ='INR' then 1\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'USD' THEN \"USD.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'AUD' THEN \"AUD.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'GBP' THEN \"GBP.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'EUR' THEN \"EUR.to.INR\"\n\t\t\t\t\t\t\t  when \"CurrencyIsoCode\"  = 'CAD' THEN \"CAD.to.INR\"\n\t\t\t\tEND as \"to_inr\",\n\t\tcase when \"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t\t\t\t   when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\"\n\t\t\t\tend as \"deductionsCurrency_to_USD\", --null\n\t\t--/* added as part of order details onboarding on 20211207 */\n\t\tNULL as \"CourseName\",\n\t\tNULL as  \"Parent_orderNumber\",\n\t\tNULL as \"MRP_USD\",\n\t\tNULL as \"parent_collection_USD\",\n\t\tnull as \"discount_Amount_USD\",\n\t\tnull as \"discount_Amount_INR\",\n\t\tNULL as \"discount_percentage\",\n\t\t--/* end of order details onboarding on 20211207 */\n\t\textract(year from to_date(\"Month\")) as \"yr\",\n\t\textract(month from to_date(\"Month\")) as \"month\",\n\t\t\"payment_date\" as \"first_payment_date\",\n\t\t\"Order_Number__c\" as \"first_order_number\",\n\t\tNULL as \"first_reconciliation_id\",\n\t\t\"payment_date\" as \"latest_payment_date\",\n\t\t\"Order_Number__c\" as \"latest_order_number\",\n\t\tNULL as \"latest_reconciliation_id\",\n\t\t1 as \"main_course_bought\",\n\t\t\"payment_received\" as \"collection_amount\", -- payment received\n\t\t\"payment_received\" as \"collection_minus_GST\",  -- payment received\n\t\t\"payment_received\" as \"collection_minus_GST_and_TDR_subvention_costs\",  -- payment received\n\t\tNULL as \"Affiliate_payment_cost\",\n\t\tNULL as \"FinanceCharges_cost\",\n\t\tNULL as \"SalesCharges_cost\",\n\t\tNULL as \"MarketingCharges_cost\",\n\t\tNULL as \"Voucher_cost\",\n\t\tNULL as \"Instructor_cost\",\n\t\tNULL as \"TeachingAssistants_cost\",\n\t\tNULL as \"Platform_cost\",\n\t\t\"payment_received\" as \"Revenue_for_payout_calculation\",  -- payment received\n\t\t\"Payout per order\" as \"order_payout\",\n\t\t\"Final_payout\",\n\t\t1 as \"latest_order_row\",\n\t\tNULL as \"Email_wise_payout\",\n\t\tNULL as \"refund_flag\",\n\t\t'Complete order' as \"Order_tag\",\n\t\tnull \"number of participants\",\n\t\t\"Account_Name_Text__c\" as \"account name\",\n\t\t\"USD.to.INR\", \n\t\tnull as \"cohort_name\",\n\t\tNULL as \"serviceTax_INR\",\n\t\tNULL as \"order_selling_price_USD\",\n\t\tNULL as \"collection_minus_GST_INR\",\n\t\tNULL as \"order_selling_price_INR\",\n\t\tNULL as \"POS_subvention_excluded_USD\", \n\t\tNULL as \"POS_subvention_excluded_INR\",\n\t\tNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\tNULL as \"Revenue_for_payout_calculation_INR\",\n\t\tNULL as \"order_payout_INR\",\n\t\tNULL as \"final_payout_INR\",\n\t\t\"Payout on Delivered Milstone\",\n\t\t\"cumulative_payout\",\n\t\t\"remainder_payout\"\n\t\t  \n\t\t,NULL \"order_payout_to_SL\"\n\t\t,NULL \"final_payout_to_SL\"\n\t\t,NULL \"order_payout_to_SL_INR\"\n\t\t,NULL \"final_payout_to_SL_INR\"\n\t\t,NULL \"loan_disbursed_amount\"\n\t\t,NULL \"first_lvc_attended_date\"\n\t\t,NULL At_least_1_LVC_attended\n\t\t,NULL \"old_latest_payment_date\"\n\t\t,NULL \"Revised_Logic_Applicable_Flag\"\n      \t,NULL \"mapped_reconciliation_id\" -- Added on 20240305 :SP\t\n\t\t,NULL \"Program Type\" -- Added on 20240305 :SP\t\n        , NULL \"enrollment_rn\"\n\tfrom\n\t\t(\n\t\t\tselect * from  ${ev_default_db_name}.\"LRS_ANALYTICS\".\"target_b2b_order\" main\n\t\t\t\n\t\t\tinner join ${ev_default_db_name}.\"PRODCT_TEMP\".\"b2b_payout_milestone\"  mile\n\t\t\ton main.\"OrderNumber\"=mile.\"Order_Number__c\"\n\t\t\t\n\t\t\tleft join \n\t\t\t(\n\t\t\t\tselect *, TO_CHAR(date(\"Month\"),'YYYYMM') \"YYYYMM\"--extract(year from to_date(\"Month\")) as \"yr\", extract(month from to_date(\"Month\")) as \"month\"\n\t\t\t\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n\t\t\t)inr_conv\n\t\t\ton mile.\"milestone_mmyy\" = inr_conv.\"YYYYMM\"\n\t\t\twhere \"milestone_mmyy\">\n\t\t\t\t\t\t\t(select max(replace(substr(\"latest_payment_date\",1,7),'-','')) \n\t\t\t\t\t\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\")\n\t\t)\n\n\t)\n  \n  \n  \tunion all\n\t\n  \t-------------------------------------------------------------------------------\n    --------------- Freezed table(B2B+B2C) data till 20240301 ---------------------\n    -------------------------------------------------------------------------------\n\t(\n\tselect * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n      where (\"order_type\" <> 'RefundUPG' and \"latest_payment_date\" < '2024-03-01' and \"University_flag\" not ilike '%ihub%') \n      \t\tor \"latest_payment_date\" between '2024-03-01' and '2024-03-31'\n\tqualify case when \"order_type\" not in ('Refund','Chargeback','RefundUPG') and \"Email\" is not null\n\t\t\t\tthen row_number() over (partition by \"Email\",\"Program Name\",\"order_type\",\"University_flag\" order by \"latest_payment_date\" desc,\"ndate\" desc) end = 1 \n\tor \t\tcase when \"order_type\" in ('Refund','Chargeback','RefundUPG')\n\t\t\t\tthen row_number() over (partition by \"Email\",\"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc,\"ndate\" desc) end = 1 \n    or\t\tcase when \"Email\" is null\n\t\t\t\tthen row_number() over (partition by \"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc,\"ndate\" desc) end = 1 \n\t)\n   \t  \n  \t\n  \t-------------------------------------------------------------------------------\n    --------- Freezed table(B2B+B2C) data till last month since 20240301 ----------\n    -------------------------------------------------------------------------------\n  \tunion all\n  \t(\n\tselect * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n      where \"latest_payment_date\">='2024-04-01' or \"University_flag\" ilike  '%ihub%'\n    )\n\t\n\n)\n\n--qualify row_number() over (partition by \"Email\",\"Program Name\",\"order_type\",\"University_flag\" order by \"latest_payment_date\" desc)=1\n/*qualify case when \"order_type\" not in ('Refund','Chargeback','RefundUPG') and \"Email\" is not null\n\t\t\t\tthen row_number() over (partition by \"Email\",\"Program Name\",\"order_type\",\"University_flag\" order by \"latest_payment_date\" desc) end = 1 \nor \t\tcase when \"order_type\" in ('Refund','Chargeback','RefundUPG')\n\t\t\t\tthen row_number() over (partition by \"Email\",\"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc) end = 1 \nor\t\tcase when \"Email\" is null\n\t\t\t\tthen row_number() over (partition by \"orderNumber\",\"Program Name\",\"University_flag\" order by \"latest_payment_date\" desc) end = 1 \n*/\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591209":{"id":2591209,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":672,"y":400,"width":32,"height":32,"inputConnectorIDs":[2591225],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[2591199],"outputFalseConnectorIDs":[2591270],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if_check for_freezing_last_months_date"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${dt.now().format(\"dd\")}"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"01"}}}},"visible":false},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt.now().format(\"dd\") == 5"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591210":{"id":2591210,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-48,"y":400,"width":32,"height":32,"inputConnectorIDs":[2591228],"outputSuccessConnectorIDs":[2591334],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"university_payout_table_final_main"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" as\n\nselect distinct *,\nsum(\"final_payout\") over (partition by \"Email\", \"University_flag\",\"Program Name\") as \"Email_wise_payout\",\nmax(case when \"order_type\" like any ('Refund','Chargeback') then 1 else null end) over (partition by \"Email\",\"University_flag\") as \"refund_flag\"\n\nfrom (\n( \n  -----------------------------------------------------------\n  ---------------- Orders Module ----------------------------\n  -----------------------------------------------------------\n  select \n\t\"Email\",\n\t\"order_type\",\n\t\"paymentDate\",\n\t\"reconciliation_id\",\n  \t\"mapped_reconciliation_id\", -- Added on 20240305 :SP\t\n  \t\"ReconcileOption\",\n\t\"orderNumber\",\n\t\"refundedOrderNumber\",\n\t\"currency\",\n\t\"paymentCourse\",\n\t\"Program Name\",\n  \t\"Program Type\", -- Added on 20240305\n  \t\"paymentGeo\",\n\t\"paymentCountry\",\n\t\"paymentTrainingType\",\n\t\"paymentQueryType\",\n\t\"paymentCategory\",\n\t\"paymentGateway\",\n\t\"RefundReconciliation_id\",\n\t\"refundUnit\",\n\t\"partialRefundAmount\",\n\t\"ndate\",\n\t\"EMITerm\",\n\t\"fee\",\n\t\"applicableOnwards\",\n\t\"emi_subvention_rate\",\n\t\"TDR\",\n\t\"POS_subvention_excluded\",\n\t\"loan_disbursed_amount\",\n\t\"POS_order_selling_price\",\n\t\"GST\",\n\t\"selling_price\",\n\t\"University_flag\",\n\t\"deductionsCurrency\",\n\t\"affiliatePaymentCosts\",\n\t\"minPayout\",\n\t\"payoutPercentage\",\n\t\"minASP\",\n\t\"maxASP\",\n\t\"financeCharges\",\n\t\"SalesCharges\",\n\t\"marketingCharges\",\n\t\"voucherCosts\",\n\t\"instructorCosts\",\n\t\"teachingAssistantsCosts\",\n\t\"platformCosts\",\n\t\"serviceTax\",\n\t\"main_course_cd\",\n\t\"prep_course_cd\",\n\t\"conv_to_USD\",\n\t\"to_inr\",\n\t\"deductionsCurrency_to_USD\",\n\t\"CourseName\",\n\t\"Parent_orderNumber\",\n\t\"MRP_USD\",\n\t\"parent_collection_USD\",\n\t\"discount_Amount_USD\",\n\t\"discount_Amount_INR\",\n\t\"discount_percentage\",\n\t\"cohort_name\",\n\t\"yr\",\n\t\"month\",\n\t\"first_payment_date\",\n\t\"first_order_number\",\n\t\"first_reconciliation_id\",\n\t\"latest_payment_date\",\n\t\"latest_order_number\",\n\t\"latest_reconciliation_id\",\n\t\"main_course_bought\",\n\t\"collection_amount\",\n\t\"collection_minus_GST\",\n\t\"collection_minus_GST_and_TDR_subvention_costs\",\n\t\"Affiliate_payment_cost\",\n\t\"FinanceCharges_cost\",\n\t\"SalesCharges_cost\",\n\t\"MarketingCharges_cost\",\n\t\"Voucher_cost\",\n\t\"Instructor_cost\",\n\t\"TeachingAssistants_cost\",\n\t\"Platform_cost\",\n\t\"Revenue_for_payout_calculation\",\n\t\"order_payout\",\n\t\"final_pay\" as \"final_payout\",\n\t\"latest_order_row\",\n\t\"Order_tag\",\n\t\"serviceTax_INR\",\n\t\"order_selling_price_USD\",\n\t\"order_selling_price_INR\",\n\t\"collection_minus_GST_INR\",\n\t\"POS_subvention_excluded_USD\",\n\t\"POS_subvention_excluded_INR\",\n\t\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\"Revenue_for_payout_calculation_INR\",\n\t\"order_payout_INR\",\n\t\"final_pay_INR\" as \"final_payout_INR\" \n\n\t,\"order_payout_to_SL\"\n\t,\"final_pay_to_SL\" \"final_payout_to_SL\"\n\t,\"order_payout_to_SL_INR\"\n\t,\"final_pay_to_SL_INR\" \"final_payout_to_SL_INR\"\n\t,\"first_lvc_attended_date\"\n\t,At_least_1_LVC_attended\n\t,\"old_latest_payment_date\"\n\t,\"Revised_Logic_Applicable_Flag\"\n\n  \t,\"enrollment_rn\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\"\n)\n\nunion all\n\n( \n  -----------------------------------------------------------\n  ----------- Refunds >= '2022-07-01' -----------------------\n  -----------------------------------------------------------\nselect \n\t\"Email\",\n\t\"order_type\",\n\t\"paymentDate\",\n\t\"reconciliation_id\",\n  \t\"mapped_reconciliation_id\", -- Added on 20240305 :SP\t\n\t\"ReconcileOption\",\n\t\"orderNumber\",\n\t\"refundedOrderNumber\",\n\t\"currency\",\n\t\"paymentCourse\",\n\t\"Program Name\",\n  \t\"Program Type\", -- Added on 20240305\n\t\"paymentGeo\",\n\t\"paymentCountry\",\n\t\"paymentTrainingType\",\n\t\"paymentQueryType\",\n\t\"paymentCategory\",\n\t\"paymentGateway\",\n\t\"RefundReconciliation_id\",\n\t\"refundUnit\",\n\t\"partialRefundAmount\",\n\t\"ndate\",\n\t\"EMITerm\",\n\t\"fee\",\n\t\"applicableOnwards\",\n\t\"emi_subvention_rate\",\n\t\"TDR\",\n\t\"POS_subvention_excluded\",\n\tNULL \"loan_disbursed_amount\",\n\t\"POS_order_selling_price\",\n\t\"GST\",\n\t\"selling_price\",\n\t\"University_flag\",\n\t\"deductionsCurrency\",\n\t\"affiliatePaymentCosts\",\n\t\"minPayout\",\n\t\"payoutPercentage\",\n\t\"minASP\",\n\t\"maxASP\",\n\t\"financeCharges\",\n\t\"SalesCharges\",\n\t\"marketingCharges\",\n\t\"voucherCosts\",\n\t\"instructorCosts\",\n\t\"teachingAssistantsCosts\",\n\t\"platformCosts\",\n\t\"serviceTax\",\n\t\"main_course_cd\",\n\t\"prep_course_cd\",\n\t\"conv_to_USD\",\n\t\"to_inr\",\n\t\"deductionsCurrency_to_USD\",\n\t\"CourseName\",\n\t\"Parent_orderNumber\",\n\t\"MRP_USD\",\n\t\"parent_collection_USD\",\n\t\"discount_Amount_USD\",\n\t\"discount_Amount_INR\",\n\t\"discount_percentage\",\n\t\"cohort_name\",\n\t\"yr\",\n\t\"month\",\n\t\"first_payment_date\",\n\t\"first_order_number\",\n\t\"first_reconciliation_id\",\n\t\"latest_payment_date\",\n\t\"latest_order_number\",\n\t\"latest_reconciliation_id\",\n\t\"main_course_bought\",\n\t\"collection_amount\",\n\t\"collection_minus_GST\",\n\t\"collection_minus_GST_and_TDR_subvention_costs\",\n\t\"Affiliate_payment_cost\",\n\t\"FinanceCharges_cost\",\n\t\"SalesCharges_cost\",\n\t\"MarketingCharges_cost\",\n\t\"Voucher_cost\",\n\t\"Instructor_cost\",\n\t\"TeachingAssistants_cost\",\n\t\"Platform_cost\",\n\t\"Revenue_for_payout_calculation\",\n\t\"order_payout\",\n\t\"final_pay\" as \"final_payout\",\n\t\"latest_order_row\",\n\t\"Order_tag\",\n\t\"serviceTax_INR\",\n\t\"order_selling_price_USD\",\n\t\"order_selling_price_INR\",\n\t\"collection_minus_GST_INR\",\n\t\"POS_subvention_excluded_USD\",\n\t\"POS_subvention_excluded_INR\",\n\t\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\"Revenue_for_payout_calculation_INR\",\n\t\"order_payout_INR\",\n\t\"final_pay_INR\" as \"final_payout_INR\" \n\n\t,\"order_payout_to_SL\"\n\t,\"final_pay_to_SL\"\n\t,\"order_payout_to_SL_INR\"\n\t,\"final_pay_to_SL_INR\"\n\t,\"first_lvc_attended_date\"\n\t,At_least_1_LVC_attended\n\t,NULL \"old_latest_payment_date\"\n\t,\"Revised_Logic_Applicable_Flag\"\n\n   \t,NULL \"enrollment_rn\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_refunds\" \nwhere \"ndate\" >= '2022-07-01'\n)\n\nunion all\n\n( \n  -----------------------------------------------------------\n  ----------- Extensions < '2023-12-01' ---------------------\n  -----------------------------------------------------------\nselect \n\t\"Email\",\n\t\"order_type\",\n\t\"paymentDate\",\n\t\"reconciliation_id\",\n  \tNULL \"mapped_reconciliation_id\", -- Added on 20240305 :SP\t\n\t\"ReconcileOption\",\n\t\"orderNumber\",\n\t\"refundedOrderNumber\",\n\t\"currency\",\n\t\"paymentCourse\",\n\t\"Program Name\",\n  \tNULL \"Program Type\", -- Added on 20240305\n\t\"paymentGeo\",\n\t\"paymentCountry\",\n\t\"paymentTrainingType\",\n\t\"paymentQueryType\",\n\t\"paymentCategory\",\n\t\"paymentGateway\",\n\t\"RefundReconciliation_id\",\n\t\"refundUnit\",\n\t\"partialRefundAmount\",\n\t\"ndate\",\n\t\"EMITerm\",\n\t\"fee\",\n\t\"applicableOnwards\",\n\t\"emi_subvention_rate\",\n\t\"TDR\",\n\t\"POS_subvention_excluded\",\n\t\"loan_disbursed_amount\",\n\t\"POS_order_selling_price\",\n\t\"GST\",\n\t\"selling_price\",\n\t\"University_flag\",\n\t\"deductionsCurrency\",\n\t\"affiliatePaymentCosts\",\n\t\"minPayout\",\n\t\"payoutPercentage\",\n\t\"minASP\",\n\t\"maxASP\",\n\t\"financeCharges\",\n\t\"SalesCharges\",\n\t\"marketingCharges\",\n\t\"voucherCosts\",\n\t\"instructorCosts\",\n\t\"teachingAssistantsCosts\",\n\t\"platformCosts\",\n\t\"serviceTax\",\n\t\"main_course_cd\",\n\t\"prep_course_cd\",\n\t\"conv_to_USD\",\n\t\"to_inr\",\n\t\"deductionsCurrency_to_USD\",\n\t\"CourseName\",\n\t\"Parent_orderNumber\",\n\t\"MRP_USD\",\n\t\"parent_collection_USD\",\n\t\"discount_Amount_USD\",\n\t\"discount_Amount_INR\",\n\t\"discount_percentage\",\n\t\"cohort_name\",\n\t\"yr\",\n\t\"month\",\n\t\"first_payment_date\",\n\t\"first_order_number\",\n\t\"first_reconciliation_id\",\n\t\"latest_payment_date\",\n\t\"latest_order_number\",\n\t\"latest_reconciliation_id\",\n\t\"main_course_bought\",\n\t\"collection_amount\",\n\t\"collection_minus_GST\",\n\t\"collection_minus_GST_and_TDR_subvention_costs\",\n\t\"Affiliate_payment_cost\",\n\t\"FinanceCharges_cost\",\n\t\"SalesCharges_cost\",\n\t\"MarketingCharges_cost\",\n\t\"Voucher_cost\",\n\t\"Instructor_cost\",\n\t\"TeachingAssistants_cost\",\n\t\"Platform_cost\",\n\t\"Revenue_for_payout_calculation\",\n\t\"order_payout\",\n\t\"final_pay\",\n\t\"latest_order_row\",\n\t\"Order_tag\",\n\t\"serviceTax_INR\",\n\t\"order_selling_price_USD\",\n\t\"order_selling_price_INR\",\n\t\"collection_minus_GST_INR\",\n\t\"POS_subvention_excluded_USD\",\n\t\"POS_subvention_excluded_INR\",\n\t\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\"Revenue_for_payout_calculation_INR\",\n\t\"order_payout_INR\",\n\t\"final_pay_INR\" \n\n\t,\"order_payout_to_SL\"\n\t,\"final_pay_to_SL\"\n\t,\"order_payout_to_SL_INR\"\n\t,\"final_pay_to_SL_INR\"\n\t,NULL \"first_lvc_attended_date\"\n\t,NULL At_least_1_LVC_attended\n\t,NULL \"old_latest_payment_date\"\n\t,NULL \"Revised_Logic_Applicable_Flag\"\n\n  \t,NULL \"enrollment_rn\"\n\t\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_ext\"\nwhere \"ndate\" < '2023-12-01'\n)\n\nunion all\n\n----------------------------------------------------------------------------------------------------------------------\n-- university_payout_table_30JUN2022 where University_flag not in (IU,IIITB) and abs(final_payout)>0 -----------------\n----------------------------------------------------------------------------------------------------------------------\n(  \nselect  \n\t\"Email\",\n\t\"order_type\",\n\t\"paymentDate\",\n\t\"reconciliation_id\",\n  \tNULL \"mapped_reconciliation_id\", -- Added on 20240305 :SP\t\n\t\"ReconcileOption\",\n\t\"orderNumber\",\n\t\"refundedOrderNumber\",\n\t\"currency\",\n\t\"paymentCourse\",\n\t\"Program Name\",\n  \tNULL \"Program Type\", -- Added on 20240305\n\t\"paymentGeo\",\n\t\"paymentCountry\",\n\t\"paymentTrainingType\",\n\t\"paymentQueryType\",\n\t\"paymentCategory\",\n\t\"paymentGateway\",\n\t\"RefundReconciliation_id\",\n\t\"refundUnit\",\n\t\"partialRefundAmount\",\n\t\"ndate\",\n\t\"EMITerm\",\n\t\"fee\",\n\t\"applicableOnwards\",\n\t\"emi_subvention_rate\",\n\t\"TDR\",\n\t\"POS_subvention_excluded\",\n\tNULL \"loan_disbursed_amount\",\n\t\"POS_order_selling_price\",\n\t\"GST\",\n\t\"selling_price\",\n\t\"University_flag\",\n\t\"deductionsCurrency\",\n\t\"affiliatePaymentCosts\",\n\t\"minPayout\",\n\t\"payoutPercentage\",\n\t\"minASP\",\n\t\"maxASP\",\n\t\"financeCharges\",\n\t\"SalesCharges\",\n\t\"marketingCharges\",\n\t\"voucherCosts\",\n\t\"instructorCosts\",\n\t\"teachingAssistantsCosts\",\n\t\"platformCosts\",\n\t\"serviceTax\",\n\t\"main_course_cd\",\n\t\"prep_course_cd\",\n\t\"conv_to_USD\",\n\t\"to_inr\",\n\t\"deductionsCurrency_to_USD\",\n\t\"CourseName\",\n\t\"Parent_orderNumber\",\n\t\"MRP_USD\",\n\t\"parent_collection_USD\",\n\t\"discount_Amount_USD\",\n\t\"discount_Amount_INR\",\n\t\"discount_percentage\",\n\t\"cohort_name\",\n\t\"yr\",\n\t\"month\",\n\t\"first_payment_date\",\n\t\"first_order_number\",\n\t\"first_reconciliation_id\",\n\t\"latest_payment_date\",\n\t\"latest_order_number\",\n\t\"latest_reconciliation_id\",\n\t\"main_course_bought\",\n\t\"collection_amount\",\n\t\"collection_minus_GST\",\n\t\"collection_minus_GST_and_TDR_subvention_costs\",\n\t\"Affiliate_payment_cost\",\n\t\"FinanceCharges_cost\",\n\t\"SalesCharges_cost\",\n\t\"MarketingCharges_cost\",\n\t\"Voucher_cost\",\n\t\"Instructor_cost\",\n\t\"TeachingAssistants_cost\",\n\t\"Platform_cost\",\n\t\"Revenue_for_payout_calculation\",\n\t\"order_payout\",\n\t\"final_payout\" as \"final_pay\" ,\n\t\"latest_order_row\",\n\t\"Order_tag\",\n\t\"serviceTax_INR\",\n\t\"order_selling_price_USD\",\n\t\"order_selling_price_INR\",\n\t\"collection_minus_GST_INR\",\n\t\"POS_subvention_excluded_USD\",\n\t\"POS_subvention_excluded_INR\",\n\t\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\"Revenue_for_payout_calculation_INR\",\n\t\"order_payout_INR\",\n\t\"final_payout_INR\" \n\n\t,NULL \"order_payout_to_SL\"\n\t,NULL \"final_pay_to_SL\"\n\t,NULL \"order_payout_to_SL_INR\"\n\t,NULL \"final_pay_to_SL_INR\"\n\t,NULL \"first_lvc_attended_date\"\n\t,NULL At_least_1_LVC_attended\n\t,NULL \"old_latest_payment_date\"\n\t,NULL \"Revised_Logic_Applicable_Flag\"\n  \n    ,NULL \"enrollment_rn\"\n\nfrom ${ev_sf_db_sl_analytics_db}.\"PRODCT_TEMP\".\"university_payout_table_30JUN2022\" \nwhere upper(\"University_flag\") NOT IN ('IU', 'IIIT BANGALORE' ) \nand NVL(abs(\"final_payout\"),0) > 0\n--and \"University_flag\"<>'KPMG'\n)\n\nunion all\n\n----------------------------------------------------------------------------------------------------------------------\n-- university_payout_table_30JUN2022 where University_flag in (IU,IIITB) ---------------------------------------------\n-- and abs(final_payout)>0 and ndate between 2022-01-01 to 2022-06-30 ------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------\n(  \nselect  \n\t\"Email\",\n\t\"order_type\",\n\t\"paymentDate\",\n\t\"reconciliation_id\",\n  \tNULL \"mapped_reconciliation_id\", -- Added on 20240305 :SP\t\n\t\"ReconcileOption\",\n\t\"orderNumber\",\n\t\"refundedOrderNumber\",\n\t\"currency\",\n\t\"paymentCourse\",\n\t\"Program Name\",\n  \tNULL \"Program Type\", -- Added on 20240305\n\t\"paymentGeo\",\n\t\"paymentCountry\",\n\t\"paymentTrainingType\",\n\t\"paymentQueryType\",\n\t\"paymentCategory\",\n\t\"paymentGateway\",\n\t\"RefundReconciliation_id\",\n\t\"refundUnit\",\n\t\"partialRefundAmount\",\n\t\"ndate\",\n\t\"EMITerm\",\n\t\"fee\",\n\t\"applicableOnwards\",\n\t\"emi_subvention_rate\",\n\t\"TDR\",\n\t\"POS_subvention_excluded\",\n\tNULL \"loan_disbursed_amount\",\n\t\"POS_order_selling_price\",\n\t\"GST\",\n\t\"selling_price\",\n\t\"University_flag\",\n\t\"deductionsCurrency\",\n\t\"affiliatePaymentCosts\",\n\t\"minPayout\",\n\t\"payoutPercentage\",\n\t\"minASP\",\n\t\"maxASP\",\n\t\"financeCharges\",\n\t\"SalesCharges\",\n\t\"marketingCharges\",\n\t\"voucherCosts\",\n\t\"instructorCosts\",\n\t\"teachingAssistantsCosts\",\n\t\"platformCosts\",\n\t\"serviceTax\",\n\t\"main_course_cd\",\n\t\"prep_course_cd\",\n\t\"conv_to_USD\",\n\t\"to_inr\",\n\t\"deductionsCurrency_to_USD\",\n\t\"CourseName\",\n\t\"Parent_orderNumber\",\n\t\"MRP_USD\",\n\t\"parent_collection_USD\",\n\t\"discount_Amount_USD\",\n\t\"discount_Amount_INR\",\n\t\"discount_percentage\",\n\t\"cohort_name\",\n\t\"yr\",\n\t\"month\",\n\t\"first_payment_date\",\n\t\"first_order_number\",\n\t\"first_reconciliation_id\",\n\t\"latest_payment_date\",\n\t\"latest_order_number\",\n\t\"latest_reconciliation_id\",\n\t\"main_course_bought\",\n\t\"collection_amount\",\n\t\"collection_minus_GST\",\n\t\"collection_minus_GST_and_TDR_subvention_costs\",\n\t\"Affiliate_payment_cost\",\n\t\"FinanceCharges_cost\",\n\t\"SalesCharges_cost\",\n\t\"MarketingCharges_cost\",\n\t\"Voucher_cost\",\n\t\"Instructor_cost\",\n\t\"TeachingAssistants_cost\",\n\t\"Platform_cost\",\n\t\"Revenue_for_payout_calculation\",\n\t\"order_payout\",\n\t\"final_payout\" as \"final_pay\" ,\n\t\"latest_order_row\",\n\t\"Order_tag\",\n\t\"serviceTax_INR\",\n\t\"order_selling_price_USD\",\n\t\"order_selling_price_INR\",\n\t\"collection_minus_GST_INR\",\n\t\"POS_subvention_excluded_USD\",\n\t\"POS_subvention_excluded_INR\",\n\t\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\"Revenue_for_payout_calculation_INR\",\n\t\"order_payout_INR\",\n\t\"final_payout_INR\"  \n\n\t,NULL \"order_payout_to_SL\"\n\t,NULL \"final_pay_to_SL\"\n\t,NULL \"order_payout_to_SL_INR\"\n\t,NULL \"final_pay_to_SL_INR\"  \n\t,NULL \"first_lvc_attended_date\"\n\t,NULL At_least_1_LVC_attended\n\t,NULL \"old_latest_payment_date\"\n\t,NULL \"Revised_Logic_Applicable_Flag\"\n     \t,NULL \"enrollment_rn\"\n\nfrom ${ev_sf_db_sl_analytics_db}.\"PRODCT_TEMP\".\"university_payout_table_30JUN2022\" \nwhere upper(\"University_flag\") IN ('IU', 'IIIT BANGALORE' ) \nand NVL(abs(\"final_payout\"),0) > 0 \nand \"ndate\" between '2022-01-01' and '2022-06-30'\n)\n\nunion all\n\n------------------------------------------------------------------------------------------------------------\n-- university_payout_table_30JUN2022 where University_flag = IU and abs(final_payout)=0  -------------------\n------------------------------------------------------------------------------------------------------------\n(  \nselect  \n\t\"Email\",\n\t\"order_type\",\n\t\"paymentDate\",\n\t\"reconciliation_id\",\n  \tNULL \"mapped_reconciliation_id\", -- Added on 20240305 :SP\t\n\t\"ReconcileOption\",\n\t\"orderNumber\",\n\t\"refundedOrderNumber\",\n\t\"currency\",\n\t\"paymentCourse\",\n\t\"Program Name\",\n  \tNULL \"Program Type\", -- Added on 20240305\n\t\"paymentGeo\",\n\t\"paymentCountry\",\n\t\"paymentTrainingType\",\n\t\"paymentQueryType\",\n\t\"paymentCategory\",\n\t\"paymentGateway\",\n\t\"RefundReconciliation_id\",\n\t\"refundUnit\",\n\t\"partialRefundAmount\",\n\t\"ndate\",\n\t\"EMITerm\",\n\t\"fee\",\n\t\"applicableOnwards\",\n\t\"emi_subvention_rate\",\n\t\"TDR\",\n\t\"POS_subvention_excluded\",\n\tNULL \"loan_disbursed_amount\",\n\t\"POS_order_selling_price\",\n\t\"GST\",\n\t\"selling_price\",\n\t\"University_flag\",\n\t\"deductionsCurrency\",\n\t\"affiliatePaymentCosts\",\n\t\"minPayout\",\n\t\"payoutPercentage\",\n\t\"minASP\",\n\t\"maxASP\",\n\t\"financeCharges\",\n\t\"SalesCharges\",\n\t\"marketingCharges\",\n\t\"voucherCosts\",\n\t\"instructorCosts\",\n\t\"teachingAssistantsCosts\",\n\t\"platformCosts\",\n\t\"serviceTax\",\n\t\"main_course_cd\",\n\t\"prep_course_cd\",\n\t\"conv_to_USD\",\n\t\"to_inr\",\n\t\"deductionsCurrency_to_USD\",\n\t\"CourseName\",\n\t\"Parent_orderNumber\",\n\t\"MRP_USD\",\n\t\"parent_collection_USD\",\n\t\"discount_Amount_USD\",\n\t\"discount_Amount_INR\",\n\t\"discount_percentage\",\n\t\"cohort_name\",\n\t\"yr\",\n\t\"month\",\n\t\"first_payment_date\",\n\t\"first_order_number\",\n\t\"first_reconciliation_id\",\n\t\"latest_payment_date\",\n\t\"latest_order_number\",\n\t\"latest_reconciliation_id\",\n\t\"main_course_bought\",\n\t\"collection_amount\",\n\t\"collection_minus_GST\",\n\t\"collection_minus_GST_and_TDR_subvention_costs\",\n\t\"Affiliate_payment_cost\",\n\t\"FinanceCharges_cost\",\n\t\"SalesCharges_cost\",\n\t\"MarketingCharges_cost\",\n\t\"Voucher_cost\",\n\t\"Instructor_cost\",\n\t\"TeachingAssistants_cost\",\n\t\"Platform_cost\",\n\t\"Revenue_for_payout_calculation\",\n\t\"order_payout\",\n\t\"final_payout\" as \"final_pay\" ,\n\t\"latest_order_row\",\n\t\"Order_tag\",\n\t\"serviceTax_INR\",\n\t\"order_selling_price_USD\",\n\t\"order_selling_price_INR\",\n\t\"collection_minus_GST_INR\",\n\t\"POS_subvention_excluded_USD\",\n\t\"POS_subvention_excluded_INR\",\n\t\"collection_minus_GST_and_TDR_subvention_costs_INR\",\n\t\"Revenue_for_payout_calculation_INR\",\n\t\"order_payout_INR\",\n\t\"final_payout_INR\"  \n\n\t,NULL \"order_payout_to_SL\"\n\t,NULL \"final_pay_to_SL\"\n\t,NULL \"order_payout_to_SL_INR\"\n\t,NULL \"final_pay_to_SL_INR\"\n\t,NULL \"first_lvc_attended_date\"\n\t,NULL At_least_1_LVC_attended\n\t,NULL \"old_latest_payment_date\"\n\t,NULL \"Revised_Logic_Applicable_Flag\"\n   \t,NULL \"enrollment_rn\"\n  \nfrom ${ev_sf_db_sl_analytics_db}.\"PRODCT_TEMP\".\"university_payout_table_30JUN2022\" \nwhere upper(\"University_flag\") IN ('IU') \nand NVL(abs(\"final_payout\"),0) = 0\n--and \"University_flag\"<>'KPMG'\n)\n);\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591211":{"id":2591211,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1926640548,"x":128,"y":48,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[2591229],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of gsht_university_payout_table_30JUN2022_KPMG"}}}},"visible":true},"2":{"slot":2,"name":"Basic/Advanced Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Basic"}}}},"visible":true},"3":{"slot":3,"name":"Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GCP Simplilearn Production"}}}},"visible":true},"6":{"slot":6,"name":"Data Source","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"KPMG_payout_data_Jan-Jun"}}}},"visible":true},"7":{"slot":7,"name":"Data Selection","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Email"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"order_type"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"paymentDate"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":"reconciliation_id"}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"ReconcileOption"}}},"6":{"slot":6,"values":{"1":{"slot":1,"type":"STRING","value":"orderNumber"}}},"7":{"slot":7,"values":{"1":{"slot":1,"type":"STRING","value":"refundedOrderNumber"}}},"8":{"slot":8,"values":{"1":{"slot":1,"type":"STRING","value":"currency"}}},"9":{"slot":9,"values":{"1":{"slot":1,"type":"STRING","value":"paymentCourse"}}},"10":{"slot":10,"values":{"1":{"slot":1,"type":"STRING","value":"Program Name"}}},"11":{"slot":11,"values":{"1":{"slot":1,"type":"STRING","value":"paymentGeo"}}},"12":{"slot":12,"values":{"1":{"slot":1,"type":"STRING","value":"paymentCountry"}}},"13":{"slot":13,"values":{"1":{"slot":1,"type":"STRING","value":"paymentTrainingType"}}},"14":{"slot":14,"values":{"1":{"slot":1,"type":"STRING","value":"paymentQueryType"}}},"15":{"slot":15,"values":{"1":{"slot":1,"type":"STRING","value":"paymentCategory"}}},"16":{"slot":16,"values":{"1":{"slot":1,"type":"STRING","value":"paymentGateway"}}},"17":{"slot":17,"values":{"1":{"slot":1,"type":"STRING","value":"RefundReconciliation_id"}}},"18":{"slot":18,"values":{"1":{"slot":1,"type":"STRING","value":"refundUnit"}}},"19":{"slot":19,"values":{"1":{"slot":1,"type":"STRING","value":"partialRefundAmount"}}},"20":{"slot":20,"values":{"1":{"slot":1,"type":"STRING","value":"ndate"}}},"21":{"slot":21,"values":{"1":{"slot":1,"type":"STRING","value":"EMITerm"}}},"22":{"slot":22,"values":{"1":{"slot":1,"type":"STRING","value":"fee"}}},"23":{"slot":23,"values":{"1":{"slot":1,"type":"STRING","value":"applicableOnwards"}}},"24":{"slot":24,"values":{"1":{"slot":1,"type":"STRING","value":"emi_subvention_rate"}}},"25":{"slot":25,"values":{"1":{"slot":1,"type":"STRING","value":"TDR"}}},"26":{"slot":26,"values":{"1":{"slot":1,"type":"STRING","value":"POS_subvention_excluded"}}},"27":{"slot":27,"values":{"1":{"slot":1,"type":"STRING","value":"POS_order_selling_price"}}},"28":{"slot":28,"values":{"1":{"slot":1,"type":"STRING","value":"GST"}}},"29":{"slot":29,"values":{"1":{"slot":1,"type":"STRING","value":"selling_price"}}},"30":{"slot":30,"values":{"1":{"slot":1,"type":"STRING","value":"University_flag"}}},"31":{"slot":31,"values":{"1":{"slot":1,"type":"STRING","value":"deductionsCurrency"}}},"32":{"slot":32,"values":{"1":{"slot":1,"type":"STRING","value":"affiliatePaymentCosts"}}},"33":{"slot":33,"values":{"1":{"slot":1,"type":"STRING","value":"minPayout"}}},"34":{"slot":34,"values":{"1":{"slot":1,"type":"STRING","value":"payoutPercentage"}}},"35":{"slot":35,"values":{"1":{"slot":1,"type":"STRING","value":"minASP"}}},"36":{"slot":36,"values":{"1":{"slot":1,"type":"STRING","value":"maxASP"}}},"37":{"slot":37,"values":{"1":{"slot":1,"type":"STRING","value":"financeCharges"}}},"38":{"slot":38,"values":{"1":{"slot":1,"type":"STRING","value":"SalesCharges"}}},"39":{"slot":39,"values":{"1":{"slot":1,"type":"STRING","value":"marketingCharges"}}},"40":{"slot":40,"values":{"1":{"slot":1,"type":"STRING","value":"voucherCosts"}}},"41":{"slot":41,"values":{"1":{"slot":1,"type":"STRING","value":"instructorCosts"}}},"42":{"slot":42,"values":{"1":{"slot":1,"type":"STRING","value":"teachingAssistantsCosts"}}},"43":{"slot":43,"values":{"1":{"slot":1,"type":"STRING","value":"platformCosts"}}},"44":{"slot":44,"values":{"1":{"slot":1,"type":"STRING","value":"serviceTax"}}},"45":{"slot":45,"values":{"1":{"slot":1,"type":"STRING","value":"main_course_cd"}}},"46":{"slot":46,"values":{"1":{"slot":1,"type":"STRING","value":"prep_course_cd"}}},"47":{"slot":47,"values":{"1":{"slot":1,"type":"STRING","value":"conv_to_USD"}}},"48":{"slot":48,"values":{"1":{"slot":1,"type":"STRING","value":"to_inr"}}},"49":{"slot":49,"values":{"1":{"slot":1,"type":"STRING","value":"deductionsCurrency_to_USD"}}},"50":{"slot":50,"values":{"1":{"slot":1,"type":"STRING","value":"CourseName"}}},"51":{"slot":51,"values":{"1":{"slot":1,"type":"STRING","value":"Parent_orderNumber"}}},"52":{"slot":52,"values":{"1":{"slot":1,"type":"STRING","value":"MRP_USD"}}},"53":{"slot":53,"values":{"1":{"slot":1,"type":"STRING","value":"parent_collection_USD"}}},"54":{"slot":54,"values":{"1":{"slot":1,"type":"STRING","value":"discount_Amount_USD"}}},"55":{"slot":55,"values":{"1":{"slot":1,"type":"STRING","value":"discount_Amount_INR"}}},"56":{"slot":56,"values":{"1":{"slot":1,"type":"STRING","value":"discount_percentage"}}},"57":{"slot":57,"values":{"1":{"slot":1,"type":"STRING","value":"yr"}}},"58":{"slot":58,"values":{"1":{"slot":1,"type":"STRING","value":"month"}}},"59":{"slot":59,"values":{"1":{"slot":1,"type":"STRING","value":"first_payment_date"}}},"60":{"slot":60,"values":{"1":{"slot":1,"type":"STRING","value":"first_order_number"}}},"61":{"slot":61,"values":{"1":{"slot":1,"type":"STRING","value":"first_reconciliation_id"}}},"62":{"slot":62,"values":{"1":{"slot":1,"type":"STRING","value":"latest_payment_date"}}},"63":{"slot":63,"values":{"1":{"slot":1,"type":"STRING","value":"latest_order_number"}}},"64":{"slot":64,"values":{"1":{"slot":1,"type":"STRING","value":"latest_reconciliation_id"}}},"65":{"slot":65,"values":{"1":{"slot":1,"type":"STRING","value":"main_course_bought"}}},"66":{"slot":66,"values":{"1":{"slot":1,"type":"STRING","value":"collection_amount"}}},"67":{"slot":67,"values":{"1":{"slot":1,"type":"STRING","value":"collection_minus_GST"}}},"68":{"slot":68,"values":{"1":{"slot":1,"type":"STRING","value":"collection_minus_GST_and_TDR_subvention_costs"}}},"69":{"slot":69,"values":{"1":{"slot":1,"type":"STRING","value":"Affiliate_payment_cost"}}},"70":{"slot":70,"values":{"1":{"slot":1,"type":"STRING","value":"FinanceCharges_cost"}}},"71":{"slot":71,"values":{"1":{"slot":1,"type":"STRING","value":"SalesCharges_cost"}}},"72":{"slot":72,"values":{"1":{"slot":1,"type":"STRING","value":"MarketingCharges_cost"}}},"73":{"slot":73,"values":{"1":{"slot":1,"type":"STRING","value":"Voucher_cost"}}},"74":{"slot":74,"values":{"1":{"slot":1,"type":"STRING","value":"Instructor_cost"}}},"75":{"slot":75,"values":{"1":{"slot":1,"type":"STRING","value":"TeachingAssistants_cost"}}},"76":{"slot":76,"values":{"1":{"slot":1,"type":"STRING","value":"Platform_cost"}}},"77":{"slot":77,"values":{"1":{"slot":1,"type":"STRING","value":"Revenue_for_payout_calculation"}}},"78":{"slot":78,"values":{"1":{"slot":1,"type":"STRING","value":"order_payout"}}},"79":{"slot":79,"values":{"1":{"slot":1,"type":"STRING","value":"final_payout"}}},"80":{"slot":80,"values":{"1":{"slot":1,"type":"STRING","value":"latest_order_row"}}},"81":{"slot":81,"values":{"1":{"slot":1,"type":"STRING","value":"Email_wise_payout"}}},"82":{"slot":82,"values":{"1":{"slot":1,"type":"STRING","value":"refund_flag"}}},"83":{"slot":83,"values":{"1":{"slot":1,"type":"STRING","value":"Order_tag"}}},"84":{"slot":84,"values":{"1":{"slot":1,"type":"STRING","value":"number of participants"}}},"85":{"slot":85,"values":{"1":{"slot":1,"type":"STRING","value":"account name"}}},"86":{"slot":86,"values":{"1":{"slot":1,"type":"STRING","value":"USD.to.INR"}}},"87":{"slot":87,"values":{"1":{"slot":1,"type":"STRING","value":"cohort_name"}}},"88":{"slot":88,"values":{"1":{"slot":1,"type":"STRING","value":"serviceTax_INR"}}},"89":{"slot":89,"values":{"1":{"slot":1,"type":"STRING","value":"order_selling_price_USD"}}},"90":{"slot":90,"values":{"1":{"slot":1,"type":"STRING","value":"collection_minus_GST_INR"}}},"91":{"slot":91,"values":{"1":{"slot":1,"type":"STRING","value":"order_selling_price_INR"}}},"92":{"slot":92,"values":{"1":{"slot":1,"type":"STRING","value":"POS_subvention_excluded_USD"}}},"93":{"slot":93,"values":{"1":{"slot":1,"type":"STRING","value":"POS_subvention_excluded_INR"}}},"94":{"slot":94,"values":{"1":{"slot":1,"type":"STRING","value":"collection_minus_GST_and_TDR_subvention_costs_INR"}}},"95":{"slot":95,"values":{"1":{"slot":1,"type":"STRING","value":"Revenue_for_payout_calculation_INR"}}},"96":{"slot":96,"values":{"1":{"slot":1,"type":"STRING","value":"order_payout_INR"}}},"97":{"slot":97,"values":{"1":{"slot":1,"type":"STRING","value":"final_payout_INR"}}},"98":{"slot":98,"values":{"1":{"slot":1,"type":"STRING","value":"Payout on Delivered Milstone"}}},"99":{"slot":99,"values":{"1":{"slot":1,"type":"STRING","value":"cumulative_payout"}}},"100":{"slot":100,"values":{"1":{"slot":1,"type":"STRING","value":"remainder_payout"}}}},"visible":true},"8":{"slot":8,"name":"Data Source Filter","elements":{},"visible":true},"9":{"slot":9,"name":"Combine Filters","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"10":{"slot":10,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SELECT ..."}}}},"visible":false},"11":{"slot":11,"name":"Limit","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"12":{"slot":12,"name":"Connection Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"RowScanDepth"},"2":{"slot":2,"type":"STRING","value":"577"}}}},"visible":true},"13":{"slot":13,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"14":{"slot":14,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"PRODCT_TEMP"}}}},"visible":true},"15":{"slot":15,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"university_payout_table_30JUN2022_KPMG_stg"}}}},"visible":true},"16":{"slot":16,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"17":{"slot":17,"name":"S3 Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"18":{"slot":18,"name":"Primary Keys","elements":{},"visible":true},"20":{"slot":20,"name":"Data Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GoogleSheets"}}}},"visible":false},"200":{"slot":200,"name":"Spreadsheet Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":" KPMG_payout_data"}}}},"visible":true},"201":{"slot":201,"name":"Contains Header Row","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Yes"}}}},"visible":true},"202":{"slot":202,"name":"Cell Range","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"1001":{"slot":1001,"name":"","elements":{},"visible":false},"1013":{"slot":1013,"name":"Auto Debug","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}}},"visible":true},"1014":{"slot":1014,"name":"Debug Level","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"3"}}}},"visible":false},"1992":{"slot":1992,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1993":{"slot":1993,"name":"Use Accelerated Endpoint","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"False"}}}},"visible":false},"1994":{"slot":1994,"name":"Stage","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1995":{"slot":1995,"name":"Stage Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1996":{"slot":1996,"name":"Stage Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1997":{"slot":1997,"name":"New Table Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1998":{"slot":1998,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1999":{"slot":1999,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"2000":{"slot":2000,"name":"Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Standard"}}}},"visible":true},"40000":{"slot":40000,"name":"Encryption","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"None"}}}},"visible":false},"40001":{"slot":40001,"name":"KMS Key ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"40501":{"slot":40501,"name":"","elements":{},"visible":false},"40502":{"slot":40502,"name":"Load Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"6":{"slot":6,"values":{"1":{"slot":1,"type":"STRING","value":"Gzip"}}}},"visible":true},"63319":{"slot":63319,"name":"Stage Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Credentials"}}}},"visible":false},"63320":{"slot":63320,"name":"Storage Account","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"63321":{"slot":63321,"name":"Blob Container","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"63322":{"slot":63322,"name":"Storage Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"84533":{"slot":84533,"name":"Storage Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"88340":{"slot":88340,"name":"","elements":{},"visible":false},"88341":{"slot":88341,"name":"Stage Platform","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Snowflake Managed"}}}},"visible":true},"88342":{"slot":88342,"name":"Stage Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Credentials"}}}},"visible":false},"88343":{"slot":88343,"name":"Storage Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"88344":{"slot":88344,"name":"Use Accelerated Endpoint","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"False"}}}},"visible":false},"88345":{"slot":88345,"name":"Stage","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Custom]"}}}},"visible":true},"98776":{"slot":98776,"name":"GCS Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591212":{"id":2591212,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":672,"y":288,"width":32,"height":32,"inputConnectorIDs":[2591199],"outputSuccessConnectorIDs":[2591217],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql_freezed_table_till_last_month"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*create or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\" as      \nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\nwhere \"latest_payment_date\" < date_trunc(month,current_date)\n;\n*/\n\n\n-------------------------------------------------------------------------------\n------------- Deleting last months data in case of reloading ------------------\n-------------------------------------------------------------------------------\ndelete from ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\n--where \"latest_payment_date\" < '2022-08-01' and \"latest_payment_date\" >= '2022-07-01';\nwhere \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-20)\n--and \"University_flag\" ilike '%ihub%' \n;\n\n\n-------------------------------------------------------------------------------\n------------- Inserting last months data from temp payout table ----------------\n-------------------------------------------------------------------------------\nINSERT INTO ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\n\nselect * from ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\n--where \"latest_payment_date\" < '2022-08-01' and \"latest_payment_date\" >= '2022-07-01';\nwhere \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-20)\n--and \"University_flag\" ilike '%ihub%' \n;\n\n/*delete from ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\nwhere \"latest_payment_date\" > date_trunc(month,current_date)\n;*/\n-------------------------------------------------------------------------------\n------------- Updating the latest Program Name in freezed data ----------------\n-------------------------------------------------------------------------------\n/*merge into ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\" fzd\nusing (select distinct \"paymentCourse\",\"Program Name\" from sl_analytics_db.sales_temp.\"unified_elt2\" \n       qualify row_number() over (partition by \"paymentCourse\" order by \"ndate\" desc) = 1 \n      ) as elt2\non fzd.\"Program Name\" = elt2.\"paymentCourse\"\nwhen matched then update \nset fzd.\"Program Name\"=elt2.\"Program Name\"\n;\n*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591213":{"id":2591213,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-336,"y":400,"width":32,"height":32,"inputConnectorIDs":[2591216],"outputSuccessConnectorIDs":[2591230],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pg_university_payout_refund_stg"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--------- Select statement starts at line no - 143 ---------------\n\ncreate or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_refunds_stg\" as\n\n-------------------------------------------------\n------------ UPG handling -----------------------\n-------------------------------------------------\nwith elt2_with_upg_orders as\n(\nselect distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg2.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg2.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom\n        \n    (select distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n\t\t\t\tand \"refundedOrderNumber\" is not null\n                and \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n\t\t-----------------------------------------------------------\n  \t\t--------------- second level of upgrades ------------------\n  \t\t-----------------------------------------------------------\n        left outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n                and \"refundedOrderNumber\" is not null\n\t\t\t\tand \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"RefundReconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\n---------------------------------------------------\n----------------- Main Refunds Module -------------\n---------------------------------------------------\nelt2_monthly as \n(\n\tselect a.* exclude(\"cohort_name\"), --gst.\"GST\",\n  \t\tNULL as GST,\n  \t\tC.\"cohort_name\" as \"cohort_name\",\n\t\t--max(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"latest_payment_dt\",\n  \t\t\"order_latest_pdate\"  as \"latest_payment_dt\",\n\t\t--min(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"first_payment_dt\",\n\t\t\"ndate\" as \"first_payment_dt\",\n  \t\tcase when lower(\"paymentCourse\") like '%getting started%' and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",a.\"Program Name\") = 1 then 1\n\t\t\tElse 0 end as \"only_prep_bought\",   \n\t\t\n\t\tcase when a.\"reconciliation_id\" is not null then 'Order' \n\t\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\t\telse NULL end as \"order_type\",\n\t\tb.\"order ndate\"\n\n\tfrom elt2_with_upg_orders a \n\t\n  \t-----------------------------------------------------------\n  \t-------- getting orders to check refunds ------------------\n  \t-----------------------------------------------------------\n\tinner join \n\t( \n\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",min(\"ndate\") as \"order ndate\",min(\"latest_payment_date\") \"order_latest_pdate\"\n      \tfrom \n\t\t(\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\" from \"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\tunion  \n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\" from \"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\" ='Order'\n\t\t) \n\t\tgroup by 1,2,3\n\t) b \n\ton a.\"userEmail\" = b.\"Email\" \n\t\tand a.\"Program Name\" = b.\"Program Name\"\n  \t\tand a.\"RefundReconciliation_id\" = b.\"reconciliation_id\"\n\t\t\n \t-----------------------------------------------------------\n  \t------ To get the Cohort Name at User-Program level -------\n\t-----------------------------------------------------------\n\tleft outer join \n\t(\n\t\tselect lower(B.\"mail\") as \"userEmail\" ,A.\"program_id\", NVL( max(\"cohort_name\") ,\n\t\t\tmax(case when A.\"cohort_id\" =0 and A.\"active_cohort_id\"=0 then 'Flexi Learners'\n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\"=0 then 'Cohort to Flexi'\n\t\t\twhen A.\"cohort_id\" =0 and A.\"active_cohort_id\">0 then 'Flexi to Cohort'\n\t\t\twhen A.\"cohort_id\" <> A.\"active_cohort_id\" then 'Cohort Learner (Cohort Change Processed)' \n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\">0 then 'Cohort Learner (No Cohort Change)'\n\t\t\telse null end ) ) as \"cohort_name\"\n\t\tfrom \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_learner_program\" A\n\t\t\n\t\tinner join  \"SL_ANALYTICS_DB\".\"CLOUD6\".\"target_users\"   B \n\t\ton B.\"uid\"  = A.\"user_id\" \n\t\t\n\t\tleft outer join \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_cohort\" C \n\t\ton A.\"active_cohort_id\" = C.\"id\"\n\t\t\n\t\tgroup by 1,2\n\t) C \n\ton C.\"userEmail\"=   lower(a.\"userEmail\") \n\t\tand C.\"program_id\" = a.\"course ID\"  \n\t\tand a.\"initialProductType_id\" in (2,3)\n\t\t\n\twhere a.\"refundedOrderNumber\" is not null \n\t\tand \"partialRefundAmount\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad') \n\t\tand a.\"ndate\">= '2022-04-01' -- '2022-07-01' --\n)\n\n---------------------------------------------------------------\n--------- Final aggegrations for refund payouts ---------------\n---------------------------------------------------------------\nselect \nmain.\"userEmail\" as \"Email\",\nmain.\"order_type\" as \"order_type\",\nmain.\"Program Name\" ,\nmain.\"universityFlag\" as \"University_flag\",\nto_char(main.\"ndate\",'YYYYMM') as \"year_month\",\nmain.\"RefundReconciliation_id\" as \"reconciliation_id\",\n  max(\"mapped_reconciliation_id\") \"mapped_reconciliation_id\", -- Added on 20240305 :SP\nmax(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\nmax(  main.\"paymentDate\" ) as \"paymentDate\",\n--max(  main.\"RefundReconciliation_id\") as \"reconciliation_id\",\nmax(  main.\"ReconcileOption\") as \"ReconcileOption\",\nmax(main.\"mainrefundedOrderNumber\") as \"orderNumber\",   \nmax( main.\"mainrefundedOrderNumber\" ) as \"refundedOrderNumber\",\nmax(  main.\"currency\" ) as \"currency\",\n  max(main.\"Program Type\") \"Program Type\", -- Added on 20240305\nmax(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\nmax(  main.\"paymentGeo\") as \"paymentGeo\" ,\nmax(  main.\"paymentCountry\" ) as \"paymentCountry\" ,\nmax( main.\"paymentTrainingType\" ) as \"paymentTrainingType\" ,\nmax(  main.\"paymentQueryType\" ) as \"paymentQueryType\" ,\nmax(  main.\"paymentCategory\" ) as \"paymentCategory\" ,\nmax(  main.\"paymentGateway\") as \"paymentGateway\" ,\nmax(  main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\" ,\nmax(main.\"refundUnit\" ) as \"refundUnit\" ,\nmax(  main.\"partialRefundAmount\" ) as \"partialRefundAmount\" ,\nmax(main.\"ndate\") as \"ndate\",\nNULL as \"EMITerm\",\nNULL as \"fee\",\nNULL as \"applicableOnwards\",\nNULL as \"emi_subvention_rate\", \nNULL as \"TDR\", \nmax(-1*main.\"partialRefundAmount\" ) as \"POS_subvention_excluded\" ,\nsum(main.\"partialRefundAmount\") as \"POS_order_selling_price\" ,\nmax(  main.\"GST\" ) as \"GST\" ,\nmax(main.\"contract_selling_price\") as \"selling_price\",\nmax( main.\"deductionsCurrency\" ) as \"deductionsCurrency\" ,\nmax(  main.\"affiliatePaymentCosts\" ) as \"affiliatePaymentCosts\" ,\nmax(  main.\"minPayout\" ) as \"minPayout\" ,\nmax(main.\"payoutPercentage\" ) as \"payoutPercentage\",\nmax(  main.\"minASP\") as \"minASP\",\nmax( main.\"maxASP\" ) as \"maxASP\",\nNULL as \"financeCharges\",\nNULL as \"SalesCharges\",\nNULL as \"marketingCharges\",\nNULL as \"voucherCosts\",\nNULL as \"instructorCosts\",\nNULL as \"teachingAssistantsCosts\",\nNULL as \"platformCosts\",\nNULL as \"serviceTax\",\n1 as \"main_course_cd\",\n1 as \"prep_course_cd\",\nmax(  main.\"conv_to_USD\") as \"conv_to_USD\",\nmax(  main.\"to_inr\" ) as \"to_inr\",\nmax(  main.\"deductionsCurrency_to_USD\" ) as \"deductionsCurrency_to_USD\",\nmax(  main.\"CourseName\" ) as \"CourseName\",\nmax(  main.\"Parent orderNumber\" ) as \"Parent_orderNumber\",\nmax(  main.\"MRP_USD\" ) as \"MRP_USD\",\nmax(  main.\"parent_collection_USD\" ) as \"parent_collection_USD\",\nmax(  main.\"discount_Amount_USD\" ) as \"discount_Amount_USD\",\nmax(  main.\"discount_Amount_INR\" ) as \"discount_Amount_INR\",\nmax( main.\"discount_percentage\") as \"discount_percentage\",\nmax( main.\"maincohort_name\" ) as \"cohort_name\",\nmax(  extract(year from main.\"ndate\") ) as \"yr\",\nmax( extract(month from main.\"ndate\")) as \"month\",\nmax(main.\"first_payment_dt\") as \"first_payment_date\",\nmax( main.\"refundedOrderNumber\") as \"first_order_number\",\nmax(main.\"RefundReconciliation_id\" ) as \"first_reconciliation_id\",\ngreatest(max(\"latest_payment_dt\"),max(\"ndate\")) as \"latest_payment_date\",\nmax( main.\"refundedOrderNumber\" ) as \"latest_order_number\",\nmax( main.\"RefundReconciliation_id\" ) as \"latest_reconciliation_id\",\n1 as \"main_course_bought\",\n-1*sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") as \"collection_amount\" ,\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"collection_minus_GST\", \nNULL as \"collection_minus_GST_and_TDR_subvention_costs\",\nNULL as \"Affiliate_payment_cost\",\nNULL as \"FinanceCharges_cost\",\nNULL as \"SalesCharges_cost\",\nNULL as \"MarketingCharges_cost\",\nNULL as \"Voucher_cost\",\nNULL as \"Instructor_cost\",\nNULL as \"TeachingAssistants_cost\",\nNULL as \"Platform_cost\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"Revenue_for_payout_calculation\" ,\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n\t\t\t+  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n\t\t    ) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\"/main.\"conv_to_USD\")\n\t\t  ) * (-1) as \"order_payout\",\n\n-- Adding Simplilearns payout also - 20230525\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n\t\t\t+  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n\t\t\t) *(max(100-\"payoutPercentage\")/100) ,max(main.\"minPayout\"/main.\"conv_to_USD\")\n\t\t  ) * (-1) as \"order_payout_to_SL\",\n\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) then 0 \n\t\t\t\t\t\telse LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n     else LEAST ( \n\t\t\t\tabs(\"order_payout\"),\n\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\tcase when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout\")) <=0 then 0\n\t\t\t\t\telse max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout\")) end\n\t\t\t\t--,99999) -- SP :20220920\n\t\t\t\t)\nend as \"final_pay\",\n\n-- Adding Simplilearns payout also - 20230525\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout_to_SL\") ) then 0 \n\t\t\t\t\t\telse LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout_to_SL\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n\t\t\telse LEAST ( \n\t\t\t\t\t\tabs(\"order_payout_to_SL\"),\n\t\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\t\tcase when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout_to_SL\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL\")) <=0 then 0\n\t\t\t\t\t\t\telse max(main.\"odr_order_payout\") - (sum(abs(\"order_payout_to_SL\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL\")) end\n\t\t\t\t\t\t--,99999) -- SP :20220920\n\t\t\t\t\t\t)\nend as \"final_pay_to_SL\",\n  \n  \nNULL as \"latest_order_row\",\n'Refund order' as \"Order_tag\",\nNULL as \"serviceTax_INR\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"order_selling_price_USD\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"order_selling_price_INR\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"collection_minus_GST_INR\",  \nNULL as \"POS_subvention_excluded_USD\",\nNULL as \"POS_subvention_excluded_INR\",\nNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"Revenue_for_payout_calculation_INR\" ,\nGREATEST ((sum(main.\"partialRefundAmount\" *main.\"to_inr\") \n\t\t\t+ max( NVL(\"ref_POS_order_selling_price\",0)*main.\"to_inr\") \n\t\t\t) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\"*main.\"to_inr\")\n\t\t  ) * (-1) as \"order_payout_INR\",\n\n-- Adding Simplilearns payout also - 20230525\nGREATEST ((sum(main.\"partialRefundAmount\" *main.\"to_inr\") \n\t\t\t+ max( NVL(\"ref_POS_order_selling_price\",0)*main.\"to_inr\") \n\t\t\t) *(max(100-\"payoutPercentage\")/100) ,max(main.\"minPayout\"*main.\"to_inr\")\n\t\t  ) * (-1) as \"order_payout_to_SL_INR\",\n\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout_INR\"),0)) >= LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_INR\") ) then 0 \n\t\t\t\t\t\telse LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_INR\") ) -  ABS(NVL(max(\"refund_payout_INR\"),0)) end\n\t\t\telse LEAST ( \n\t\t\t\t\t\tabs(\"order_payout_INR\"),\n\t\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\t\tcase when max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_INR\")) <=1 then 0\n\t\t\t\t\t\t\telse max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_INR\")) end\n\t\t\t\t\t\t-- ,99999) -- SP :20220920\n\t\t\t\t\t\t)\nend  as \"final_pay_INR\",\n\n-- Adding Simplilearns payout also - 20230525\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout_INR\"),0)) >= LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_to_SL_INR\") ) then 0 \n\t\t\t\t\t\telse LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_to_SL_INR\") ) -  ABS(NVL(max(\"refund_payout_INR\"),0)) end\n\t\t\telse LEAST ( \n\t\t\t\t\t\tabs(\"order_payout_to_SL_INR\"),\n\t\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\t\tcase when max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_to_SL_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL_INR\")) <=1 then 0\n\t\t\t\t\t\t\telse max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_to_SL_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL_INR\")) end\n\t\t\t\t\t\t-- ,99999) -- SP :20220920\n\t\t\t\t\t   )\nend  as \"final_pay_to_SL_INR\"\n\nfrom \n(\n  \t\n--------------------------------------------------------------------------------------\n---------- Mapping refunds with university programs and currency conversions ---------\n--------------------------------------------------------------------------------------\n\tselect elt2.*, \n\t\todr.\"order_payout\" as \"odr_order_payout\",odr.\"order_payout_INR\" as \"odr_order_payout_INR\" ,\n\t\tref.\"refund_payout_INR\", ref.\"refund_payout\",ref.\"ref_POS_order_selling_price\",\n\t\tpgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n\t\tpgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n\t\tpgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\" ,pgpay_inp.\"maxASP\",\"Revised_Logic_Applicable_Flag\",\n\t\t/*case when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else elt2.\"paymentCourse\" end as \"mainpaymentCourse\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n\t\t */\n\t\t case when \"only_prep_bought\" = 1 then NULL \n            else \"paymentCourse\" end as \"mainpaymentCourse\",\n        case when \"only_prep_bought\" = 1 then NULL \n            else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n        case when \"only_prep_bought\" = 1 then NULL \n            else \"cohort_name\" end as \"maincohort_name\",\n\t\t\t\n\t\tcase when elt2.\"currency\" = 'USD' THEN 1\n\t\t\t\t when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n\t\t\t\t when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\t\tend as \"conv_to_USD\",\n\t\tcase when elt2.\"currency\"='INR' then 1\n\t\t\t\t\t  when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n\t\t\tEND as \"to_inr\",\t\t \n\t\tcase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\t\tend as \"deductionsCurrency_to_USD\"\n\n\tfrom elt2_monthly as elt2\n \n  \t------------------------------------------------------------------------------------------------\n\t------------ Finance Control_Currency Conversion sheet for monthly conversion values -----------\n  \t------------------------------------------------------------------------------------------------\n\tLEFT OUTER JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n\ton extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) \n\t\tand extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\t \n  \t-----------------------------------------------------------------------------\n    ------------ PG payouts input sheet owned by product team -------------------\n  \t-----------------------------------------------------------------------------\n\tLEFT JOIN \n\t(\n\t\tselect distinct * from  \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\" \n\t)  pgpay_inp \n\ton elt2.\"Program Name\" = pgpay_inp.\"programName\"      \n\t\tand elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\t\tand elt2.\"order ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n\t\tand elt2.\"order ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n\t\tand elt2.\"partialRefundAmount\"/ \"conv_to_USD\" >= pgpay_inp.\"minASP\" \n\t\tand elt2.\"partialRefundAmount\"/ \"conv_to_USD\" <= pgpay_inp.\"maxASP\"\n\t\tand pgpay_inp.\"universityFlag\" is not null \n\t\tand pgpay_inp.\"programName\" is not null\n  \n\t-----------------------------------------------------------------------------\n  \t------------------ To get the orders payout for the same purchase -----------\n  \t-----------------------------------------------------------------------------\t\n\tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"order_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"order_payout_INR\" \n\t\tfrom\n\t\t(\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\"='Order' \n\t\t\t\n\t\t\tunion \n\n\t\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\"='Order' \n\t\t)\n\t\tgroup by 1,2,3,4\n\t) odr \n\ton elt2.\"userEmail\" = odr.\"Email\" \n\t\tand  elt2.\"Program Name\" =  odr.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  odr.\"University_flag\"  \n  \t\tand elt2.\"RefundReconciliation_id\" =  odr.\"reconciliation_id\"   \n\t   \n \t-----------------------------------------------------------------------------\n  \t------ To get the previously made refund payouts for the same purchase ------\n  \t-----------------------------------------------------------------------------\n\tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"RefundReconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"refund_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"refund_payout_INR\", \n\t\t\t\tsum(\"POS_order_selling_price\") as \"ref_POS_order_selling_price\" \n\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\"\n\t\twhere \"order_type\" like any ('Refund','Chargeback') \n\t\t\tand \"ndate\" <= '2022-03-31'\n\t\tgroup by 1,2,3,4\n\t) ref \n\ton elt2.\"userEmail\" = ref.\"Email\" \n\t\tand elt2.\"Program Name\" =  ref.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  ref.\"University_flag\" \n  \t\tand elt2.\"RefundReconciliation_id\" =  ref.\"RefundReconciliation_id\"  \n\t  \n\twhere elt2.\"order_type\" like any ('Refund','Chargeback') \n\n ) main \nwhere  main.\"only_prep_bought\" <> 1 \ngroup by 1,2,3,4,5,6\n\thaving (max(main.\"ndate\") >= '2022-01-01'  \n\t\t\tor (max(main.\"ndate\") < '2022-01-01' and upper(\"University_flag\") IN ('IU' ,'IIIT BANGALORE') )\n\t\t\t)\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591214":{"id":2591214,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":880,"y":80,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[2591223],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_freezed_table_till_last_month (1)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*create or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\" as      \nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\nwhere \"latest_payment_date\" < date_trunc(month,current_date)\n;\n*/\n\n\ndelete from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\nwhere \"latest_payment_date\" < '2023-02-01' and \"latest_payment_date\" >= '2022-07-01' \n--and \"Program Name\" in('Product Management Bootcamp','UMass Amherst Digital Marketing Bootcamp');\n\nand \"University_flag\" like 'IU';\n--and \n--where \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-25);\n\n\nINSERT INTO ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\n\nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\nwhere \"latest_payment_date\" < '2023-02-01' and \"latest_payment_date\" >= '2022-07-01' \n--and \"Program Name\" in('Product Management Bootcamp','UMass Amherst Digital Marketing Bootcamp');\n\nand \"University_flag\" like 'IU';\n--where \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-25);\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591215":{"id":2591215,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-608,"y":400,"width":32,"height":32,"inputConnectorIDs":[2957801],"outputSuccessConnectorIDs":[2591208],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pg_university_payout_orders_stg"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"------- Select statement starts at line no - 260 ---------\n\ncreate or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders_stg\" as\n\n------------------------------------------------------\n------- UPG orders handling --------------------------\n------------------------------------------------------\nwith elt2_with_upg_orders as\n(\nselect distinct main.* exclude(\"New_Program Name\",\"New_paymentCourse\",\"New_reconciliation_id\",\"New_Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"New_Program Name\") end as \"New_Program Name\",\n          NVL(upg2.\"paymentCourse\",main.\"New_paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"New_reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg2.\"Program Type\",main.\"New_Program Type\") as \"New_Program Type\" \n\n\t\tfrom\n        \n    (select distinct main.*, \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"New_Program Name\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"New_Program Type\" \n\n\t\tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level og upgrades ------------------\n  \t\t-----------------------------------------------------------\n        left outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"New_reconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\n\n--------------------------------------------------------------------------------------------\n---------- To get all the valid orders with some derivations from unified_elt2 -------------\n--------------------------------------------------------------------------------------------\nelt2_orders_CTE as \n(\n  select a.*  exclude(\"cohort_name\"), --gst.\"GST\", \n  \tC.\"cohort_name\"  as \"cohort_name\",  \t\n  \tifnull(pr.\"serviceTax\",0) \"serviceTax_adjusted\",\n  \tifnull((pr.\"taxPercentage\"/100),0) \"GST\",\n  \tmax(a.\"ndate\") over (partition by a.\"userEmail\",\"New_Program Name\",\"New_reconciliation_id\" ) as \"latest_payment_dt\",  \n\tmin(a.\"ndate\") over (partition by a.\"userEmail\",\"New_Program Name\",\"New_reconciliation_id\" ) as \"first_payment_dt\",\n\tNVL(max(\"parent_collection_USD\") over (partition by a.\"userEmail\",\"New_Program Name\",\"New_reconciliation_id\" ),0) as \"max_parent_collection_USD\",\n\tcase when (lower(\"New_paymentCourse\") like '%getting started%' \n\t\t\t\tor  lower(\"New_paymentCourse\") like '%complimentary%') \n              and count(distinct \"New_paymentCourse\" ) over (partition by a.\"userEmail\",\"New_Program Name\") = 1 \n  \t\t\tthen 1\n\t\tElse 0 end as \"only_prep_bought\",   \n\tround(sum(\"collection_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  as \"Total_Collection_USD\", \n\tcase when NVL(round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2),0) > 0 \n\t\t\t then round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  \n\t\t else \"Total_Collection_USD\" end \n\t\t as \"max_SellingPrice_USD\",\n\tcase when \"New_reconciliation_id\" is not null then 'Order' \n\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\telse NULL end \n\t\tas \"order_type\"\n  \t\n\n\tfrom elt2_with_upg_orders a\n  \n    -----------------------------------------------------------\n  \t------ To get the Cohort Name at User-Program level -------\n\t-----------------------------------------------------------\n\tleft outer join \n\t(\n\t\tselect lower(B.\"mail\") as \"userEmail\" ,A.\"program_id\", \n\t\tNVL( max(\"cohort_name\") ,\n\t\t\tmax(case when A.\"cohort_id\" =0 and A.\"active_cohort_id\"=0 then 'Flexi Learners'\n\t\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\"=0 then 'Cohort to Flexi'\n\t\t\t\twhen A.\"cohort_id\" =0 and A.\"active_cohort_id\">0 then 'Flexi to Cohort'\n\t\t\t\twhen A.\"cohort_id\" <> A.\"active_cohort_id\" then 'Cohort Learner (Cohort Change Processed)' \n\t\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\">0 then 'Cohort Learner (No Cohort Change)'\n\t\t\t\telse null end ) \n\t\t\t) as \"cohort_name\"\n\t\tfrom \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_learner_program\" A\n\t\t\n\t\tinner join  \n\t\t\"SL_ANALYTICS_DB\".\"CLOUD6\".\"target_users\"   B \n\t\ton B.\"uid\"  = A.\"user_id\" \n\t\t\n\t\tleft outer join \n\t\t\"SL_ANALYTICS_DB\".\"JUPITER\".\"target_cohort\" C \n\t\ton A.\"active_cohort_id\" = C.\"id\"\n\t\tgroup by 1,2\n\t) C \n\ton C.\"userEmail\"=   lower(a.\"userEmail\") \n\t\tand C.\"program_id\" = a.\"course ID\"  \n\t\tand a.\"initialProductType_id\" in (2,3)\n  \n   -----------------------------------------------------------\n   ----- New logic built to get the GST and taxPercentage ----\n   -----------------------------------------------------------\n  \tleft join\n  \t(\n    \tselect * from sl_analytics_db.melv1n_crm2.\"target_paymentReconciliations\"\n    ) PR\n  \tON PR.\"orderNumber\" = a.\"orderNumber\"\n  \t\tand pr.\"reconciliation_id\" = a.\"reconciliation_id\"\n  \n\twhere a.\"orderNumber\" is not null \n\t\tand  \"collection_USD\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"New_Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad')\n\t\tand  a.\"orderNumber\" not like '%_EXTN_%' \n),\n\n--------------------------------------------------------------------------------------\n---------- Mapping orders with university programs and currency conversions ----------\n--------------------------------------------------------------------------------------\nuniversity_orders_with_conversion_CTE as \n(\n  select * from\t\t\t\n  (\n    select elt2.* , --exclude(\"payoutPercentage\"),\n            case when \"currency\" = 'USD' THEN 1\n             when \"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n             when \"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n             when \"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n             when \"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n             when \"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n             when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n            end as \"conv_to_USD\",\n            case when \"currency\"='INR' then 1\n                 when \"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"to_inr\",\t\t \n            case when \"deductionsCurrency\" = 'USD' THEN 1\n                 when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                 when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                 when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n                end as \"deductionsCurrency_to_USD\",\n            case when \"deductionsCurrency\"='INR' then 1\n                 when \"deductionsCurrency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"deductionsCurrency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"deductionsCurrency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"deductionsCurrency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"deductionsCurrency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"deductionsCurrency_to_INR\"\t\n  \n  \t\t\t\n        from \n  \t\t(\n              select elt2.* exclude(\"latest_payment_dt\",\"ndate\"),\n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"latest_payment_dt\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"latest_payment_dt\" \n            end \"latest_payment_dt\", -- Adjusted for getting started \n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"ndate\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"ndate\" \n            end \"ndate\", -- Adjusted for getting started \n\n            max(case when \"paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                   then NULL  \n                 when (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 or \"Total_Collection_USD\" > \"max_SellingPrice_USD\") \n                   then \"ndate\" end) over (partition by \"userEmail\",\"Program Name\")\n            \"main_bundles_max_ndate\", -- -- Adjusted for getting started purchased after the main bundle\n\n            pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", \n            pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", \n            pgpay_inp.\"instructorCosts\", pgpay_inp.\"teachingAssistantsCosts\", pgpay_inp.\"platformCosts\",\n            pgpay_inp.\"universityFlag\" , pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n            pgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\",pgpay_inp.\"maxASP\",pgpay_inp.\"Revised_Logic_Applicable_Flag\",\n\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"New_paymentCourse\" end as \"mainpaymentCourse\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"orderNumber\" end as \"mainorderNumber\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"cohort_name\" end as \"maincohort_name\" \n\n          \t,case when \"universityFlag\" ilike '%ihub%' and \"New_paymentCourse\" not ilike '%gettiing%started%' \n                    and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n                           or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n            then \n                dense_rank() over (partition by \"universityFlag\" order by \"New_reconciliation_id\") \n  \t\t\telse null end \"order_rank\"\n\n        from  elt2_orders_CTE elt2\n\t\t\n        ---------------------------------------------------------------------\n        ------------ PG payouts input sheet owned by product team -----------\n        ---------------------------------------------------------------------\n        LEFT JOIN \n        (\n            select distinct * from  \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\" \n        ) pgpay_inp \n        on trim(elt2.\"New_Program Name\") = trim(pgpay_inp.\"programName\")     \n            and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n            and \"latest_payment_dt\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n            and \"latest_payment_dt\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n            and elt2.\"Total_Collection_USD\" >= pgpay_inp.\"minASP\" \n            and elt2.\"Total_Collection_USD\" <= pgpay_inp.\"maxASP\"\n            and pgpay_inp.\"universityFlag\" is not null \n            and pgpay_inp.\"programName\" is not null\n    \t)elt2\n    \n  \t\t------------------------------------------------------------------------------------------------\n  \t\t------------ Finance Control_Currency Conversion sheet for monthly conversion values -----------\n  \t\t------------------------------------------------------------------------------------------------\n        LEFT OUTER JOIN \n        \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n        on extract(year from elt2.\"latest_payment_dt\") =  extract(year from to_date(rate.\"Month\")) \n            and extract(month from elt2.\"latest_payment_dt\") =   extract(month from to_date(rate.\"Month\"))\n\n    where    elt2.\"order_type\" = 'Order' \n\t)\n)\n\n--------------------------------------------------------------------------------------\n------------------------ FINAL QUERY WITH ALL AGGREGATIONS  --------------------------\n--------------------------------------------------------------------------------------\n\nselect * from \n(\n  select \n  main.\"userEmail\" as \"Email\",     \n  main.\"order_type\" as \"order_type\",\n  main.\"New_Program Name\" as \"Program Name\",\n  main.\"universityFlag\" as \"University_flag\",\n  \"New_reconciliation_id\" as \"reconciliation_id\", -- Added new column in the level of this table\n  max(\"mapped_reconciliation_id\") \"mapped_reconciliation_id\", -- Added on 20240305 : SP\n  max(to_char(main.\"ndate\",'YYYYMM')) as \"year_month\",\n  max(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\n  max(main.\"paymentDate\" ) as \"paymentDate\",\n  max(\"main_bundles_max_ndate\") \"main_bundles_max_ndate\",\n  --max(main.\"reconciliation_id\" ) as \"reconciliation_id\",\n  max(main.\"ReconcileOption\" ) as \"ReconcileOption\",\n  REPLACE(NVL(max(case when main.\"mainorderNumber\" like '%_UPG_%' then 'ZZZ_'||main.\"mainorderNumber\"\n                        else main.\"mainorderNumber\" end\n                      ),\n              max( main.\"mainorderNumber\")),\n          'ZZZ_','') as \"orderNumber\",\n  --max( main.\"mainorderNumber\") as \"orderNumber\",\n  NULL as \"refundedOrderNumber\",\n  max(main.\"currency\" ) as \"currency\",\n  max(main.\"New_Program Type\") \"Program Type\", -- Added on 20240305 : SP\n  max(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\n  max(main.\"paymentGeo\" ) as \"paymentGeo\" ,\n  max(main.\"paymentCountry\" ) as \"paymentCountry\" ,\n  max(main.\"paymentTrainingType\" ) as \"paymentTrainingType\" ,\n  max(main.\"paymentQueryType\" ) as \"paymentQueryType\" ,\n  max(main.\"paymentCategory\" ) as \"paymentCategory\" ,\n  max(main.\"paymentGateway\" ) as \"paymentGateway\" ,\n  max(main.\"RefundReconciliation_id\" ) as \"RefundReconciliation_id\" ,\n  max(main.\"refundUnit\" ) as \"refundUnit\" ,\n  max(main.\"partialRefundAmount\" ) as \"partialRefundAmount\" ,\n  max(main.\"ndate\") as \"ndate\",\n  max(emi.\"EMITerm\" ) as \"EMITerm\" ,\n  max(emi.\"fee\" ) as \"fee\" ,\n  max(emi.\"applicableOnwards\" ) as \"applicableOnwards\" ,\n  max(emi.\"emi_subvention_rate\" ) as \"emi_subvention_rate\" ,\n  max(emi.\"TDR\" ) as \"TDR\" ,\n  --sum(emi.\"POS_subvention_excluded\" ) as \"POS_subvention_excluded\" ,\n  sum(emi.\"POS_subvention_excluded\") as \"POS_subvention_excluded\" ,\n  sum(emi.\"loan_disbursed_amount\") \"loan_disbursed_amount\", -- Added on 2023-05-30 : By SP - LI-510\n  sum(main.\"order_selling_price\") as \"POS_order_selling_price\" ,\n  max(main.\"GST\" ) as \"GST\" ,\n  max(main.\"contract_selling_price\") as \"selling_price\",\n  max(main.\"deductionsCurrency\" ) as \"deductionsCurrency\" ,\n  max(main.\"affiliatePaymentCosts\" ) as \"affiliatePaymentCosts\" ,\n  max(main.\"minPayout\" ) as \"minPayout\" ,\n/*  max(case when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 1 and 230 then 20\n      \t\twhen \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 231 and 500 then 15\n      \t\twhen \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 501 and 715 then 12\n      \t\twhen \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" > 715 then 10\n      else main.\"payoutPercentage\" end) as \"payoutPercentage\",*/\n  max(main.\"payoutPercentage\") as \"payoutPercentage\",\n  max(main.\"order_rank\") \"order_rank\",\n  max(main.\"minASP\" ) as \"minASP\",\n  max(main.\"maxASP\" ) as \"maxASP\",\n  max(main.\"financeCharges\" ) as \"financeCharges\",\n  max(main.\"SalesCharges\" ) as \"SalesCharges\",\n  max(main.\"marketingCharges\" ) as \"marketingCharges\",\n  max(main.\"voucherCosts\" ) as \"voucherCosts\",\n  max(main.\"instructorCosts\" ) as \"instructorCosts\",\n  max(main.\"teachingAssistantsCosts\" ) as \"teachingAssistantsCosts\",\n  max(main.\"platformCosts\" ) as \"platformCosts\",\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax\",\n  1 as \"main_course_cd\",\n  1 as \"prep_course_cd\",\n  max(main.\"conv_to_USD\" ) as \"conv_to_USD\",\n  --max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"conv_to_USD\" else null end) as \"conv_to_USD\",\n  --first_value(\"conv_to_USD\") over (partition by main.\"userEmail\", main.\"order_type\",main.\"New_Program Name\", main.\"universityFlag\",\"latest_payment_dt\") as \"conv_to_USD\",\n  --max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"to_inr\" else null end) as \"to_inr\",\n  max(main.\"to_inr\") as \"to_inr\",\n  --max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"deductionsCurrency_to_USD\" else null end) as \"deductionsCurrency_to_USD\",\n  max(main.\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n  max(main.\"deductionsCurrency_to_INR\") as \"deductionsCurrency_to_INR\",\n  max(main.\"CourseName\" ) as \"CourseName\",\n  max(main.\"Parent orderNumber\" ) as \"Parent_orderNumber\",\n  max(main.\"MRP_USD\" ) as \"MRP_USD\",\n  max(main.\"parent_collection_USD\" ) as \"parent_collection_USD\",\n  max(main.\"discount_Amount_USD\" ) as \"discount_Amount_USD\",\n  max(main.\"discount_Amount_INR\" ) as \"discount_Amount_INR\",\n  max(main.\"discount_percentage\" ) as \"discount_percentage\",\n  max(main.\"maincohort_name\" ) as \"cohort_name\",\n  max(extract(year from main.\"ndate\") ) as \"yr\",\n  max(extract(month from main.\"ndate\") ) as \"month\",\n  max(\"first_payment_dt\") as \"first_payment_date\",\n  max(case when main.\"first_payment_dt\" = main.\"ndate\" then  main.\"orderNumber\" else null end) as \"first_order_number\",\n  max(case when main.\"first_payment_dt\" = main.\"ndate\" then  \"New_reconciliation_id\" else null end) as \"first_reconciliation_id\",\n  max(\"latest_payment_dt\") as \"latest_payment_date\",\n  max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"orderNumber\" else null end) as \"latest_order_number\",\n  max(case when main.\"latest_payment_dt\" = main.\"ndate\" then  \"New_reconciliation_id\" else null end) as \"latest_reconciliation_id\",\n  1 as \"main_course_bought\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"collection_amount\" ,\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax_adjusted\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") - sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"collection_minus_GST\",\n  --sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"service_Tax_USD\",0)) as \"collection_minus_GST_and_TDR_subvention_costs\",\n  sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") as \"collection_minus_GST_and_TDR_subvention_costs\",\n  max(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") as \"FinanceCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") as \"SalesCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") as \"MarketingCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") as \"Voucher_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") as \"Instructor_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\") as \"Platform_cost\",\n\n  \n\n  1 as \"latest_order_row\",\n  'Complete order' as \"Order_tag\" ,\n\n  sum(main.\"service_Tax_INR\") as \"serviceTax_INR\",\n  --sum(main.\"serviceTax_adjusted\") \"serviceTax_adjusted\",\n  --sum(NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") as \"serviceTax_INR\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"order_selling_price_USD\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") as \"order_selling_price_INR\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") - sum(main.\"service_Tax_INR\") as \"collection_minus_GST_INR\",\n  sum(emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") as \"POS_subvention_excluded_USD\",\n  sum(emi.\"POS_subvention_excluded\"*main.\"to_inr\") as \"POS_subvention_excluded_INR\",\n  --sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - NVL(main.\"service_Tax_INR\",0)) as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\n  sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) as \"collection_minus_GST_and_TDR_subvention_costs_INR\"\n  --sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - NVL(main.\"service_Tax_INR\",0) ) - \n\n  ,max(upt.\"final_payout\") as \"upt_final_payout\"  \n  ,max(upt.\"final_payout_INR\") \"upt_final_payout_INR\"\n\n  from university_orders_with_conversion_CTE main\n\n  LEFT JOIN \n  ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n  ON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  \n      and main.\"orderNumber\" = emi.\"orderNumber\"\n\n  -- To balance the payout for getting started purchases for same program\n  LEFT JOIN \n  (\n      select \"Email\" EMAIL,\"Program Name\" PN,\"University_flag\" UF,\n          sum(\"final_payout\") \"final_payout\",\n          sum(\"final_payout_INR\") \"final_payout_INR\"\n      from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n      group by 1,2,3\n  ) upt\n  ON main.\"userEmail\" = upt.EMAIL  \n      and main.\"New_Program Name\" = upt.PN\n      and main.\"universityFlag\" = upt.UF\n\n  where  main.\"only_prep_bought\" <> 1 \n      and (ABS (main.\"Total_Collection_USD\" - main.\"max_SellingPrice_USD\") <= 1 \n           or main.\"Total_Collection_USD\" > main.\"max_SellingPrice_USD\")\n\n  group by 1,2,3,4,5\n      having (max(main.\"ndate\") >= '2022-07-01' \n              or (max(main.\"ndate\") < '2022-01-01' and upper(\"University_flag\") IN ('IU','IIIT BANGALORE')))\n)\n\n\n-- Handling separate getting started purchase cases\nqualify case when \"paymentCourse\" ilike any('%getting%started%','%complimentary%') \n\t\t\tand date(\"main_bundles_max_ndate\") < \"ndate\"\n\t\tthen False\n\t\telse True\nend\n;\n\n---------------------------------------------------------------------------------------------------\n--------- Deleting Special case - where users 1st lvc date changed due to data change in lms ------\n---------------------------------------------------------------------------------------------------\ndelete from ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders_stg\"\nwhere \"Email\" = 'vijay120511@gmail.com' and \"reconciliation_id\" = 4800776;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591232":{"id":2591232,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-912,"y":400,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2957804],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591233":{"id":2591233,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-224,"y":64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of pg_university_payout_refund (1)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_refunds_stg_test\" as\n\nwith elt2 as \n(\n\tselect a.* exclude(\"cohort_name\"), gst.\"GST\",C.\"cohort_name\" as \"cohort_name\",\n\t\tmax(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\" ) as \"latest_payment_dt\", \n\t\tmin(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\" ) as \"first_payment_dt\",\n\t\tcase when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",a.\"Program Name\") = 1 then 1\n\t\t\tElse 0 end as \"only_prep_bought\",   \n\t\tround(sum(\"collection_USD\") over (partition by a.\"userEmail\",a.\"Program Name\" ),2) as \"Total_Collection_USD\", \n\t\tcase when NVL(round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",a.\"Program Name\" ),2),0) > 0 \n\t\t\tthen round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",a.\"Program Name\" ),2) \n\t\t\telse \"Total_Collection_USD\" end\n\t\tas \"max_SellingPrice_USD\",\n\t\tcase when \"reconciliation_id\" is not null then 'Order' \n\t\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\t\telse NULL end as \"order_type\",\n\t\tb.\"ndate\" as \"order ndate\"\n\n\tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" a \n\t\n\tinner join \n\t(\n\t\tselect \"orderNumber\",min(\"ndate\") as \"ndate\" from \"PRODCT_TEMP\".\"pg_university_payout_orders\" group by 1\n\t\tunion  \n\t\tselect \"orderNumber\",min(\"ndate\") as \"ndate\" from \"PRODCT_TEMP\".\"pg_university_payout_ext\" group by 1\n\t\tunion \n\t\tselect \"orderNumber\",min(\"ndate\") as \"ndate\" from \"PRODCT_TEMP\".\"university_payout_table\" group by 1 -- \"university_payout_table_30JUN2022\" --\n\t) b \n\ton a.\"refundedOrderNumber\" = b.\"orderNumber\"\n\t\n\tleft outer join  \n\t(\n\t\tselect \"Geo\", \"GST\" \n\t\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"finance_cost\" \n\t\twhere \"GST\" is not null group by 1,2\n\t) gst \n\ton a.\"paymentCountry\" = gst.\"Geo\" \n\t\n\tleft outer join \n\t(\n\t\tselect lower(B.\"mail\") as \"userEmail\" ,A.\"program_id\", NVL( max(\"cohort_name\") ,\n\t\t\tmax(case when A.\"cohort_id\" =0 and A.\"active_cohort_id\"=0 then 'Flexi Learners'\n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\"=0 then 'Cohort to Flexi'\n\t\t\twhen A.\"cohort_id\" =0 and A.\"active_cohort_id\">0 then 'Flexi to Cohort'\n\t\t\twhen A.\"cohort_id\" <> A.\"active_cohort_id\" then 'Cohort Learner (Cohort Change Processed)' \n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\">0 then 'Cohort Learner (No Cohort Change)'\n\t\t\telse null end ) ) as \"cohort_name\"\n\t\tfrom \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_learner_program\" A\n\t\t\n\t\tinner join  \"SL_ANALYTICS_DB\".\"CLOUD6\".\"target_users\"   B \n\t\ton B.\"uid\"  = A.\"user_id\" \n\n\t\tleft outer join \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_cohort\" C \n\t\ton A.\"active_cohort_id\" = C.\"id\"\n\t\tgroup by 1,2\n\t) C \n\ton C.\"userEmail\"=   lower(a.\"userEmail\") \n\t\tand C.\"program_id\" = a.\"course ID\"  \n\t\tand a.\"initialProductType_id\" in (2,3)\n\t\n\twhere a.\"refundedOrderNumber\" is not null \n\t\tand  \"partialRefundAmount\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad')\n\t\tand a.\"ndate\" <= '2022-03-31' -- '2022-06-30' --\n),\n\nelt2_monthly as \n(\n\tselect a.* exclude(\"cohort_name\"), gst.\"GST\",C.\"cohort_name\" as \"cohort_name\",\n\t\tmax(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\" ) as \"latest_payment_dt\", \n\t\tmin(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\" ) as \"first_payment_dt\",\n\t\tcase when lower(\"paymentCourse\") like '%getting started%' and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",a.\"Program Name\") = 1 then 1\n\t\t\tElse 0 end as \"only_prep_bought\",   \n\t\tround(sum(\"collection_USD\") over (partition by a.\"userEmail\",a.\"Program Name\" ),2) as \"Total_Collection_USD\", \n\t\tcase when NVL(round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",a.\"Program Name\" ),2),0) > 0 \n\t\t\t\t\tthen round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",a.\"Program Name\" ),2) \n\t\t\t else \"Total_Collection_USD\" end\n\t\tas \"max_SellingPrice_USD\",\n\t\tcase when \"reconciliation_id\" is not null then 'Order' \n\t\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\t\telse NULL end as \"order_type\",\n\t\tb.\"order ndate\"\n\n\tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" a \n\t \n\tinner join \n\t( \n\tselect \"Email\", \"Program Name\",min(\"ndate\") as \"order ndate\" from \n\t(\n\t\tselect \"Email\", \"Program Name\",\"ndate\" from \"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\tunion  \n\t\tselect \"Email\", \"Program Name\",\"ndate\" from \"PRODCT_TEMP\".\"pg_university_payout_ext\" \n\t\tunion \n\t\tselect \"Email\", \"Program Name\",\"ndate\" from \"PRODCT_TEMP\".\"university_payout_table\"  -- \"university_payout_table_30JUN2022\" --\n\t\twhere \"order_type\" ='Order'\n\t) \n\tgroup by 1,2\n\t) b \n\ton a.\"userEmail\" = b.\"Email\" \n\t\tand a.\"Program Name\" = b.\"Program Name\"\n\t\t\n\tleft outer join  \n\t(\n\t\tselect \"Geo\", \"GST\" \n\t\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"finance_cost\" \n\t\twhere \"GST\" is not null group by 1,2\n\t) gst \n\ton a.\"paymentCountry\" = gst.\"Geo\" \n\t\n\tleft outer join \n\t(\n\t\tselect lower(B.\"mail\") as \"userEmail\" ,A.\"program_id\", NVL( max(\"cohort_name\") ,\n\t\t\tmax(case when A.\"cohort_id\" =0 and A.\"active_cohort_id\"=0 then 'Flexi Learners'\n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\"=0 then 'Cohort to Flexi'\n\t\t\twhen A.\"cohort_id\" =0 and A.\"active_cohort_id\">0 then 'Flexi to Cohort'\n\t\t\twhen A.\"cohort_id\" <> A.\"active_cohort_id\" then 'Cohort Learner (Cohort Change Processed)' \n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\">0 then 'Cohort Learner (No Cohort Change)'\n\t\t\telse null end ) ) as \"cohort_name\"\n\t\tfrom \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_learner_program\" A\n\t\t\n\t\tinner join  \"SL_ANALYTICS_DB\".\"CLOUD6\".\"target_users\"   B \n\t\ton B.\"uid\"  = A.\"user_id\" \n\t\t\n\t\tleft outer join \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_cohort\" C \n\t\ton A.\"active_cohort_id\" = C.\"id\"\n\t\t\n\t\tgroup by 1,2\n\t) C \n\ton C.\"userEmail\"=   lower(a.\"userEmail\") \n\t\tand C.\"program_id\" = a.\"course ID\"  \n\t\tand a.\"initialProductType_id\" in (2,3)\n\t\t\n\twhere a.\"refundedOrderNumber\" is not null \n\t\tand \"partialRefundAmount\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad') \n\t\tand a.\"ndate\">= '2022-04-01' -- '2022-07-01' --\n)\n\nselect \nmain.\"userEmail\" as \"Email\",\nmain.\"order_type\" as \"order_type\",\nmain.\"Program Name\" ,\nmain.\"universityFlag\" as \"University_flag\",\nto_char(main.\"ndate\",'YYYYMM') as \"year_month\",\nmax(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\nmax(  main.\"paymentDate\" ) as \"paymentDate\",\nmax(  main.\"RefundReconciliation_id\") as \"reconciliation_id\",\nmax(  main.\"ReconcileOption\") as \"ReconcileOption\",\nmax(main.\"mainrefundedOrderNumber\") as \"orderNumber\",   \nmax( main.\"mainrefundedOrderNumber\" ) as \"refundedOrderNumber\",\nmax(  main.\"currency\" ) as \"currency\",\nmax(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\nmax(  main.\"paymentGeo\") as \"paymentGeo\" ,\nmax(  main.\"paymentCountry\" ) as \"paymentCountry\" ,\nmax( main.\"paymentTrainingType\" ) as \"paymentTrainingType\" ,\nmax(  main.\"paymentQueryType\" ) as \"paymentQueryType\" ,\nmax(  main.\"paymentCategory\" ) as \"paymentCategory\" ,\nmax(  main.\"paymentGateway\") as \"paymentGateway\" ,\nmax(  main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\" ,\nmax(main.\"refundUnit\" ) as \"refundUnit\" ,\nmax(  main.\"partialRefundAmount\" ) as \"partialRefundAmount\" ,\nmax(main.\"ndate\") as \"ndate\",\nNULL as \"EMITerm\",\nNULL as \"fee\",\nNULL as \"applicableOnwards\",\nNULL as \"emi_subvention_rate\", \nNULL as \"TDR\", \nmax(-1*main.\"partialRefundAmount\" ) as \"POS_subvention_excluded\" ,\nsum(main.\"partialRefundAmount\") as \"POS_order_selling_price\" ,\nmax(  main.\"GST\" ) as \"GST\" ,\nmax(main.\"contract_selling_price\") as \"selling_price\",\nmax( main.\"deductionsCurrency\" ) as \"deductionsCurrency\" ,\nmax(  main.\"affiliatePaymentCosts\" ) as \"affiliatePaymentCosts\" ,\nmax(  main.\"minPayout\" ) as \"minPayout\" ,\nmax(main.\"payoutPercentage\" ) as \"payoutPercentage\",\nmax(  main.\"minASP\") as \"minASP\",\nmax( main.\"maxASP\" ) as \"maxASP\",\nNULL as \"financeCharges\",\nNULL as \"SalesCharges\",\nNULL as \"marketingCharges\",\nNULL as \"voucherCosts\",\nNULL as \"instructorCosts\",\nNULL as \"teachingAssistantsCosts\",\nNULL as \"platformCosts\",\nNULL as \"serviceTax\",\n1 as \"main_course_cd\",\n1 as \"prep_course_cd\",\nmax(  main.\"conv_to_USD\") as \"conv_to_USD\",\nmax(  main.\"to_inr\" ) as \"to_inr\",\nmax(  main.\"deductionsCurrency_to_USD\" ) as \"deductionsCurrency_to_USD\",\nmax(  main.\"CourseName\" ) as \"CourseName\",\nmax(  main.\"Parent orderNumber\" ) as \"Parent_orderNumber\",\nmax(  main.\"MRP_USD\" ) as \"MRP_USD\",\nmax(  main.\"parent_collection_USD\" ) as \"parent_collection_USD\",\nmax(  main.\"discount_Amount_USD\" ) as \"discount_Amount_USD\",\nmax(  main.\"discount_Amount_INR\" ) as \"discount_Amount_INR\",\nmax( main.\"discount_percentage\") as \"discount_percentage\",\nmax( main.\"maincohort_name\" ) as \"cohort_name\",\nmax(  extract(year from main.\"ndate\") ) as \"yr\",\nmax( extract(month from main.\"ndate\")) as \"month\",\nmax(main.\"first_payment_dt\") as \"first_payment_date\",\nmax( main.\"refundedOrderNumber\") as \"first_order_number\",\nmax(main.\"RefundReconciliation_id\" ) as \"first_reconciliation_id\",\nmax(\"latest_payment_dt\") as \"latest_payment_date\",\nmax( main.\"refundedOrderNumber\" ) as \"latest_order_number\",\nmax( main.\"RefundReconciliation_id\" ) as \"latest_reconciliation_id\",\n1 as \"main_course_bought\",\n-1*sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") as \"collection_amount\" ,\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"collection_minus_GST\", \nNULL as \"collection_minus_GST_and_TDR_subvention_costs\",\nNULL as \"Affiliate_payment_cost\",\nNULL as \"FinanceCharges_cost\",\nNULL as \"SalesCharges_cost\",\nNULL as \"MarketingCharges_cost\",\nNULL as \"Voucher_cost\",\nNULL as \"Instructor_cost\",\nNULL as \"TeachingAssistants_cost\",\nNULL as \"Platform_cost\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"Revenue_for_payout_calculation\" ,\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n\t\t\t+  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n\t\t    ) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\")\n\t\t  ) * (-1) as \"order_payout\",\n\n-- Adding Simplilearns payout also - 20230525\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n\t\t\t+  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n\t\t\t) *(max(100-\"payoutPercentage\")/100) ,max(main.\"minPayout\")\n\t\t  ) * (-1) as \"order_payout_to_SL\",\n\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) then 0 \n\t\t\telse LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n     else LEAST ( \n\t\t\t\tabs(\"order_payout\"),\n\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\tcase when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout\")) <=0 then 0\n\t\t\t\telse max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout\")) end\n\t\t\t\t--,99999) -- SP :20220920\n\t\t\t\t)\nend as \"final_pay\",\n\n-- Adding Simplilearns payout also - 20230525\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout_to_SL\") ) then 0 \n\t\t\t\t\t\telse LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout_to_SL\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n\t\t\telse LEAST ( \n\t\t\t\t\t\tabs(\"order_payout_to_SL\"),\n\t\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\t\tcase when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout_to_SL\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL\")) <=0 then 0\n\t\t\t\t\t\telse max(main.\"odr_order_payout\") - (sum(abs(\"order_payout_to_SL\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL\")) end\n\t\t\t\t\t\t--,99999) -- SP :20220920\n\t\t\t\t\t\t)\nend as \"final_pay_to_SL\",\n  \n  \nNULL as \"latest_order_row\",\n'Refund order' as \"Order_tag\",\nNULL as \"serviceTax_INR\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"order_selling_price_USD\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"order_selling_price_INR\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"collection_minus_GST_INR\",  \nNULL as \"POS_subvention_excluded_USD\",\nNULL as \"POS_subvention_excluded_INR\",\nNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"Revenue_for_payout_calculation_INR\" ,\nGREATEST ((sum(main.\"partialRefundAmount\" *main.\"to_inr\") \n\t\t\t+ max( NVL(\"ref_POS_order_selling_price\",0)*main.\"to_inr\") \n\t\t\t) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\")\n\t\t  ) * (-1) as \"order_payout_INR\",\n\n-- Adding Simplilearns payout also - 20230525\nGREATEST ((sum(main.\"partialRefundAmount\" *main.\"to_inr\") \n\t\t\t+ max( NVL(\"ref_POS_order_selling_price\",0)*main.\"to_inr\") \n\t\t\t) *(max(100-\"payoutPercentage\")/100) ,max(main.\"minPayout\")\n\t\t  ) * (-1) as \"order_payout_to_SL_INR\",\n\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout_INR\"),0)) >= LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_INR\") ) then 0 \n\t\t\t\t\t\telse LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_INR\") ) -  ABS(NVL(max(\"refund_payout_INR\"),0)) end\n\t\t\telse LEAST ( \n\t\t\t\t\t\tabs(\"order_payout_INR\"),\n\t\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\t\tcase when max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_INR\")) <=1 then 0\n\t\t\t\t\t\telse max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_INR\")) end\n\t\t\t\t\t\t-- ,99999) -- SP :20220920\n\t\t\t\t\t\t)\nend  as \"final_pay_INR\",\n\n-- Adding Simplilearns payout also - 20230525\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout_INR\"),0)) >= LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_to_SL_INR\") ) then 0 \n\t\t\t\t\t\telse LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_to_SL_INR\") ) -  ABS(NVL(max(\"refund_payout_INR\"),0)) end\n\t\t\telse LEAST ( \n\t\t\t\t\t\tabs(\"order_payout_to_SL_INR\"),\n\t\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\t\tcase when max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_to_SL_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL_INR\")) <=1 then 0\n\t\t\t\t\t\telse max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_to_SL_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL_INR\")) end\n\t\t\t\t\t\t-- ,99999) -- SP :20220920\n\t\t\t\t\t   )\nend  as \"final_pay_to_SL_INR\"\n\nfrom \n(\n\tselect elt2.*, \n\t\todr.\"order_payout\" as \"odr_order_payout\",odr.\"order_payout_INR\" as \"odr_order_payout_INR\" ,\n\t\tref.\"refund_payout_INR\", ref.\"refund_payout\",ref.\"ref_POS_order_selling_price\",\n\t\tpgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n\t\tpgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n\t\tpgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\" ,pgpay_inp.\"maxASP\",\"Revised_Logic_Applicable_Flag\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else elt2.\"paymentCourse\" end as \"mainpaymentCourse\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n\t\t \n\t\tcase when elt2.\"currency\" = 'USD' THEN 1\n\t\t\t\t when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n\t\t\t\t when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\t\tend as \"conv_to_USD\",\n\t\tcase when elt2.\"currency\"='INR' then 1\n\t\t\t\t\t  when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n\t\t\tEND as \"to_inr\",\t\t \n\t\tcase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\t\tend as \"deductionsCurrency_to_USD\"\n\n\tfrom elt2_monthly as elt2\n \n\tLEFT OUTER JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n\ton extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) \n\t\tand extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\t \n\tLEFT JOIN \n\t(\n\t\tselect distinct * from  \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\" \n\t)  pgpay_inp \n\ton elt2.\"Program Name\" = pgpay_inp.\"programName\"      \n\t\tand elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\t\tand elt2.\"order ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") and elt2.\"order ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n\t\tand elt2.\"partialRefundAmount\"/ \"conv_to_USD\" >= pgpay_inp.\"minASP\" \n\t\tand elt2.\"partialRefundAmount\"/ \"conv_to_USD\" <= pgpay_inp.\"maxASP\"\n\t\tand pgpay_inp.\"universityFlag\" is not null \n\t\tand pgpay_inp.\"programName\" is not null\n\t\t\n\tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"order_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"order_payout_INR\" \n\t\tfrom\n\t\t(\tselect \"Email\",\"Program Name\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\"='Order' \n\t\t\t\n\t\t\tunion \n\n\t\t\tselect \"Email\",\"Program Name\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_sf_db_sl_analytics_db}.\"PRODCT_TEMP\".\"university_payout_table_30JUN2022\" \n\t\t\twhere \"order_type\"='Order' \n\t\t)\n\t\tgroup by 1,2,3\n\t) odr \n\ton elt2.\"userEmail\" = odr.\"Email\" \n\t\tand  elt2.\"Program Name\" =  odr.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  odr.\"University_flag\"  \n\t  \n\tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"refund_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"refund_payout_INR\", \n\t\t\t\tsum(\"POS_order_selling_price\") as \"ref_POS_order_selling_price\" \n\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\"\n\t\twhere \"order_type\" like any ('Refund','Chargeback') \n\t\t\tand   \"ndate\" <= '2022-03-31'\n\t\tgroup by 1,2,3  \n\t) ref \n\ton elt2.\"userEmail\" = ref.\"Email\" \n\t\tand  elt2.\"Program Name\" =  ref.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  ref.\"University_flag\"  \n\t  \n\twhere elt2.\"order_type\" like any ('Refund','Chargeback') \n\t/* and elt2.\"userEmail\"||elt2.\"order_type\"||elt2.\"Program Name\"||pgpay_inp.\"universityFlag\"\n\tnot in (select \"Email\"||\"order_type\"||\"Program Name\"||\"University_flag\" from \"PRODCT_TEMP\".\"university_payout_table_30JUN2022\"\n\twhere --upper(\"University_flag\") NOT IN ('IU', 'IIIT BANGALORE') and \n\t\t\t\"final_payout\">0)\n\t*/\n ) main \nwhere  main.\"only_prep_bought\" <> 1 \ngroup by 1,2,3,4,5 \n\thaving (max(main.\"ndate\") >= '2022-01-01'  \n\t\t\tor (max(main.\"ndate\") < '2022-01-01' and upper(\"University_flag\") IN ('IU' ,'IIIT BANGALORE') )\n\t\t\t)\n\nUNION \n\n\nselect main.\"userEmail\" as \"Email\",\nmain.\"order_type\" as \"order_type\",\nmain.\"Program Name\" ,\nmain.\"universityFlag\" as \"University_flag\",\nmax(to_char(main.\"ndate\",'YYYYMM')) as \"year_month\",\nmax(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentDate\" else null end) as \"paymentDate\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"RefundReconciliation_id\" else null end) as \"reconciliation_id\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"ReconcileOption\" else null end) as \"ReconcileOption\",\nmax(main.\"mainrefundedOrderNumber\") as \"orderNumber\",   \nmax( main.\"mainrefundedOrderNumber\" ) as \"refundedOrderNumber\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"currency\" else null end) as \"currency\",\nmax(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentGeo\" else null end) as \"paymentGeo\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentCountry\" else null end) as \"paymentCountry\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentTrainingType\" else null end) as \"paymentTrainingType\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentQueryType\" else null end) as \"paymentQueryType\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentCategory\" else null end) as \"paymentCategory\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"paymentGateway\" else null end) as \"paymentGateway\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"RefundReconciliation_id\" else null end) as \"RefundReconciliation_id\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"refundUnit\" else null end) as \"refundUnit\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"partialRefundAmount\" else null end) as \"partialRefundAmount\" ,\nmax(main.\"ndate\") as \"ndate\",\nNULL as \"EMITerm\",\nNULL as \"fee\",\nNULL as \"applicableOnwards\",\nNULL as \"emi_subvention_rate\", \nNULL as \"TDR\", \nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  -1*main.\"partialRefundAmount\" else null end) as \"POS_subvention_excluded\" ,\nsum(main.\"partialRefundAmount\") as \"POS_order_selling_price\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"GST\" else null end) as \"GST\" ,\nmax(main.\"contract_selling_price\") as \"selling_price\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"deductionsCurrency\" else null end) as \"deductionsCurrency\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"affiliatePaymentCosts\" else null end) as \"affiliatePaymentCosts\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"minPayout\" else null end) as \"minPayout\" ,\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"payoutPercentage\" else null end) as \"payoutPercentage\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"minASP\" else null end) as \"minASP\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"maxASP\" else null end) as \"maxASP\",\nNULL as \"financeCharges\",\nNULL as \"SalesCharges\",\nNULL as \"marketingCharges\",\nNULL as \"voucherCosts\",\nNULL as \"instructorCosts\",\nNULL as \"teachingAssistantsCosts\",\nNULL as \"platformCosts\",\nNULL as \"serviceTax\",\n1 as \"main_course_cd\",\n1 as \"prep_course_cd\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"conv_to_USD\" else null end) as \"conv_to_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"to_inr\" else null end) as \"to_inr\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"deductionsCurrency_to_USD\" else null end) as \"deductionsCurrency_to_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"CourseName\" else null end) as \"CourseName\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"Parent orderNumber\" else null end) as \"Parent_orderNumber\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"MRP_USD\" else null end) as \"MRP_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"parent_collection_USD\" else null end) as \"parent_collection_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"discount_Amount_USD\" else null end) as \"discount_Amount_USD\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"discount_Amount_INR\" else null end) as \"discount_Amount_INR\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"discount_percentage\" else null end) as \"discount_percentage\",\nmax( main.\"maincohort_name\" ) as \"cohort_name\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  extract(year from main.\"ndate\") else null end) as \"yr\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  extract(month from main.\"ndate\") else null end) as \"month\",\nmax(main.\"first_payment_dt\") as \"first_payment_date\",\nmax(case when main.\"first_payment_dt\" = main.\"ndate\" then  main.\"refundedOrderNumber\" else null end) as \"first_order_number\",\nmax(case when main.\"first_payment_dt\" = main.\"ndate\" then  main.\"RefundReconciliation_id\" else null end) as \"first_reconciliation_id\",\nmax(\"latest_payment_dt\") as \"latest_payment_date\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"refundedOrderNumber\" else null end) as \"latest_order_number\",\nmax(case when main.\"latest_payment_dt\" = main.\"ndate\" then  main.\"RefundReconciliation_id\" else null end) as \"latest_reconciliation_id\",\n1 as \"main_course_bought\",\n-1*sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") as \"collection_amount\" ,\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"collection_minus_GST\", \nNULL as \"collection_minus_GST_and_TDR_subvention_costs\",\nNULL as \"Affiliate_payment_cost\",\nNULL as \"FinanceCharges_cost\",\nNULL as \"SalesCharges_cost\",\nNULL as \"MarketingCharges_cost\",\nNULL as \"Voucher_cost\",\nNULL as \"Instructor_cost\",\nNULL as \"TeachingAssistants_cost\",\nNULL as \"Platform_cost\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"Revenue_for_payout_calculation\" ,\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") ) \n\t\t\t*(max(\"payoutPercentage\")/100),max(main.\"minPayout\")\n\t\t ) * (-1) as \"order_payout\",\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") ) \n\t\t\t*(max(100-\"payoutPercentage\")/100),max(main.\"minPayout\")\n\t\t ) * (-1) as \"order_payout_to_SL\",\nLEAST(abs(\"order_payout\"),max(NVL(\"odr_order_payout\",999999999)))*-1 as \"final_pay\",\nLEAST(abs(\"order_payout_to_SL\"),max(NVL(\"odr_order_payout\",999999999)))*-1 as \"final_pay_to_SL\",\nNULL as \"latest_order_row\",\n'Refund order' as \"Order_tag\",\nNULL as \"serviceTax_INR\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"order_selling_price_USD\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"order_selling_price_INR\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"collection_minus_GST_INR\",  \nNULL as \"POS_subvention_excluded_USD\",\nNULL as \"POS_subvention_excluded_INR\",\nNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"Revenue_for_payout_calculation_INR\" ,\nGREATEST ((sum(main.\"partialRefundAmount\"*main.\"to_inr\") ) \n\t\t\t*(max(\"payoutPercentage\")/100),max(main.\"minPayout\")\n\t\t ) * (-1) as \"order_payout_INR\",\n\n-- Adding Simplilearns payout also - 20230525\nGREATEST ((sum(main.\"partialRefundAmount\"*main.\"to_inr\") ) \n\t\t\t*(max(100-\"payoutPercentage\")/100),max(main.\"minPayout\")\n\t\t ) * (-1) as \"order_payout_to_SL_INR\",\n\nLEAST(abs(\"order_payout_INR\"),max(NVL(\"odr_order_payout_INR\",999999999))) * -1 as \"final_pay_INR\",\n\n-- Adding Simplilearns payout also - 20230525\nLEAST(abs(\"order_payout_to_SL_INR\"),max(NVL(\"odr_order_payout_INR\",999999999))) * -1 as \"final_pay_to_SL_INR\"\n\nfrom \n(\n\tselect \n\t\telt2.*, odr.\"order_payout\" as \"odr_order_payout\",odr.\"order_payout_INR\" as \"odr_order_payout_INR\",pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n\t\tpgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n\t\tpgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\" ,pgpay_inp.\"maxASP\",\"Revised_Logic_Applicable_Flag\",\n\t\tcase when lower(\"paymentCourse\") like '%getting started%' then NULL else \"paymentCourse\" end as \"mainpaymentCourse\",\n\t\tcase when lower(\"paymentCourse\") like '%getting started%' then NULL else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n\t\tcase when lower(\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n\n\t\tcase when elt2.\"currency\" = 'USD' THEN 1\n\t\t\t when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n\t\t\t when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n\t\t\t when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n\t\t\t when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n\t\t\t when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n\t\t\t when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"conv_to_USD\",\n\t\tcase when elt2.\"currency\"='INR' then 1\n\t\t\t\t  when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n\t\t\t\t  when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n\t\t\t\t  when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n\t\t\t\t  when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n\t\t\t\t  when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n\t\tend as \"to_inr\",\t\t \n\t\tcase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"deductionsCurrency_to_USD\"\n\n\n\tfrom elt2\n\t \n\tLEFT OUTER JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n\ton extract(year from elt2.\"ndate\") = extract(year from to_date(rate.\"Month\")) \n\t\tand extract(month from elt2.\"ndate\") = extract(month from to_date(rate.\"Month\"))\n\t \n\tLEFT JOIN  \n\t(\n\t\tselect distinct * from  \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\" \n\t)  pgpay_inp \n\ton elt2.\"Program Name\" = pgpay_inp.\"programName\"      \n\t\tand elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\t\tand elt2.\"order ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n\t\tand elt2.\"order ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" >= pgpay_inp.\"minASP\" \n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" <= pgpay_inp.\"maxASP\"\n\t\tand pgpay_inp.\"universityFlag\" is not null \n\t\tand pgpay_inp.\"programName\" is not null\n\t\t\n\tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"order_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"order_payout_INR\" \n\t\t\t\tfrom\n\t\t\t\t(\t\n\t\t\t\t\tselect \"Email\",\"Program Name\",\"University_flag\" ,\n\t\t\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\t\t\twhere \"order_type\"='Order' \n\t\t\t\t\t\n\t\t\t\t\tunion \n\t\t\t\t\t\n\t\t\t\t\tselect \"Email\",\"Program Name\",\"University_flag\" ,\n\t\t\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\t\t\tfrom  ${ev_sf_db_sl_analytics_db}.\"PRODCT_TEMP\".\"university_payout_table_30JUN2022\" \n\t\t\t\t\twhere \"order_type\"='Order' \n\t\t\t\t)\n\t\t\t\tgroup by 1,2,3\n\t) odr \n\ton elt2.\"userEmail\" = odr.\"Email\" \n\t\tand  elt2.\"Program Name\" =  odr.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  odr.\"University_flag\"  \n\twhere    elt2.\"order_type\" like any ('Refund','Chargeback') \n\t/* and elt2.\"userEmail\"||elt2.\"order_type\"||elt2.\"Program Name\"||pgpay_inp.\"universityFlag\"\n\tnot in (select \"Email\"||\"order_type\"||\"Program Name\"||\"University_flag\" from \"PRODCT_TEMP\".\"university_payout_table_30JUN2022\"\n\twhere --upper(\"University_flag\") NOT IN ('IU', 'IIIT BANGALORE') and \n\t\t\t\"final_payout\">0)\n\t*/ \n) main\nwhere  main.\"only_prep_bought\" <> 1 \ngroup by 1,2,3,4 \n\thaving (max(main.\"ndate\") >= '2022-01-01'  \n\t\t\tor (max(main.\"ndate\") < '2022-01-01' and upper(\"University_flag\") IN ('IU', 'IIIT BANGALORE'))\n\t\t\t)\n;\n\nupdate \"PRODCT_TEMP\".\"pg_university_payout_refunds\" \n\tset \"Revenue_for_payout_calculation\" = 0 , \"order_payout\" =0 ,\"final_pay\"=0,\n\t\t\"Revenue_for_payout_calculation_INR\"=0,\"order_payout_INR\"=0 \nwhere \"Email\" = 'axelniu@gmail.com' \n\tand \"University_flag\" = 'Purdue' \n\tand \"Program Name\" = 'Professional Certificate Program in Business Analysis';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591234":{"id":2591234,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":702,"y":141,"width":32,"height":32,"inputConnectorIDs":[2591226],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_freezed_table_till_last_month_20230303"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--create or replace table SL_ANALYTICS_DB.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\" as\n--select * from \"DEV_SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\";\n\n\n--alter table SL_ANALYTICS_DB.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n--add column \"enrollment_rn\" number;\n\n\nupdate ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\nset \"Program Name\" = 'Professional Certificate Program in Cloud Computing and DevOps - IITG'\n, \"paymentCourse\" = 'Professional Certificate Program in Cloud Computing and DevOps - IITG'\n\nwhere \"Program Name\" = 'Professional Certificate Program in Cloud Computing and DevOps'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591235":{"id":2591235,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-208,"y":336,"width":32,"height":32,"inputConnectorIDs":[2591230],"outputSuccessConnectorIDs":[2591228],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pg_university_payout_refund"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"------- Select statement starts at line no - 9 , 28 ----------\n---------- RefundUPG logic added to the last -----------------\n\ncreate or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_refunds\" as\n\n--------------------------------------------------------------\n----------- Data with old logic till 11th Dec 2023 -----------\n--------------------------------------------------------------\nselect *,\n    NULL \"first_lvc_attended_date\",\n    NULL At_least_1_LVC_attended\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_refunds_stg\"\nwhere \"paymentDate\" < '2023-12-11' --and \"ndate\" < '2023-12-01'\n\t-- updated the logic for DE:3061 : 2023-12-04\n\tor \"Revised_Logic_Applicable_Flag\" ilike 'no'\n\nunion\n\n--------------------------------------------------------------\n----------- Data with new logic from 11th Dec 2023 -----------\n--------------------------------------------------------------\nselect *\nfrom \n(\n-------------------------------------------------\n------------ UPG orders handling ----------------\n-------------------------------------------------\nwith elt2_with_upg_orders as\n(\nselect distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg2.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg2.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom\n        \n    (select distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n\t\t\t\tand \"refundedOrderNumber\" is not null\n                and \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level of upgrades ------------------\n  \t\t-----------------------------------------------------------\n  \t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n                and \"refundedOrderNumber\" is not null\n\t\t\t\tand \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"RefundReconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\n---------------------------------------------------\n----------------- Main Refunds Module -------------\n---------------------------------------------------\nelt2_monthly as \n(\n\tselect a.* exclude(\"cohort_name\"), --gst.\"GST\",\n  \t\tNULL as GST,\n  \t\tC.\"cohort_name\" as \"cohort_name\",\n\t\t--max(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"latest_payment_dt\",\n  \t\t\"order_latest_pdate\"  as \"latest_payment_dt\",\n\t\t--min(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"first_payment_dt\",\n\t\t\"ndate\" as \"first_payment_dt\",\n  \t\tcase when lower(\"paymentCourse\") like '%getting started%' and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",a.\"Program Name\") = 1 then 1\n\t\t\tElse 0 end as \"only_prep_bought\",   \n\t\t\n\t\tcase when a.\"reconciliation_id\" is not null then 'Order' \n\t\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\t\telse NULL end as \"order_type\",\n\t\tb.\"order ndate\",\n\t\t\"first_lvc_attended_date\",\n\t\tAt_least_1_LVC_attended\n\n\tfrom elt2_with_upg_orders a \n\t \n  \t-----------------------------------------------------------\n  \t--------- getting orders for refund payout ----------------\n  \t-----------------------------------------------------------\n  \tinner join \n\t( \n\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\n\t\t\t\tmin(\"ndate\") as \"order ndate\" , \n      \t\t\tmin(\"latest_payment_date\") \"order_latest_pdate\",\n\t\t\t\tmin(\"first_lvc_attended_date\") \"first_lvc_attended_date\",\n\t\t\t\tmin(At_least_1_LVC_attended) At_least_1_LVC_attended \n\t\tfrom \n\t\t(\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\",\"first_lvc_attended_date\",At_least_1_LVC_attended \n\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\" ='Order' \n\t\t\t\tand At_least_1_LVC_attended = 1 \n\t\t\t\tand \"Revised_Logic_Applicable_Flag\" ilike 'yes' \n\t\t\t\tand \"latest_payment_date\" >= '2023-12-11' \n\t\t) group by 1,2,3\n\t) b \n\ton a.\"userEmail\" = b.\"Email\" \n\t\tand a.\"Program Name\" = b.\"Program Name\"\n  \t\tand a.\"RefundReconciliation_id\" = b.\"reconciliation_id\"\n\n    -----------------------------------------------------------\n  \t------ To get the Cohort Name at User-Program level -------\n\t-----------------------------------------------------------\n  \tleft outer join \n\t(\n\t\tselect lower(B.\"mail\") as \"userEmail\" ,A.\"program_id\", NVL( max(\"cohort_name\") ,\n\t\t\tmax(case when A.\"cohort_id\" =0 and A.\"active_cohort_id\"=0 then 'Flexi Learners'\n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\"=0 then 'Cohort to Flexi'\n\t\t\twhen A.\"cohort_id\" =0 and A.\"active_cohort_id\">0 then 'Flexi to Cohort'\n\t\t\twhen A.\"cohort_id\" <> A.\"active_cohort_id\" then 'Cohort Learner (Cohort Change Processed)' \n\t\t\twhen A.\"cohort_id\" >0 and A.\"active_cohort_id\">0 then 'Cohort Learner (No Cohort Change)'\n\t\t\telse null end ) ) as \"cohort_name\"\n\t\tfrom \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_learner_program\" A\n\t\t\n\t\tinner join  \"SL_ANALYTICS_DB\".\"CLOUD6\".\"target_users\"   B \n\t\ton B.\"uid\"  = A.\"user_id\" \n\t\t\n\t\tleft outer join \"SL_ANALYTICS_DB\".\"JUPITER\".\"target_cohort\" C \n\t\ton A.\"active_cohort_id\" = C.\"id\"\n\t\t\n\t\tgroup by 1,2\n\t) C \n\ton C.\"userEmail\"= lower(a.\"userEmail\") \n\t\tand C.\"program_id\" = a.\"course ID\"  \n\t\tand a.\"initialProductType_id\" in (2,3)\n\t\t\n\twhere a.\"refundedOrderNumber\" is not null \n\t\tand \"partialRefundAmount\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad') \n\t\tand a.\"ndate\">= '2023-12-01' -- '2022-07-01' --\n)\n\n\n--------------------------------------------------------------------------------------\n---------- Aggregations and derivations for refund payout calculations ---------------\n--------------------------------------------------------------------------------------\nselect \nmain.\"userEmail\" as \"Email\",\nmain.\"order_type\" as \"order_type\",\nmain.\"Program Name\" ,\nmain.\"universityFlag\" as \"University_flag\",\nto_char(main.\"ndate\",'YYYYMM') as \"year_month\",\nmain.\"RefundReconciliation_id\" as \"reconciliation_id\",\n  max(\"mapped_reconciliation_id\") \"mapped_reconciliation_id\", -- Added on 20240305 :SP\nmax(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\nmax(  main.\"paymentDate\" ) as \"paymentDate\",\n--max(  main.\"RefundReconciliation_id\") as \"reconciliation_id\",\nmax(  main.\"ReconcileOption\") as \"ReconcileOption\",\nmax(main.\"mainrefundedOrderNumber\") as \"orderNumber\",   \nmax( main.\"mainrefundedOrderNumber\" ) as \"refundedOrderNumber\",\nmax(  main.\"currency\" ) as \"currency\",\n  max(main.\"Program Type\") \"Program Type\", -- Added on 20240305\nmax(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\nmax(  main.\"paymentGeo\") as \"paymentGeo\" ,\nmax(  main.\"paymentCountry\" ) as \"paymentCountry\" ,\nmax( main.\"paymentTrainingType\" ) as \"paymentTrainingType\" ,\nmax(  main.\"paymentQueryType\" ) as \"paymentQueryType\" ,\nmax(  main.\"paymentCategory\" ) as \"paymentCategory\" ,\nmax(  main.\"paymentGateway\") as \"paymentGateway\" ,\nmax(  main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\" ,\nmax(main.\"refundUnit\" ) as \"refundUnit\" ,\nmax(  main.\"partialRefundAmount\" ) as \"partialRefundAmount\" ,\nmax(greatest(main.\"ndate\",\"first_lvc_attended_date\")) as \"ndate\", -- updated the logic for DE:3061 : 2023-12-04\nNULL as \"EMITerm\",\nNULL as \"fee\",\nNULL as \"applicableOnwards\",\nNULL as \"emi_subvention_rate\", \nNULL as \"TDR\", \nmax(-1*main.\"partialRefundAmount\" ) as \"POS_subvention_excluded\" ,\nsum(main.\"partialRefundAmount\") as \"POS_order_selling_price\" ,\nmax(  main.\"GST\" ) as \"GST\" ,\nmax(main.\"contract_selling_price\") as \"selling_price\",\nmax( main.\"deductionsCurrency\" ) as \"deductionsCurrency\" ,\nmax(  main.\"affiliatePaymentCosts\" ) as \"affiliatePaymentCosts\" ,\nmax(  main.\"minPayout\" ) as \"minPayout\" ,\nmax(main.\"payoutPercentage\" ) as \"payoutPercentage\",\nmax(  main.\"minASP\") as \"minASP\",\nmax( main.\"maxASP\" ) as \"maxASP\",\nNULL as \"financeCharges\",\nNULL as \"SalesCharges\",\nNULL as \"marketingCharges\",\nNULL as \"voucherCosts\",\nNULL as \"instructorCosts\",\nNULL as \"teachingAssistantsCosts\",\nNULL as \"platformCosts\",\nNULL as \"serviceTax\",\n1 as \"main_course_cd\",\n1 as \"prep_course_cd\",\nmax(  main.\"conv_to_USD\") as \"conv_to_USD\",\nmax(  main.\"to_inr\" ) as \"to_inr\",\nmax(  main.\"deductionsCurrency_to_USD\" ) as \"deductionsCurrency_to_USD\",\nmax(  main.\"CourseName\" ) as \"CourseName\",\nmax(  main.\"Parent orderNumber\" ) as \"Parent_orderNumber\",\nmax(  main.\"MRP_USD\" ) as \"MRP_USD\",\nmax(  main.\"parent_collection_USD\" ) as \"parent_collection_USD\",\nmax(  main.\"discount_Amount_USD\" ) as \"discount_Amount_USD\",\nmax(  main.\"discount_Amount_INR\" ) as \"discount_Amount_INR\",\nmax( main.\"discount_percentage\") as \"discount_percentage\",\nmax( main.\"maincohort_name\" ) as \"cohort_name\",\nmax(  extract(year from main.\"ndate\") ) as \"yr\",\nmax( extract(month from main.\"ndate\")) as \"month\",\nmax(main.\"first_payment_dt\") as \"first_payment_date\",\nmax( main.\"refundedOrderNumber\") as \"first_order_number\",\nmax(main.\"RefundReconciliation_id\" ) as \"first_reconciliation_id\",\ngreatest(max(\"latest_payment_dt\"),max(\"ndate\")) as \"latest_payment_date\",\nmax( main.\"refundedOrderNumber\" ) as \"latest_order_number\",\nmax( main.\"RefundReconciliation_id\" ) as \"latest_reconciliation_id\",\n1 as \"main_course_bought\",\n-1*sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") as \"collection_amount\" ,\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"collection_minus_GST\", \nNULL as \"collection_minus_GST_and_TDR_subvention_costs\",\nNULL as \"Affiliate_payment_cost\",\nNULL as \"FinanceCharges_cost\",\nNULL as \"SalesCharges_cost\",\nNULL as \"MarketingCharges_cost\",\nNULL as \"Voucher_cost\",\nNULL as \"Instructor_cost\",\nNULL as \"TeachingAssistants_cost\",\nNULL as \"Platform_cost\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"Revenue_for_payout_calculation\" ,\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n\t\t\t+  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n\t\t\t) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\"/main.\"conv_to_USD\")\n\t\t  ) * (-1) as \"order_payout\",\n\n-- Adding Simplilearns payout also - 20230525\nGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n\t\t\t+  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n\t\t\t) *(max(100-\"payoutPercentage\")/100) ,max(main.\"minPayout\"/main.\"conv_to_USD\")\n\t\t  ) * (-1) as \"order_payout_to_SL\",\n\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) then 0 \n\t\t\t\t\t  else LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n\t\t  else LEAST ( \n\t\t\t\t\t\tabs(\"order_payout\"),\n\t\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\t\tcase when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout\")) <=0 then 0\n\t\t\t\t\t\telse max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout\")) end\n\t\t\t\t\t\t--,99999) -- SP :20220920\n\t\t\t\t\t )\n  end as \"final_pay\",\n\n-- Adding Simplilearns payout also - 20230525\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when  ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout_to_SL\") ) then 0 \n\t\t\t\t\t  else LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout_to_SL\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n\t\telse LEAST ( \n\t\t\t\t\tabs(\"order_payout_to_SL\"),\n\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\tcase when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout_to_SL\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL\")) <=0 then 0\n\t\t\t\t\telse max(main.\"odr_order_payout\") - (sum(abs(\"order_payout_to_SL\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL\")) end\n\t\t\t\t\t--,99999) -- SP :20220920\n\t\t\t\t\t)\n  end as \"final_pay_to_SL\",\n  \n  \nNULL as \"latest_order_row\",\n'Refund order' as \"Order_tag\",\nNULL as \"serviceTax_INR\",\nsum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") * (-1) as \"order_selling_price_USD\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"order_selling_price_INR\", \nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"collection_minus_GST_INR\",  \nNULL as \"POS_subvention_excluded_USD\",\nNULL as \"POS_subvention_excluded_INR\",\nNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\nsum(main.\"partialRefundAmount\"*main.\"to_inr\") * (-1) as \"Revenue_for_payout_calculation_INR\" ,\nGREATEST ((sum(main.\"partialRefundAmount\" *main.\"to_inr\") \n\t\t\t+ max( NVL(\"ref_POS_order_selling_price\",0)*main.\"to_inr\") \n\t\t\t) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\"*main.\"to_inr\")\n\t\t  ) * (-1) as \"order_payout_INR\",\n\n-- Adding Simplilearns payout also - 20230525\nGREATEST ((sum(main.\"partialRefundAmount\" *main.\"to_inr\") \n\t\t\t+ max( NVL(\"ref_POS_order_selling_price\",0)*main.\"to_inr\") \n\t\t\t) *(max(100-\"payoutPercentage\")/100) ,max(main.\"minPayout\"*main.\"to_inr\")\n\t\t  ) * (-1) as \"order_payout_to_SL_INR\",\n\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when ABS(NVL(max(\"refund_payout_INR\"),0)) >= LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_INR\") ) then 0 \n\t\t\t\t\t  else LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_INR\") ) -  ABS(NVL(max(\"refund_payout_INR\"),0)) end\n\t\telse LEAST ( \n\t\t\t\t\tabs(\"order_payout_INR\"),\n\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\tcase when max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_INR\")) <=1 then 0\n\t\t\t\t\telse max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_INR\")) end\n\t\t\t\t\t-- ,99999) -- SP :20220920\n\t\t\t\t\t)\n  end  as \"final_pay_INR\",\n\n-- Adding Simplilearns payout also - 20230525\n-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) = 1 \n\t\t\tthen case when ABS(NVL(max(\"refund_payout_INR\"),0)) >= LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_to_SL_INR\") ) then 0 \n\t\t\t\t\t  else LEAST(max(main.\"odr_order_payout_INR\"),abs(\"order_payout_to_SL_INR\") ) -  ABS(NVL(max(\"refund_payout_INR\"),0)) end\n\t\telse LEAST ( \n\t\t\t\t\tabs(\"order_payout_to_SL_INR\"),\n\t\t\t\t\t--ifnull( -- SP :20220920\n\t\t\t\t\tcase when max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_to_SL_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL_INR\")) <=1 then 0\n\t\t\t\t\telse max(main.\"odr_order_payout_INR\") - (sum(abs(\"order_payout_to_SL_INR\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"ndate\",'YYYYMM')) - abs(\"order_payout_to_SL_INR\")) end\n\t\t\t\t\t-- ,99999) -- SP :20220920\n\t\t\t\t\t)\n  end  as \"final_pay_to_SL_INR\"\n  \n,max(\"first_lvc_attended_date\") \"first_lvc_attended_date\",\nmax(At_least_1_LVC_attended) At_least_1_LVC_attended\n\nfrom \n(\n\n--------------------------------------------------------------------------------------\n---------- Mapping refunds with university programs and currency conversions ---------\n--------------------------------------------------------------------------------------\n\tselect elt2.*, odr.\"order_payout\" as \"odr_order_payout\",odr.\"order_payout_INR\" as \"odr_order_payout_INR\" ,ref.\"refund_payout_INR\", ref.\"refund_payout\",\n\t\tref.\"ref_POS_order_selling_price\",pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n\t\tpgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n\t\tpgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\" ,pgpay_inp.\"maxASP\",\"Revised_Logic_Applicable_Flag\",\n\t\t/*case when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else elt2.\"paymentCourse\" end as \"mainpaymentCourse\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n\t\t */\n  \t\tcase when \"only_prep_bought\" = 1 then NULL \n            else \"paymentCourse\" end as \"mainpaymentCourse\",\n        case when \"only_prep_bought\" = 1 then NULL \n            else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n        case when \"only_prep_bought\" = 1 then NULL \n            else \"cohort_name\" end as \"maincohort_name\",\n  \n\t\tcase when elt2.\"currency\" = 'USD' THEN 1\n\t\t\t\t when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n\t\t\t\t when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"conv_to_USD\",\n\t\tcase when elt2.\"currency\"='INR' then 1\n\t\t\t\t\t  when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n\t\tend as \"to_inr\",\t\t \n\t\tcase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"deductionsCurrency_to_USD\"\n\n\tfrom elt2_monthly as  elt2\n\t \n  \t---------------------------------------------------------------------------------------------------\n\t------------ Finance Control_Currency Conversion sheet for monthly conversion values --------------\n\t---------------------------------------------------------------------------------------------------\n\tLEFT OUTER JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n\ton extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) \n\t\tand extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\t \n  \t-----------------------------------------------------------------------------\n\t------------ PG payouts input sheet owned by product team -------------------\n\t-----------------------------------------------------------------------------\n  \tLEFT JOIN \n\t(\n\t\tselect distinct * from  \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\" \n\t)  pgpay_inp \n\ton elt2.\"Program Name\" = pgpay_inp.\"programName\"      \n\t\tand elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\t\tand elt2.\"order ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n\t\tand elt2.\"order ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" >= pgpay_inp.\"minASP\" \n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" <= pgpay_inp.\"maxASP\"\n\t\tand pgpay_inp.\"universityFlag\" is not null \n\t\tand pgpay_inp.\"programName\" is not null\n\t\t\n  \t\n\t-----------------------------------------------------------------------------\n  \t------------------ To get the orders payout for the same purchase -----------\n  \t-----------------------------------------------------------------------------\t\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"order_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"order_payout_INR\" \n\t\tfrom\n\t\t(\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\"='Order' \n         \n         \tunion \n\n\t\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\"='Order' \n\t\t\t\n\t\t)\n\t\tgroup by 1,2,3,4\n\t) odr \n\ton elt2.\"userEmail\" = odr.\"Email\" \n\t\tand  elt2.\"Program Name\" =  odr.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  odr.\"University_flag\"  \n  \t\tand elt2.\"RefundReconciliation_id\" =  odr.\"reconciliation_id\"   \n\t  \n \t-----------------------------------------------------------------------------\n  \t------ To get the previously made refund payouts for the same purchase ------\n  \t-----------------------------------------------------------------------------\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"RefundReconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"refund_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"refund_payout_INR\", \n\t\t\t\tsum(\"POS_order_selling_price\") as \"ref_POS_order_selling_price\" \n\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\"\n\t\twhere \"order_type\" like any ('Refund','Chargeback') \n\t\t\tand \"ndate\" <= '2022-03-31'\n\t\tgroup by 1,2,3,4\n\t) ref \n\ton elt2.\"userEmail\" = ref.\"Email\" \n\t\tand elt2.\"Program Name\" =  ref.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  ref.\"University_flag\" \n  \t\tand elt2.\"RefundReconciliation_id\" =  ref.\"RefundReconciliation_id\" \n\t  \n\twhere elt2.\"order_type\" like any ('Refund','Chargeback')\n\n) main \nwhere  main.\"only_prep_bought\" <> 1 \ngroup by 1,2,3,4,5,6\n\thaving (max(main.\"ndate\") >= '2022-01-01'  \n\t\t\tor (max(main.\"ndate\") < '2022-01-01' and upper(\"University_flag\") IN ('IU' ,'IIIT BANGALORE') ))\n)\n\nwhere \"paymentDate\" >= '2023-12-11' \n\tand \"ndate\" >= '2023-12-11' -- updated the logic for DE:3061 : 2023-12-04\n;\n\n\n\n\n----------------------------------------------------------\n------------ Inserting upg refunds------------------------\n----------------------------------------------------------\n\ninsert into ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_refunds\"\n(\"Email\",\"University_flag\",\"order_type\",\"orderNumber\",\"refundedOrderNumber\",\"reconciliation_id\",\"RefundReconciliation_id\",\n \"paymentCountry\",\"Program Name\",\"paymentCourse\",\"paymentGeo\",\"latest_payment_date\",\"POS_order_selling_price\",\"ndate\",\n \"order_selling_price_USD\",\"order_selling_price_INR\",\"collection_amount\",\"Revenue_for_payout_calculation\",\n \"Revenue_for_payout_calculation_INR\",\"order_payout\",\"final_pay\",\"order_payout_INR\",\"final_pay_INR\")\n \nselect distinct\n    frzd.\"Email\",\n    frzd.\"University_flag\",\n    'RefundUPG' \"order_type\",\n    frzd.\"orderNumber\",\n    frzd.\"orderNumber\" \"refundedOrderNumber\",\n    frzd.\"reconciliation_id\",\n    frzd.\"reconciliation_id\" \"RefundReconciliation_id\",\n    frzd.\"paymentCountry\",\n    frzd.\"Program Name\",\n    frzd.\"paymentCourse\",\n    frzd.\"paymentGeo\",\n    ord.\"latest_payment_date\" \"latest_payment_date\",\n    -1 * frzd.\"POS_order_selling_price\" \"POS_order_selling_price\",\n    ord.\"ndate\",\n    -1 * frzd.\"order_selling_price_USD\" \"order_selling_price_USD\",\n    -1 * frzd.\"order_selling_price_INR\" \"order_selling_price_INR\",\n    -1 * frzd.\"collection_amount\" \"collection_amount\",\n    -1 * frzd.\"Revenue_for_payout_calculation\" \"Revenue_for_payout_calculation\",\n    -1 * frzd.\"Revenue_for_payout_calculation_INR\" \"Revenue_for_payout_calculation_INR\",\n    -1 * frzd.\"order_payout\" \"order_payout\",\n    -1 * frzd.\"final_payout\" \"final_pay\",\n    -1 * frzd.\"order_payout_INR\" \"order_payout_INR\",\n    -1 * frzd.\"final_payout_INR\" \"final_pay_INR\" \nfrom\n    ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\" frzd\n    inner join ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" ord ON frzd.\"Email\" = ord.\"Email\"\n    and frzd.\"reconciliation_id\" = ord.\"mapped_reconciliation_id\" \nwhere\n    ord.\"orderNumber\" not ilike '%repeat%'\n    and frzd.\"University_flag\" is not null\n    and (frzd.\"Email\",'RefundUPG',frzd.\"orderNumber\",frzd.\"reconciliation_id\") not in \n    \t(\n        select \"Email\",\"order_type\",\"refundedOrderNumber\",\"RefundReconciliation_id\"\n        \tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n            where \"order_type\" = 'RefundUPG'\n    \t)\norder by 1,2,4\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591236":{"id":2591236,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-480,"y":336,"width":32,"height":32,"inputConnectorIDs":[2591208],"outputSuccessConnectorIDs":[2591216],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pg_university_payout_orders"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"----------- Select statement starts at line no - 21 ------------------\n\ncreate or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" as\n\n------------------------------------------------------------------------\n--------- CTE for getting the lvc attended flag with date --------------\n------------------------------------------------------------------------\nwith session_attended_CTE as \n(\n  select distinct csa.email,dim.\"Program Name\" program_name\n  ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n  ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n  from sl_analytics_db.user_journey.\"Cohort_Session_Attendance_Final\" csa\n  left join\n  (\n\t  select \"Course\",\"Program Name\" \n\t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n\t  group by 1,2 \n  ) dim\n  on  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n  \n),\n\n---------------------------------------------------------------------------------\n----------- Final union for orders with old and new lvc logic -------------------\n---------------------------------------------------------------------------------\nfinal_table_cte_ as\n(\nselect * exclude(\"payoutPercentage\"),\n  max(case when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 1 and 230 then 20\n                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 231 and 500 then 15\n                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 501 and 715 then 12\n                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" > 715 then 10\n      \t\t\telse \"payoutPercentage\" end) \n  \t\t\tover (partition by \"Email\",\"order_type\",\"Program Name\",\"University_flag\",\"reconciliation_id\") as \"payoutPercentage\"  \n  from\n  (\n  select * \n    /*,case when \"University_flag\" ilike '%ihub%' then \n      \tdense_rank() over (partition by \"University_flag\" order by \"order_rank\") \n      else null end \"enrollment_rn\"*/\n    ,case when \"University_flag\" ilike '%ihub%' then \n                row_number() over (partition by \"University_flag\" order by \"latest_payment_date\", \"reconciliation_id\",\"Email\") \n  \t\t\telse null end \"enrollment_rn\"\n  from \n  (\n      select ord.* exclude(\"latest_payment_date\") , \n          \"latest_payment_date\",\n          \"latest_payment_date\" \"old_latest_payment_date\",\n          NULL \"first_lvc_attended_date\",\n          NULL At_least_1_LVC_attended\n      from ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders_stg\" ord\n      where \"ndate\" < '2023-12-11' or \"Revised_Logic_Applicable_Flag\" ilike 'no'\n\n      union\n\n      select ord.* exclude(\"latest_payment_date\") ,\n          greatest(first_lvc_attended_date,\"latest_payment_date\") \"latest_payment_date\",\n          \"latest_payment_date\" \"old_latest_payment_date\",\n          first_lvc_attended_date \"first_lvc_attended_date\",\n          At_least_1_LVC_attended\n      from ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders_stg\" ord\n\n      left join\n      session_attended_CTE as csa\n      ON ord.\"Email\" = csa.email and trim(csa.program_name) = trim(ord.\"Program Name\")\n\n      where At_least_1_LVC_attended = 1 and \"Revised_Logic_Applicable_Flag\" ilike 'yes' and \"ndate\" >= '2023-12-11' \n  )\n\n  ------------------------------------------------------------------------------\n  --------------- Excluding the only getting started purchases -----------------\n  ------------------------------------------------------------------------------\n  qualify min(case when \"paymentCourse\" ilike '%getting%started%' or \"paymentCourse\" ilike '%complement%' then 'zzzzz' else  \"paymentCourse\" end) \n              over (partition by \"Email\",\"University_flag\",\"Program Name\") not ilike 'zzzzz'\n  )\n)\nselect \n* \n,\ncase when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n          then \"collection_minus_GST\"\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and \"paymentGateway\" <> 'CardLessEmi_Liquiloan' \n          then \"collection_minus_GST\" -- Added on 2023-05-30 : By SP - LI-510\n      else (\"collection_minus_GST_and_TDR_subvention_costs\" - \n              \"Affiliate_payment_cost\" - \n              \"FinanceCharges_cost\" - \n              \"SalesCharges_cost\" - \n              \"MarketingCharges_cost\" - \n              \"Voucher_cost\" - \n              \"Instructor_cost\" - \n              \"TeachingAssistants_cost\" - \n              \"Platform_cost\")\n  end as \"Revenue_for_payout_calculation\" ,\n\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n          then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100) \n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n          then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100)  -- Added on 2023-05-30 : By SP - LI-510\n      else  GREATEST((\"collection_minus_GST_and_TDR_subvention_costs\" - \n                      \"Affiliate_payment_cost\" - \n                      \"FinanceCharges_cost\" - \n                      \"SalesCharges_cost\" - \n                      \"MarketingCharges_cost\" - \n                      \"Voucher_cost\" - \n                      \"Instructor_cost\" - \n                      \"TeachingAssistants_cost\" - \n                      \"Platform_cost\"\n                      )* \n                      (main.\"payoutPercentage\" /100)\n              ,  (main.\"minPayout\" / main.\"deductionsCurrency_to_USD\") ) \n  end as \"order_payout\" ,\n\n\n  -- Adding Simplilearns payout also - 20230525\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n          then \"collection_minus_GST\" * (( 100-main.\"payoutPercentage\" )/100) \n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n          then \"collection_minus_GST\" * (( 100-main.\"payoutPercentage\" )/100)  -- Added on 2023-05-30 : By SP - LI-510\n      else  GREATEST((\"collection_minus_GST_and_TDR_subvention_costs\" - \n                      \"Affiliate_payment_cost\" - \n                      \"FinanceCharges_cost\" - \n                      \"SalesCharges_cost\" - \n                      \"MarketingCharges_cost\" - \n                      \"Voucher_cost\" - \n                      \"Instructor_cost\" - \n                      \"TeachingAssistants_cost\" - \n                      \"Platform_cost\"\n                      )* \n                      ((100-main.\"payoutPercentage\" )/100)\n              , (main.\"minPayout\" / main.\"deductionsCurrency_to_USD\") )\n  end as \"order_payout_to_SL\" ,\n\n\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n          then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100)\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n          then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n      else  GREATEST((\"collection_minus_GST_and_TDR_subvention_costs\" - \n                      \"Affiliate_payment_cost\" - \n                      \"FinanceCharges_cost\" - \n                      \"SalesCharges_cost\" - \n                      \"MarketingCharges_cost\" - \n                      \"Voucher_cost\" - \n                      \"Instructor_cost\" - \n                      \"TeachingAssistants_cost\" - \n                      \"Platform_cost\"\n                      )* \n                      ((main.\"payoutPercentage\" )/100)\n              , case when (\"paymentCourse\") ilike '%getting%started%' and (\"upt_final_payout\" )>((main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) then 0\n                     else (main.\"minPayout\" / main.\"deductionsCurrency_to_USD\") end) \n  end as \"final_pay\",\n\n\n  -- Adding Simplilearns payout also - 20230525\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n          then \"collection_minus_GST\" * ((100-main.\"payoutPercentage\" )/100)\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n      \t  then \"collection_minus_GST\" * ((100-main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n      else  GREATEST((\"collection_minus_GST_and_TDR_subvention_costs\" - \n                      \"Affiliate_payment_cost\" - \n                      \"FinanceCharges_cost\" - \n                      \"SalesCharges_cost\" - \n                      \"MarketingCharges_cost\" - \n                      \"Voucher_cost\" - \n                      \"Instructor_cost\" - \n                      \"TeachingAssistants_cost\" - \n                      \"Platform_cost\"\n                      )* \n                      ((100-main.\"payoutPercentage\" )/100)\n              , case when (\"paymentCourse\") ilike '%getting%started%' and (\"upt_final_payout\" )>((main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) then 0\n                     else (main.\"minPayout\" / main.\"deductionsCurrency_to_USD\") end) \n  end as \"final_pay_to_SL\",\n  \ncase when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP   \t\n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" )\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" ) -- Added on 2023-05-30 : By SP - LI-510\n      else (\"POS_subvention_excluded_INR\" - main.\"serviceTax_INR\" ) - \n          (main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \n          ((\"order_selling_price_INR\")*main.\"financeCharges\") - \n          ((\"order_selling_price_INR\")*main.\"SalesCharges\") - \n          ((\"order_selling_price_INR\")*main.\"marketingCharges\") - \n          ((\"order_selling_price_INR\")*main.\"voucherCosts\") - \n          ((\"order_selling_price_INR\")*main.\"instructorCosts\") - \n          ((\"order_selling_price_INR\")*main.\"teachingAssistantsCosts\") - \n          ((\"order_selling_price_INR\")*main.\"platformCosts\")\n  end as \"Revenue_for_payout_calculation_INR\" ,\n\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" ) * ((main.\"payoutPercentage\" )/100)\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" ) * ((main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n      else GREATEST(((\"POS_subvention_excluded_INR\" - main.\"serviceTax_INR\" ) - \n                      (main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \n                      ((\"order_selling_price_INR\")*main.\"financeCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"SalesCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"marketingCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"voucherCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"instructorCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"teachingAssistantsCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"platformCosts\")\n                      )* \n                      ((main.\"payoutPercentage\" )/100)\n              , (main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) \n  end as \"order_payout_INR\" ,\n\n  -- Adding Simplilearns payout also - 20230525\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" ) * ((100-main.\"payoutPercentage\" )/100)\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" )  * ((100-main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n      else GREATEST(((\"POS_subvention_excluded_INR\" - main.\"serviceTax_INR\" ) - \n                      (main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \n                      ((\"order_selling_price_INR\")*main.\"financeCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"SalesCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"marketingCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"voucherCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"instructorCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"teachingAssistantsCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"platformCosts\")\n                      )* \n                      ((100-main.\"payoutPercentage\" )/100)\n              , (main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) \n  end as \"order_payout_to_SL_INR\" ,\n\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP \n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" ) * ((main.\"payoutPercentage\" )/100)\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n      \t  then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" ) * ((main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n      else GREATEST(((\"POS_subvention_excluded_INR\" - main.\"serviceTax_INR\" ) - \n                      (main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \n                      ((\"order_selling_price_INR\")*main.\"financeCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"SalesCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"marketingCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"voucherCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"instructorCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"teachingAssistantsCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"platformCosts\")\n                      )* \n                      ((main.\"payoutPercentage\" )/100)\n              , case when (\"paymentCourse\") ilike '%getting%started%' and ( \"upt_final_payout_INR\" )>((main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) then 0\n                     else (main.\"minPayout\" / main.\"deductionsCurrency_to_INR\") end ) \n  end as \"final_pay_INR\",\n\n  -- Adding Simplilearns payout also - 20230525\n  case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP \n          then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" ) * ((100-main.\"payoutPercentage\" )/100)\n      when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n      \t  then (\"order_selling_price_INR\" - main.\"serviceTax_INR\" )* ((100-main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n      else GREATEST(((\"POS_subvention_excluded_INR\" - main.\"serviceTax_INR\" ) - \n                      (main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_INR\") - \n                      ((\"order_selling_price_INR\")*main.\"financeCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"SalesCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"marketingCharges\") - \n                      ((\"order_selling_price_INR\")*main.\"voucherCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"instructorCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"teachingAssistantsCosts\") - \n                      ((\"order_selling_price_INR\")*main.\"platformCosts\")\n                      )* \n                      ((100-main.\"payoutPercentage\" )/100)\n              , case when (\"paymentCourse\") ilike '%getting%started%' and (\"upt_final_payout_INR\" )>((main.\"minPayout\" / main.\"deductionsCurrency_to_INR\")) then 0\n                     else (main.\"minPayout\" / main.\"deductionsCurrency_to_INR\") end ) \n  end as \"final_pay_to_SL_INR\"\n  \nfrom final_table_cte_ as main\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591237":{"id":2591237,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":1136,"y":160,"width":32,"height":32,"inputConnectorIDs":[2591219],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql_freezed_table_till_last_month_20230303"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*create or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\" as      \nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\nwhere \"latest_payment_date\" < date_trunc(month,current_date)\n;*/\n\ndelete from ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\n--where \"latest_payment_date\" < '2022-08-01' and \"latest_payment_date\" >= '2022-07-01';\n--where \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-25);\n--where \"orderNumber\" like 'CSTM_UPG%' and \"latest_payment_date\" < date_trunc(month,current_date-25);\n--where \"order_type\" = 'Order' and \"University_flag\" is not null  and \"orderNumber\" not like '%PARTIAL%' and \"orderNumber\" like 'CSTM_UPG%' and \"latest_payment_date\" < date_trunc(month,current_date-25);\n--where \"latest_payment_date\" < '2023-03-01' and \"latest_payment_date\" >= '2023-01-01';\n--where \"Email\" in ('sunderkamesh@gmail.com'); -- ynathiya@gmail.com\n--where \"Program Name\" = 'Professional Certificate Program In Cybersecurity- Red Team'\nwhere \"latest_payment_date\" < date_trunc(month,current_date)\nand \"Program Name\" in ('Caltech Post Graduate Program in Data Science')\nand \"paymentGeo\" = 'AMERICAS'\n;\n\nINSERT INTO ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\n\nselect * from ${ev_default_db_name}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\n--where \"latest_payment_date\" < '2022-08-01' and \"latest_payment_date\" >= '2022-07-01';\n--where \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-25);\n--where \"orderNumber\" like 'CSTM_UPG%' and \"latest_payment_date\" < date_trunc(month,current_date-25);\n--where \"order_type\" = 'Order' and \"University_flag\" is not null  and \"orderNumber\" not like '%PARTIAL%' and \"orderNumber\" like 'CSTM_UPG%' and \"latest_payment_date\" < date_trunc(month,current_date-25);\n--where \"latest_payment_date\" < '2023-03-01' and \"latest_payment_date\" >= '2023-01-01';\n--where \"Email\" in ('sunderkamesh@gmail.com'); -- ynathiya@gmail.com\n--where \"Program Name\" = 'Professional Certificate Program In Cybersecurity- Red Team'\nwhere \"latest_payment_date\" < date_trunc(month,current_date)\nand \"Program Name\" in ('Caltech Post Graduate Program in Data Science')\nand \"paymentGeo\" = 'AMERICAS'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591238":{"id":2591238,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":1120,"y":80,"width":32,"height":32,"inputConnectorIDs":[2591223],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql_freezed_table_till_last_month_20230303_bkps"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--  BKP TABLES\n\n-- \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed_bkp_20240523\"\n-- \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"university_payout_table_with_b2b_bkp_20240523\" \n\ncreate or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed_bkp_${_BKP_DATE_}\" as      \nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\n;\n\ncreate or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_bkp_${_BKP_DATE_}\" as      \nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b\"\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591239":{"id":2591239,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":1136,"y":368,"width":32,"height":32,"inputConnectorIDs":[2591267],"outputSuccessConnectorIDs":[2951554],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"university_payout_table_with_b2b_final_new_logic_2_final"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"------------------------------------------------------\n------------- FINAL PAYOUT TABLE ---------------------\n------------------------------------------------------\ncreate or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" as\n\nselect \n\tmain.* ,           \n\t\"mrp\" ,\n\tcase when \"currency\"= 'USD' then 1\n\t\twhen \"currency\" = 'EUR' then con.\"EUR.to.1.USD\" -- euro\n\t\twhen \"currency\" = 'CAD' then con.\"CAD.to.1.USD\" -- Singapore dollar\n\t\twhen \"currency\" = 'SGD' then con.\"SGD.to.1.USD\" -- canadian dollar\n\t\tWHEN \"currency\" = 'INR' then con.\"INR.to.1.USD\"\n\t\tWHEN \"currency\" = 'AUD' then con.\"AUD.to.1.USD\"\n\t\tWHEN \"currency\" = 'GBP' then con.\"GBP.to.1.USD\"\n\t\tELSE 1\n\tend \"conv_sheet\",\n\t\n\tcase when \"order_type\" in ('Refund','RefundUPG','Chargeback') then NULL \n\t\telse \"mrp\"/\"conv_sheet\" \n\tend as \"CSTM_New_MRP_USD\",  -- MRP values from payment_Reconciliation table for CSTM orders\n\t\n\tcase when \"order_type\" in ('Refund','RefundUPG','Chargeback','Extn') then NULL \n\t\twhen \"orderNumber\" like 'CSTM%' then NULL\n\t\telse \"SMPL_MRP_new\"/\"conv_sheet\" \n\tend as \"SMPL_New_MRP_USD\",  -- MRP values from payment_Reconciliation table for SMPL orders\n\t\n\tcoalesce(\"CSTM_New_MRP_USD\",\"SMPL_New_MRP_USD\") as \"New_MRP_USD\" \n            \nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_stg\" main\n\n-------------------------------------------------------------------------------\n------------- Prod Dim to get latest Program Name mapping ---------------------\n-------------------------------------------------------------------------------\nleft join \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" pref_main\non Replace(ltrim(rtrim(lower(main.\"CourseName\"))),'  ',' ') = lower(pref_main.\"Course\")\n\nleft join\n(\n\tselect \n\t\tpr.\"orderNumber\" \"order_number\",\n\t\t\"Program Name\",\n\t\tsum(pr.\"mrp\") \"mrp\",\n\t\tsum(\"SMPL_MRP_new\") \"SMPL_MRP_new\"\n\tfrom\n  \t-------------------------------------------------------------------------------\n    ------------- Getting the MRP values for CSTM/SMPL orders ---------------------\n    -------------------------------------------------------------------------------\n\t(\n\t\tselect \n\t\t\t\"reconciliation_id\",\"orderNumber\",\"course_id\",\n\t\t\t\"productType_id\",\"paymentDate\",\"courseName\",\"mrp\",\n\t\t\t(\"amount\"-ifnull(\"serviceTax\",0)+ifnull(\"discountAmount\",0)) \"SMPL_MRP_new\"\n\t\tfrom \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n\t\t\n\t\twhere not contains (\"orderNumber\", 'SMPL_SKLUP_CERT') \n\t\t\tand not(lower(\"courseName\") like '%getting started%' \n\t\t\t\tor  lower(\"courseName\") like '%complimentary%') -- 2023-04-20 : SP\n\t)pr\n\t\n  \t-------------------------------------------------------------------------------\n    ------------- Prod Dim to get latest Program Name mapping ---------------------\n    -------------------------------------------------------------------------------\n\tleft join \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" pref\n\ton Replace(ltrim(rtrim(lower(pr.\"courseName\"))),'  ',' ') = lower(pref.\"Course\")\n\n\tgroup by 1,2\n) mrp\nON main.\"orderNumber\" = mrp.\"order_number\" \n\tand pref_main.\"Program Name\" = mrp.\"Program Name\"\n\n-------------------------------------------------------------------------------\n------------- mapping with conversion values from the sheet -------------------\n-------------------------------------------------------------------------------\nLEFT JOIN\n(\n\tselect \n\t\textract(year from to_date(\"Month\")) as \"yr\", \n\t\textract(month from to_date(\"Month\")) as \"month\",*\n\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n) con\non extract(year from to_date(TO_DATE(to_timestamp(\"paymentDate\" ))))=con.\"yr\" \n\tand extract(month from to_date(TO_DATE(to_timestamp(\"paymentDate\" ))))= con.\"month\"\n\norder by \"latest_payment_date\" desc\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591240":{"id":2591240,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":656,"y":880,"width":32,"height":32,"inputConnectorIDs":[2591224],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql_PUBLIC_target_anomaly_alerts_1"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--CREATE Or replace table \"SL_ANALYTICS_DB\".\"PUBLIC\".\"target_anomaly_alerts\" AS\n\ndelete from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\"\nwhere \"TimeStamp\" = current_date;\n\nINSERT INTO ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\"\n\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\",\n0 \"No. of Days\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg\" \nwhere \"SHA2_HEX_ID\" not in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\") \n\nunion all\n\nselect a.*,b.\"No. of Days\"+1 from\n(\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg\" \nwhere \"SHA2_HEX_ID\" in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\") )a\nleft join\n(select \"SHA2_HEX_ID\" ,max( \"No. of Days\") as \"No. of Days\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts\" group by 1) b\nON a.\"SHA2_HEX_ID\" = b.\"SHA2_HEX_ID\"\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591241":{"id":2591241,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":912,"y":880,"width":32,"height":32,"inputConnectorIDs":[2591269],"outputSuccessConnectorIDs":[2591224],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql_PUBLIC_target_anomaly_alerts_stg_1"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CREATE OR REPLACE TABLE ${ev_default_db_name}.${ev_sf_schema_public}.\"target_anomaly_alerts_stg\" AS\n\nselect  SHA2_HEX(concat(ifnull(\"Email\",'-'),ifnull(\"Program Name\",'-'),ifnull(\"Order Number\",'-'),ifnull(\"Payment Geo\",'-'),\n\t\t\t\t\t\tifnull(\"University\",'-'),ifnull(\"Deviation\",'0'),ifnull(\"Category\",'-'),ifnull(\"Sub-Category\",'-'),\n                        ifnull(\"Status\",'-')\n                       )) as \"SHA2_HEX_ID\" ,\n\t\tcurrent_date \"TimeStamp\",\n        0 \"No. of Days\"\n            ,\n        * from \n(\n-------------------------------------------\n----checkpoint1--elt2 order check ---------\n-------------------------------------------\n(select null as \"Email\", null as \"Program Name\",\"orderNumber\" as \"Order Number\",null as \"Payment Geo\", null as \"Month\",  null as \"University\", null as \"Deviation\",'elt2 Check' as \"Category\",\n'Order check' as \"Sub-Category\",'Missing order' as \"Status\" from ( select distinct \"orderNumber\" from (\nselect * from \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\" where \"orderNumber\" in(\nselect * from (\nselect distinct \"orderNumber\"from (\nselect *,to_date(to_timestamp(\"paymentDate\")) as \"payment_date\" from \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\"\nwhere \"payment_date\">='2022-01-01' and not(\"orderNumber\" like any ('SMPL_B2B%','CSTM_CORP%')) \n  and not (\"transactionId\" like any ('APP_FREE%','WEB_FREE%')) and \"course_id\" not in (1018,1019,1020) and not(\"userEmail\" like any ('%simplilearnautomation%'))\n  )where \"orderNumber\" not in\n\n(select distinct \"orderNumber\" from(\nselect * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"ndate\">='2022-01-01'  and  not (\"orderNumber\" is null and \"refundedOrderNumber\" is null)\n) where not(\"orderNumber\" is null) and not(\"orderNumber\" like any ('00%')) --and \"orderNumber\"!='BACKEND_1641204895_SP718612'\norder by \"orderNumber\")\n\n)) and \"is_test_payment\"=0\norder by \"orderNumber\"))\n\nunion all\n--------elt2 collection check\nselect \"userEmail\" as \"Email\", \"Program Name\",\"orderNumber\" as \"Order Number\",\"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University\",\n\"deviation\" as \"Deviation\",'elt2 Check' as \"Category\",'Collection check' as \"Sub-Category\",'Deviation in Collection' as \"Status\" from(\nselect \"userEmail\",\"Program Name\",\"orderNumber\",\"collection_pr\",\"collection_ue\",\"paymentCountry\",\"paymentGeo\",\"University\",\"collection_pr\"-\"collection_ue\" as \"deviation\",\"currency\" from(\nselect *,\ncase when \"collection_pr\"=\"collection_ue\" then 1 else 0 end as \"flag\" from(\nselect * from(\n(select \"orderNumber\",round(sum(\"amount\"),0) as \"collection_pr\",max(\"paymentRegion\") as \"paymentRegion\",max(\"paymentCountry\") as \"paymentCountry\",sum(\"discountAmount\") as \"discountAmount\" from (\nselect *,to_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n from \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\"\nwhere \"payment_date\">='2022-01-01' and not(\"orderNumber\" like any ('SMPL_B2B%','CSTM_CORP%')) \n and not (\"transactionId\" like any ('APP_FREE%','WEB_FREE%')) and \"course_id\" not in (1018,1019,1020) and not(\"userEmail\" like any ('%simplilearnautomation%')))\nwhere \"is_test_payment\"=0\ngroup by 1) pr left join\n\n(select \"orderNumber\" as \"oN\",round(sum(\"order_selling_price\"),0) as \"collection_ue\",max(\"paymentGeo\") as \"paymentGeo\",max(\"University Name\") as \"University\",\n max(\"userEmail\") as \"userEmail\",max(\"Program Name\") as \"Program Name\",max(\"currency\") as \"currency\",max(\"ndate\") as \"ndate\" from(\nselect * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"ndate\">='2022-01-01'  and  not (\"orderNumber\" is null and \"refundedOrderNumber\" is null)\n) where not(\"orderNumber\" is null) and not(\"orderNumber\" like any ('00%'))\ngroup by 1) ue \non pr.\"orderNumber\"=ue.\"oN\")\norder by \"orderNumber\"))\nwhere \"flag\"=0 and abs(\"deviation\")>1 and \"University\" is not null) \n\nunion all\n----------------------------------------------------------------\n---checkpoint 3----pg payout inputs duplicate entry check\n----------------------------------------------------------------\nselect null as \"Email\", \"Program Name\", null as \"Order Number\", \"Payment Geo\", null as \"Month\", \"University\", null as \"Deviation\",'PG Payout Input sheet check' as \"Category\",\n'Duplicate entry check' as \"Sub-Category\",'Duplicate Entry' as \"Status\" from (\nselect \"universityFlag\" as \"University\", \"programName\" as \"Program Name\", \"paymentGeo\" as \"Payment Geo\" from(\nselect \"universityFlag\",\"programName\",\"paymentGeo\",count(\"programName\") as \"count\" from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\"\ngroup by 1,2,3\nhaving \"count\">1))\n\nunion all\n--------pg payout inputs missing value check\nselect null as \"Email\",\"programName\" as \"Program Name\", null as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"universityFlag\" as \"University\", null as \"Deviation\",'PG Payout Input sheet check' as \"Category\",\n'Missing value check' as \"Sub-Category\",'Missing value' as \"Status\" from (\nselect * from (\nselect *,\ncase when \"universityFlag\" is null then 1 else 0 end as \"Flag1\",\ncase when \"programName\" is null then 1 else 0 end as \"Flag2\",\ncase when \"paymentGeo\" is null then 1 else 0 end as \"Flag3\",\ncase when \"deductionsCurrency\" is null then 1 else 0 end as \"Flag4\",\ncase when \"affiliatePaymentCosts\" is null then 1 else 0 end as \"Flag5\",\ncase when \"minPayout\" is null then 1 else 0 end as \"Flag6\",\ncase when \"payoutPercentage\" is null then 1 else 0 end as \"Flag7\",\ncase when \"contractStartDate\" is null then 1 else 0 end as \"Flag8\",\ncase when \"contractEndDate\" is null then 1 else 0 end as \"Flag9\",\ncase when \"minASP\" is null then 1 else 0 end as \"Flag10\",\ncase when \"maxASP\" is null then 1 else 0 end as \"Flag11\",\ncase when \"financeCharges\" is null then 1 else 0 end as \"Flag12\",\ncase when \"SalesCharges\" is null then 1 else 0 end as \"Flag13\",\ncase when \"marketingCharges\" is null then 1 else 0 end as \"Flag14\",\ncase when \"voucherCosts\" is null then 1 else 0 end as \"Flag15\",\ncase when \"instructorCosts\" is null then 1 else 0 end as \"Flag16\",\ncase when \"teachingAssistantsCosts\" is null then 1 else 0 end as \"Flag17\",\ncase when \"platformCosts\" is null then 1 else 0 end as \"Flag18\"\nfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\"\n  ) where \"Flag1\"=1 or \"Flag2\"=1 or \n  \"Flag3\"=1 or \"Flag4\"=1 or \n  \"Flag5\"=1 or \"Flag6\"=1 or \n  \"Flag7\"=1 or \"Flag8\"=1 or \n  \"Flag9\"=1 or \"Flag10\"=1 or \n  \"Flag11\"=1 or \"Flag12\"=1 or \n  \"Flag13\"=1 or \"Flag14\"=1 or \n  \"Flag15\"=1 or \"Flag16\"=1 or \n  \"Flag17\"=1 or \"Flag18\"=1)\n  \nunion all\n---------pg payout inputs program name validation\nselect null as \"Email\", \"programName\" as \"Program Name\", null as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\",\n\"universityFlag\" as \"University\", null as \"Deviation\",'PG Payout Input sheet check' as \"Category\",\n'Program Name validation' as \"Sub-Category\",'Program Name mismatch' as \"Status\" from (\nselect * from(\n(select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\") A left join\n(select distinct \"Program Name\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad')) B\non A.\"programName\"=B.\"Program Name\")) where \"Program Name\" is null\norder by \"Program Name\")\n\nunion all\n-------------------------------------------------------------------\n----checkpoint 4----finance control check for current month entry\n-------------------------------------------------------------------\n  (select null as \"Email\", null as \"Program Name\", null as \"Order Number\", null as \"Payment Geo\",to_date(year(current_date)||'-'||month(current_date)||'-01') as \"Month\",\nnull as \"University\", null as \"Deviation\",'Finance Control sheet check' as \"Category\",\n'Current Month Entry Check' as \"Sub-Category\",'Missing Current Month Entry' as \"Status\" from (\nselect *,\ncase when \"yr1\"!=year(current_date) or \"mnth1\"!=month(current_date) then 1 else 0 end as \"Flag\"\nfrom(\nselect \"Month\",year(to_date(\"Month\")) as \"yr1\",month(to_date(\"Month\")) as \"mnth1\",year(current_date),month(current_date)\nfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" where \"Month\"<=current_date\norder by \"Month\" desc limit 1)) where \"Flag\"=1\n\nunion all\n---------finance control check for historical entries   \nselect null as \"Email\", null as \"Program Name\", null as \"Order Number\", null as \"Payment Geo\",null as \"Month\",\nnull as \"University\", null as \"Deviation\",'Finance Control sheet check' as \"Category\",\n'Historical entry check' as \"Sub-Category\",'Missing Historical Entry' as \"Status\" from (\nselect *, case when \"no_of_months\"!=\"count\" then 1 else 0 end as \"Flag\" from(\nselect *, round((\"Month\"-\"Start_date\")/30) as \"no_of_months\",count(\"Month\") over (partition by \"Start_date\") as \"count\" from(\nselect to_date(\"Month\") as \"Month\",to_date('2018-12-01') as \"Start_date\" from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n -- where month(to_date(\"Month\"))!=5\n ))order by \"Month\" desc limit 1)where \"Flag\"=1\n\nunion all\n ---------finance control check for missing values\nselect null as \"Email\", null as \"Program Name\", null as \"Order Number\", null as \"Payment Geo\",\"Month\" as \"Month\",\nnull as \"University\", null as \"Deviation\",'Finance Control sheet check' as \"Category\",\n'Missing value check' as \"Sub-Category\",'Missing Value' as \"Status\" from (select * from(\nselect * ,\ncase when \"Month\" is null then 1 else 0 end as \"Flag1\",\ncase when \"INR.to.1.USD\" is null then 1 else 0 end as \"Flag2\",\ncase when \"AUD.to.1.USD\" is null then 1 else 0 end as \"Flag3\",\ncase when \"GBP.to.1.USD\" is null then 1 else 0 end as \"Flag4\",\ncase when \"EUR.to.1.USD\" is null then 1 else 0 end as \"Flag5\",\ncase when \"USD.to.INR\" is null then 1 else 0 end as \"Flag6\",\ncase when \"AUD.to.INR\" is null then 1 else 0 end as \"Flag7\",\ncase when \"GBP.to.INR\" is null then 1 else 0 end as \"Flag8\",\ncase when \"EUR.to.INR\" is null then 1 else 0 end as \"Flag9\",\ncase when \"CAD.to.INR\" is null then 1 else 0 end as \"Flag10\",\ncase when \"SGD.to.INR\" is null then 1 else 0 end as \"Flag11\",\ncase when \"CAD.to.1.USD\" is null then 1 else 0 end as \"Flag12\",\ncase when \"TDR.IN\" is null then 1 else 0 end as \"Flag13\",\ncase when \"TDR.AMERICAS\" is null then 1 else 0 end as \"Flag14\",\ncase when \"TDR.ROW\" is null then 1 else 0 end as \"Flag15\",\ncase when \"Sales.Commission.IN\" is null then 1 else 0 end as \"Flag16\",\ncase when \"Sales.Commission.AMERICAS\" is null then 1 else 0 end as \"Flag17\",\ncase when \"Sales.Commission.ROW\" is null then 1 else 0 end as \"Flag18\",\ncase when \"Trainer.fee.LVC\" is null then 1 else 0 end as \"Flag19\",\ncase when \"Trainer.fee.CR\" is null then 1 else 0 end as \"Flag20\",\ncase when \"Month\">='2021-10-01'and \"SGD.to.1.USD\" is null then 1 else 0 end as \"Flag21\"\nfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")\nwhere \"Flag1\"=1 or \"Flag2\"=1 or \n  \"Flag3\"=1 or \"Flag4\"=1 or \n  \"Flag5\"=1 or \"Flag6\"=1 or \n  \"Flag7\"=1 or \"Flag8\"=1 or \n  \"Flag9\"=1 or \"Flag10\"=1 or \n  \"Flag11\"=1 or \"Flag12\"=1 or \n  \"Flag13\"=1 or \"Flag14\"=1 or \n  \"Flag15\"=1 or \"Flag16\"=1 or \n  \"Flag17\"=1 or \"Flag18\"=1 or\n  \"Flag19\"=1 or \"Flag20\"=1 or \n  \"Flag21\"=1  ))\n\nunion all\n-----------------------------------------------------------------------------------------------------------\n------------------------------------------Checkpoint 5 UPG cases                                                              \n-----------------------------------------------------------------------------------------------------------                                                                         \n\n(select \"Email\" as \"Email\", \"Program Name\", \"order_Number\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", \"latest_payment_date\" as \"Month\", \"University_flag\" as \"University\", \"collection_elt2\"-\"collection_amount\" as \"Deviation\",'Upgarde case' as \"Category\",\n'Collection check' as \"Sub-Category\",'Deviation in collection' as \"Status\" from (\n select *,\"collection_elt2\"-\"collection_amount\" as \"Deviation\",\n case when abs(\"collection_elt2\"-\"collection_amount\")>1 then 1 else 0 end as \"Collection_Flag\" from(\n select *,(\"order_selling_price_elt2\")+(\"order_selling_price_parent\") as \"collection_elt2\" from(\n   select * from((                                                                        \n  select * from(\n    (select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\n   from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" \n         where \"orderNumber\" like '%CSTM_UPG%' and \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C' and \"orderNumber\" not in ('CSTM_UPG_8EHIV2FWEYQ'))\n                    group by 1,2,3) payout\n  left join\n\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"orderNumber_elt2\") as \"orderNumber_elt2\",sum(\"collection_USD\") as \"collection_USD\",max(\"SellingPrice_USD\") as \"SellingPrice_USD\",\n  sum(\"order_selling_price_elt2\") as \"order_selling_price_elt2\" ,max(\"parent_collection_USD\") as \"parent_collection_USD\", max(\"currency\") as \"currency\",max(\"paymentCountry\") as \"paymentCountry\",max(\"paymentGeo\") as \"paymentGeo_\"\n   from (select *,\"order_selling_price\"/\"elt_conv_to_USD\" as \"order_selling_price_elt2\" ,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"\n         from(\n  select * from (\n  select * from (\n  (select *,\n   case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"elt_conv_to_USD\"\n   \n   from((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01' and \"orderNumber\" is not null)a\n     left join\n   (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")b\n on extract(year from a.\"ndate\") =  extract(year from to_date(b.\"Month\")) and extract(month from a.\"ndate\") =   extract(month from to_date(b.\"Month\")))\n    ) A\n\n  left join\n\n  (select \"userEmail\" as \"uE\",\"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" like '%CSTM_UPG%' and \"ndate\">='2022-01-01'\n  group by 1,2)B\n  on A.\"userEmail\"=B.\"uE\" and A.\"Program Name\"=B.\"PN\")) where \"oN\" is not null))where \"mapped_reconciliation_id\" is not null\n  group by 1,2)elt2\n    left join\n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"\n     \n  ))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"\n  ))F\n  left join\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"Program Name_1\",max(\"ndate_\") as \"ndate_parent\",max(\"order_selling_price_parent\") as \"order_selling_price_parent\" \n   from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01')u1\n    left join\n  (select *\n   from((select  \"reconciliation_id\" as \"mp\",sum(\"order_selling_price_parent\") as \"order_selling_price_parent\",max(\"ndate\") as \"ndate_\",max(\"currency\") as \"currency\" \n         from(select *,\"order_selling_price\"/\"parent_conv_to_USD\" as \"order_selling_price_parent\" from (select *,\n              case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"parent_conv_to_USD\" from\n              ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\")O\n              left join\n          (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")K\n            on extract(year from O.\"ndate\") =  extract(year from to_date(K.\"Month\")) and extract(month from O.\"ndate\") =   extract(month from to_date(K.\"Month\"))\n              )))\n  group by 1)))u2\n    on u1.\"mapped_reconciliation_id\" =u2.\"mp\") where \"mp\" is not null\n  group by 1,2)G\n  on F.\"Email\"=G.\"email\" and F.\"Program Name\"=G.\"Program Name_1\")))where \"Collection_Flag\"=1\n  \n  --------- removing unnecessary order_numbers causing False anomalies ---- \n\tand \"order_Number\" not in ('CSTM_UPG_PARTIAL_SUBS_I23F4GVYTAW','CSTM_UPG_A42RCMV2NC8','CSTM_UPG_EOQ032WRX30',\n\t\t\t\t'CSTM_UPG_PARTIAL_SUBS_4UH64GQG25W','CSTM_UPG_EHI11UDDHVP','CSTM_UPG_PARTIAL_SUBS_AWSR5VN9LJ6',\n\t\t\t\t'CSTM_UPG_70SKULM7YOQ','CSTM_UPG_AW47FX8ZS1C','CSTM_UPG_2KQ7SSS6DZT')\n  )\n                                                                         \n                                                                         \nunion all                                                                         \n------------------------------------------------------------------------------------------------\n--Extension case\n\nselect \"Email\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"collection_elt2\"-\"collection_amount\" as \"Deviation\",'Extension case' as \"Category\",\n'Collection check' as \"Sub-Category\",'Deviation in collection' as \"Status\" from (\nselect *,\ncase when abs(\"collection_elt2\"-\"collection_amount\")>1 then 1 else 0 end as \"Flag\" from (\nselect *,(\"order_selling_price\"/\"conv_to_USD\") as \"collection_elt2\" from (\n(select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"order_type\"='Extn' and \"latest_payment_date\">='2022-07-01')A\nleft join\n(select \"userEmail\",\"Program Name\" as \"Program Name_\",sum(\"order_selling_price\") as \"order_selling_price\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" like '%EXTN%' and \"ndate\">='2022-07-01' and \"Program Type\"  in ('PG','Bootcamp','Study Abroad')\ngroup by 1,2)B\non A.\"Email\"=B.\"userEmail\" and A.\"Program Name\"=B.\"Program Name_\"))) where \"Flag\"=1\n)\n\nunion all\n------------------------------------------------------------------------------\n-----checkpoint 2-------------------------------------------------------------\n------------------------------------------------------------------------------\n----Complete Order Check FullPayment order check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", \"ndate\" as \"Month\", \"universityFlag\" as \"University\", null as \"Deviation\",'Complete order check' as \"Category\",\n'Full Payment check' as \"Sub-Category\",'Missing order' as \"Status\" from (\nselect * from(select * from (select * from(\n(\nselect \"userEmail\",\"Program Name\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"University\",\"payment_Geo\" from (\nselect \"userEmail\",\"Program Name\", \"University\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"only_prep_bought\",\"oN\",\"mp\",\"payment_Geo\" from (\n(select \"userEmail\",\"Program Name\",max(\"University Name\") as \"University\", max(\"ndate\") as \"ndate\",max(\"orderNumber\") as \"orderNumber\",sum(\"collection_USD\") as \"sum_collection_USD\",max(\"paymentGeo\") as \"payment_Geo\",\n sum(\"collection_INR\") as \"sum_collection_INR\",max(\"SellingPrice_USD\") as \"max_SellingPrice_USD\",max(\"paymentCountry\") as \"paymentCountry\",max(\"only_prep_bought\") as \"only_prep_bought\", max(\"mp\") as \"mp\"\n  from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                              and \"ndate\"<dateadd(day,-1,TO_DATE(current_date)) and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%PARTIAL%','%EXTN%'))\ngroup by 1,2) u1 left join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" like any ('%UPG%','CSTM_PARTIAL%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where \"sum_collection_USD\">0  and \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null\norder by \"userEmail\",\"Program Name\"\n)elt2\nLEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"payment_Geo\" = pgpay_inp.\"paymentGeo\")\n where \"universityFlag\" is not null) A\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"University_flag\" is not null and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") B\non A.\"userEmail\"=B.\"Email\" and A.\"Program Name\"=B.\"Program_Name\" and A.\"universityFlag\"=B.\"University_flag\")\nwhere \"Email\" is null)\n\nunion all\n\n-----------complete order FullPayment order Collection check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"payment_Geo\" as \"Payment Geo\", \"ndate_elt\" as \"Month\",\"universityFlag\" as \"University\", \"Deviation\",'Complete order check' as \"Category\",\n'Full Payment collection check' as \"Sub-Category\",'Deviation in Collection' as \"Status\" from (\nselect *,(\"collection_elt2\"-\"collection_amount\") as \"Deviation\",\ncase when abs(round(\"collection_elt2\")-round(\"collection_amount\"))>1 then 1 else 0 end as \"Flag\" from (\nselect * from(select * from (select * from(select \"userEmail\",\"Program Name\",\"universityFlag\",sum(\"collection_elt2\") as \"collection_elt2\",max(\"orderNumber\") as \"orderNumber\", max(\"ndate\") as \"ndate_elt\" from(\n        select *,\"order_selling_price\"/\"conv_to_USD\" as \"collection_elt2\" from (\n              select *,\n               case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\"            \n                             from((\nselect * from (\nselect * from (\n(select *\n  from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null \n                              and \"ndate\"<=dateadd(day,-1,TO_DATE(current_date)) and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%PARTIAL%','%EXTN%','CSTM_REPEAT%'))) u1 left join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" like any ('%UPG%','CSTM_PARTIAL%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null\norder by \"userEmail\",\"Program Name\")elt2\n                                           \nLEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\")))group by 1,2,3) where \"ndate_elt\">='2022-07-01') elt\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") payout\non elt.\"userEmail\"=payout.\"Email\" and elt.\"Program Name\"=payout.\"Program_Name\" and elt.\"universityFlag\"=payout.\"University_flag\")\nwhere \"Email\" is not null)) where \"Flag\"=1\n\nunion all\n\n----------------partial payment order check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", \"ndate\" as \"Month\", \"universityFlag\" as \"University\", null as \"Deviation\",'Complete order check' as \"Category\",\n'Partial Payment check' as \"Sub-Category\",'Missing order' as \"Status\" from (\nselect * from((select * from((\nselect \"userEmail\",\"Program Name\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"order_selling_price\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"University\",\"payment_Geo\",\n  case when abs(\"sum_collection_USD\"-\"max_SellingPrice_USD\")>1 then 1 else 0 end as \"Flag\" from (\nselect \"userEmail\",\"Program Name\", \"University\",\"ndate\",\"orderNumber\",\"sum_collection_USD\",\"order_selling_price\",\"sum_collection_INR\",\"max_SellingPrice_USD\",\"paymentCountry\",\"only_prep_bought\",\"oN\",\"mp\",\"payment_Geo\" from (\n(select \"userEmail\",\"Program Name\",max(\"University Name\") as \"University\", max(\"ndate\") as \"ndate\",max(\"orderNumber\") as \"orderNumber\",sum(\"collection_USD\") as \"sum_collection_USD\",max(\"paymentGeo\") as \"payment_Geo\",\nsum(\"order_selling_price\") as \"order_selling_price\", sum(\"collection_INR\") as \"sum_collection_INR\",max(\"SellingPrice_USD\") as \"max_SellingPrice_USD\",max(\"paymentCountry\") as \"paymentCountry\",max(\"only_prep_bought\") as \"only_prep_bought\", max(\"mp\") as \"mp\"\n  from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                              and \"ndate\"<=dateadd(day,-1,TO_DATE(current_date)) and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%EXTN%')) and \"orderNumber\" like any('%PARTIAL%')\ngroup by 1,2) u1 left join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere not(\"orderNumber\" like any ('%PARTIAL%'))  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where \"sum_collection_USD\">0  and \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null and \"Flag\"!=1\norder by \"userEmail\",\"Program Name\")elt2\n\nLEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"payment_Geo\" = pgpay_inp.\"paymentGeo\")\n where \"universityFlag\" is not null)A\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") B\non A.\"userEmail\"=B.\"Email\" and A.\"Program Name\"=B.\"Program_Name\" and A.\"universityFlag\"=B.\"University_flag\")\nwhere \"Email\" is null)\n\nunion all\n\n-------------------partial payment collection check\nselect \"userEmail\" as \"Email\", \"Program Name\", \"latest_orderNumber\" as \"Order Number\", \"payment_Geo\" as \"Payment Geo\", \"checkDate\" as \"Month\",\"universityFlag\" as \"University\", \"Deviation\",'Complete order check' as \"Category\",\n'Partial Payment collection check' as \"Sub-Category\",'Deviation in collection' as \"Status\" from (\nselect *,(\"collection_elt2\"-\"collection_amount\") as \"Deviation\",\ncase when abs(\"collection_elt2\"-\"collection_amount\")>1 then 1 else 0 end as \"Collection_Flag\" from (\nselect * from(\nselect * from((\n  select \"userEmail\",\"Program Name\",\"universityFlag\",max(\"latest_orderNumber\") as \"latest_orderNumber\",sum(\"collection_elt2\") as \"collection_elt2\", max(\"ndate\") as \"checkDate\" from(\n  select *,\"order_selling_price\"/\"conv_to_USD\" as \"collection_elt2\",last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\",\"universityFlag\" order by \"ndate\")\n   as \"latest_orderNumber\" from(\n  select *,\n               case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\"\n               from((\nselect * from (select *,\n  case when abs(sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\") - \"SellingPrice_USD\")>1 then 0 else 1 end as \"Flag\" from (\nselect * from (\n(select * from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\ncount(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n    Else 0 end as \"only_prep_bought\"\n        from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null \n                               and \"collection_USD\">0) A left join\n             (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\nwhere \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('%UPG%','%EXTN%','CSTM_REPEAT%')) \n and \"orderNumber\" like any('%PARTIAL%')) u1 \nleft join\n\n(select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere not(\"orderNumber\" like any ('%PARTIAL%'))  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%'))\ngroup by 1,2) u2\non u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\") where  \"only_prep_bought\"!=1\n)where \"oN\" is null and \"mp\" is null)where \"Flag\"=1\norder by \"userEmail\",\"Program Name\")elt2\n\n\n  LEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\")))group by 1,2,3)elt\n\nleft join\n\n\n((select \"Email\",\"Program Name\" as \"Program_Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",\n  max(\"collection_amount\") as \"collection_amount\",max(\"collection_minus_GST\") as \"collection_minus_GST\",max(\"paymentGeo\") as \"payment_Geo\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C'\ngroup by 1,2,3)\norder by \"Email\",\"Program Name\") payout\non elt.\"userEmail\"=payout.\"Email\" and elt.\"Program Name\"=payout.\"Program_Name\" and elt.\"universityFlag\"=payout.\"University_flag\")\nwhere \"Email\" is not null and \"checkDate\">='2022-07-01'))) where \"Collection_Flag\"=1 \n\nunion all\n------------------------------------------------\n-------checkpoint 6--Refund scenario updated    \n------------------------------------------------                                                                     \n(select \"Email\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", (\"collection_amount\"+\"refund_elt2_USD\")*(-1) as \"Deviation\",'Refund' as \"Category\",\n \"Sub-Category\",'Deviation in Refund Collection' as \"Status\" from (\nselect * from (\nselect *,\ncase when \"collection_amount\"+\"refund_elt2_USD\" >1 then 1 else 0 end as \"RefundFlag\"\n from ( \nselect * from(\n(select \"Email\",\"Program Name\",\"University_flag\",sum(\"collection_amount\") as \"collection_amount\",max(\"orderNumber\") as \"orderNumber\", max(\"paymentGeo\") as \"paymentGeo\" from \n (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"order_type\" in ('Refund','Chargeback') and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C'\norder by \"latest_payment_date\")group by 1,2,3)pay\n\nLEFT JOIN\n\n(select \"userEmail\",\"Program Name\" as \"Program Name_\",sum(\"partialRefundAmount_USD\") as \"refund_elt2_USD\", max(\"Sub-Category\") as \"Sub-Category\"\nfrom(\nselect *,\"partialRefundAmount\"/\"conv_to_USD_\" as \"partialRefundAmount_USD\" from (\nselect *,\ncase when \"currency\" = 'USD' THEN 1\n         when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n         when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n         when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n         when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n         when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n         when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD_\" from(\n(select *,\ncase when \"Flag\"=1 then 'Partial Refund' else 'Full Refund' end as \"Sub-Category\" \nfrom (\nselect *,\ncase when (\"order_selling_price_order\"-sum(\"partialRefundAmount\") over (partition by \"userEmail\",\"Program Name\"))>0 then 1 else 0 end as \"Flag\"\nfrom (\n (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"refundedOrderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-07-01' and \"partialRefundAmount\">0\norder by \"userEmail\",\"Program Name\") A\n\nLEFT JOIN\n\n(select \"userEmail\" as \"email\",\"Program Name\" as \"PName\",sum(\"order_selling_price\") as \"order_selling_price_order\"\nfrom \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\nwhere \"orderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') \ngroup by \"userEmail\",\"Program Name\")B\n  on A.\"userEmail\"=B.\"email\" and A.\"Program Name\"=B.\"PName\")))elt2\n  \nLEFT JOIN\n\n(select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\") rate on \n extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and \n           extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\")))))group by 1,2)elt\n  on pay.\"Email\"=elt.\"userEmail\" and pay.\"Program Name\"=elt.\"Program Name_\")))where \"RefundFlag\"=1)\n  \n  union all\n  \nselect \"Email\" as \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"sum_final_payout\" as \"Deviation\",'Refund' as \"Category\",\n'Refund Payout Check' as \"Sub-Category\",'Deviation in Refund Payout' as \"Status\" from (\nselect * from (\n(select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"order_type\" not in ('Chargeback','Refund') and \"paymentQueryType\"='B2C')A\nleft join\n(select * from (\nselect \"Email\" as \"email\",\"Program Name\" as \"programName\",\"University_flag\" as \"uni\", sum(\"final_payout\") as \"sum_final_payout\"\nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\ngroup by 1,2,3\norder by \"Email\",\"Program Name\")where \"sum_final_payout\"<-1)B\non A.\"Email\"=B.\"email\" and A.\"Program Name\"=B.\"programName\" and A.\"University_flag\"=B.\"uni\") \nwhere \"email\" is not null and \"latest_payment_date\">='2022-07-01')\n)\n  \nunion all\n-----------------------------------------------\n--checkpoint 7---------------------------------\n-----------------------------------------------\n  ---fullPayment -- Partial Payment\n (select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from \n  (\n  select *,\"final_payout\"-\"final_payout_elt2\" as \"Deviation in Payout\" from (\n  select *, 'FullPayment or PartialPayment' as \"order\" from (\n  select *,\n  case when abs(\"final_payout\"-\"final_payout_elt2\")>1 then 1 else 0 end as \"Flag_diff\"\n  from ( select *, \n  GREATEST((\"revenueForPayoutUSD\")* (\"payoutPercentage\"/100), \"minPayout\"/\"deductionsCurrency_to_USD\") as \"final_payout_elt2\" from(\n    select *,\"Revenue_for_payout_calculation\" as \"revenueForPayoutUSD\" from(\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\"='Order' and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C') payout\n\n  left join\n\n  (select *\n  from(\n  select \"userEmail\",\"Program Name\" as \"Program_Name\",\"universityFlag\",max(\"ndate\") as \"ndate_elt2\",max(\"latest_orderNumber\"),\n  sum(\"order_selling_price\"/\"conv_to_USD\") as \"collection_elt2_USD\",\n  sum(\"collection_minusGSTelt2\"/\"conv_to_USD\") as \"collection_minusGSTelt2_USD\",\n  sum(\"collectionMinusGST&TDRSub\"/\"conv_to_USD\") as \"collectionMinusGST&TDRSub_USD\",\n  sum((\"collectionMinusGST&TDRSub\"/\"conv_to_USD\")-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"\n     -\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"-\"TeachingAssistants_cost\"\n     -\"Platform_cost\") as \"revenueForPayoutUSD_1\",max(\"payoutPercentage\") as \"payoutPercentage_1\",max(\"minPayout\") as \"minPayout_1\"\n  from (\n  select *,\n  \"POS_subvention_excluded\"-\"serviceTax_elt2\" as \"collectionMinusGST&TDRSub\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from(\n  select *,\"order_selling_price\"-\"serviceTax_elt2\" as \"collection_minusGSTelt2\",\n  case when \"emi_subvention_rate\" is not null then \"order_selling_price\"-(\"order_selling_price\"*\"emi_subvention_rate\"/100)\n  else \"order_selling_price\"-(\"order_selling_price\"*\"TDR\") end as \"collection_excl_subvention\"\n  from(\n  select *,\n  case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\",\n  case when \"deductionsCurrency\" = 'USD' THEN 1\n           when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"deductionsCurrency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"deductionsCurrency_to_USD\",\n  case when \"paymentCountry\" like 'India' then \"order_selling_price\" * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then \"order_selling_price\" * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then \"order_selling_price\"* ( 1 - (1/1.20)) else 0 end as \"serviceTax_elt2\"\n  from (\n  (select * from (\n  select *,\n  case when abs(sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\") -\"total_collection\")>1 then 0 else 1 end \"Completed_order_Check\"\n  from (\n  select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"latest_orderNumber\", \n  case when \"SellingPrice_USD\" is null then sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\")\n  else \"SellingPrice_USD\" end as \"total_collection\" from (\n  (select * from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\n  count(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n      Else 0 end as \"only_prep_bought\"\n          from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                                and \"ndate\"<current_date and \"collection_USD\">0) A left join\n               (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('CSTM_UPG%','%EXTN%'))) u1\n\n  left join \n\n  (select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"orderNumber\" like any ('CSTM_UPG%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%')) --\n  group by 1,2) u2\n\n  on u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\")\n  where \"only_prep_bought\"!=1 and \"oN\" is null and \"mp\" is null)) where \"Completed_order_Check\"=1) elt2\n\n  LEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\"))))\n      group by 1,2,3))elt\n\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program_Name\" and payout.\"University_flag\"=elt.\"universityFlag\")))\n  where \"final_payout_elt2\" is not null) where \"Flag_diff\"=1)\n  )\n\n  union all\n  -----upgrade\n    select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from \n  (\n  select *,\"final_payout\"-\"FinalPayout_elt2\" as \"Deviation in Payout\" from (\n  select *,\n    case when abs(\"final_payout\"-\"FinalPayout_elt2\")>1 then 1 else 0 end as \"flag_diff\",\n    'Upgrade' as \"order\" from (\n  select *, greatest((\"revenueForPayout\"*(\"payoutPercentage\"/100)),\"minPayout\"/\"deductionsCurrency_to_USD\") as \"FinalPayout_elt2\" from (\n  select *, \"Revenue_for_payout_calculation\" as \"revenueForPayout\" from (\n  select *,\n  (\"Collection_minus_TDR-Subvention\"/\"conv_to_USD\")-\"serviceTaxUSD\" as \"CollectionMinusGST&TDRSUB\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from (\n  select *,\n  (\"collection_elt2\"-\"serviceTaxUSD\") as \"collection_minus_GST_elt2\",\n  case when \"emi_subvention_rate\" is not null then round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*(\"emi_subvention_rate\")/100)))\n      else round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*\"TDR\")),2) end as \"Collection_minus_TDR-Subvention\"\n\n  from (\n  (select *,\n  case when \"paymentCountry\" like 'India' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.20)) else 0 end as \"serviceTaxUSD\"\n     from (\n  select *,round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") as \"collection_elt2\" from(\n   select * from((                                                                        \n  select * from(\n    (select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\n   from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" \n         where \"orderNumber\" like '%CSTM_UPG%' and \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C')\n                    group by 1,2,3) payout\n  left join\n\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"orderNumber_elt2\") as \"orderNumber_elt2\",sum(\"collection_USD\") as \"collection_USD\",max(\"SellingPrice_USD\") as \"SellingPrice_USD\",\n  sum(\"order_selling_price\") as \"order_selling_price_elt2\" ,max(\"parent_collection_USD\") as \"parent_collection_USD\", max(\"currency\") as \"currency\",max(\"paymentCountry\") as \"paymentCountry\",max(\"paymentGeo\") as \"paymentGeo_\"\n   from (select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"\n         from(\n  select * from (\n  select * from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01' and \"orderNumber\" is not null) A\n\n  left join\n\n  (select \"userEmail\" as \"uE\",\"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" like '%CSTM_UPG%' and \"ndate\">='2022-01-01'\n  group by 1,2)B\n  on A.\"userEmail\"=B.\"uE\" and A.\"Program Name\"=B.\"PN\")) where \"oN\" is not null))where \"mapped_reconciliation_id\" is not null\n  group by 1,2)elt2\n    left join\n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"\n  ))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"))F\n  left join\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"Program Name_1\",max(\"ndate_\") as \"ndate_parent\",max(\"order_selling_price_parent\") as \"order_selling_price_parent\", max(\"parent_conv_to_USD\") as \"parent_conv_to_USD\" from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01')u1\n    left join\n  (select *,\n   case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"parent_conv_to_USD\"\n   from((select  \"reconciliation_id\" as \"mp\",sum(\"order_selling_price\") as \"order_selling_price_parent\",max(\"ndate\") as \"ndate_\",max(\"currency\") as \"currency\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  group by 1)O\n                left join\n                (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")K\n                 on extract(year from O.\"ndate_\") =  extract(year from to_date(K.\"Month\")) and extract(month from O.\"ndate_\") =   extract(month from to_date(K.\"Month\"))\n                ))u2\n    on u1.\"mapped_reconciliation_id\" =u2.\"mp\") where \"mp\" is not null\n  group by 1,2)G\n  on F.\"Email\"=G.\"email\" and F.\"Program Name\"=G.\"Program Name_1\"))))main\n  left join\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" )emi\n  on main.\"orderNumber_elt2\"=emi.\"orderNumber\" and main.\"reconciliation_id_\"=emi.\"reconciliation_id\"))))))where \"flag_diff\"=1\n  )\n\n  union all\n  -----extension\n      select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from \n  (\n  select *,\"final_payout\"-\"FinalPayout_elt2\" as \"Deviation in Payout\" from (\n  select *,\n    case when abs(\"final_payout\"-\"FinalPayout_elt2\")>1 then 1 else 0 end as \"flag_diff\",'Extension' as \"order\" from (\n  select *, greatest((\"revenueForPayout\"*(\"payoutPercentage\"/100)),\"minPayout\"/\"deductionsCurrency_to_USD\") as \"FinalPayout_elt2\" from (\n  select *,\n  \"CollectionMinusGST&TDRSUB\"-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"-\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"\n      -\"TeachingAssistants_cost\"-\"Platform_cost\" as \"revenueForPayout_1\", \"Revenue_for_payout_calculation\" as \"revenueForPayout\" from (\n  select *,((\"Collection_minus_TDR-Subvention\"/\"conv_to_USD\")-\"serviceTaxUSD\") as \"CollectionMinusGST&TDRSUB\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price_elt2\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from(\n  select *,\n  \"collection_elt2\"-\"serviceTaxUSD\" as \"collection_minus_GST_elt2\",\n  case when \"emi_subvention_rate\" is not null then round((\"order_selling_price_elt2\"-(\"order_selling_price_elt2\"*(\"emi_subvention_rate\")/100)))\n      else round((\"order_selling_price_elt2\"-(\"order_selling_price_elt2\"*\"TDR\")),2) end as \"Collection_minus_TDR-Subvention\"\n  from(\n   select *,\n  case when \"paymentCountry\" like 'India' then round((\"order_selling_price_elt2\"/\"conv_to_USD\") * ( 1 - (1/1.18)))\n  when \"paymentCountry\" like 'Singapore' then round((\"order_selling_price_elt2\"/\"conv_to_USD\") * ( 1 - (1/1.07)))\n  when \"paymentCountry\" like 'United Kingdom' then round((\"order_selling_price_elt2\"/\"conv_to_USD\") * ( 1 - (1/1.20))) else 0 end as \"serviceTaxUSD\"\n     from (                                                                        \n  select * from (\n  (select *,(\"order_selling_price_elt2\"/\"conv_to_USD\") as \"collection_elt2\" from (\n  ((select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\" \n    from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\"='Extn' and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C') group by 1,2,3)payout\n  left join\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"paymentCountry\") as \"paymentCountry\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n  --last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\" desc) \n         max(\"orderNumber_elt2\") as \"orderNumber_elt2\",max(\"University Name\") as \"University Name\",sum(\"order_selling_price\") as \"order_selling_price_elt2\",max(\"ndate\") as \"ndate\",max(\"paymentGeo\") as \"paymentGeo_\"\n                  from (select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"orderNumber\" like '%EXTN%' and \"ndate\">='2022-07-01' and \"Program Type\"  in ('PG','Bootcamp','Study Abroad'))\n  where \"orderNumber\" like '%EXTN%' and \"ndate\">='2022-07-01' and \"Program Type\"  in ('PG','Bootcamp','Study Abroad')\n  group by 1,2\n  )elt2\n  LEFT JOIN \n  (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\") rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n  LEFT JOIN \n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"))) main\n  left join\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" )emi\n  on main.\"orderNumber_elt2\"=emi.\"orderNumber\" and main.\"reconciliation_id_\"=emi.\"reconciliation_id\" )))))))where \"flag_diff\"=1)\n  ) \n\n  union all\n  ----refund\n  select \"Email\",\"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\", \"Deviation in Payout\" as \"Deviation\",'Payout Check' as \"Category\",\n  \"order\" as \"Sub-Category\",'Deviation in Payout' as \"Status\" from\n  (\n  select *,\"final_payout1\"-\"final_payout1\" as \"Deviation in Payout\" from (\n  select *,case when abs(\"final_payout1\"-\"final_payout1\") >1 then 1 else 0 end as \"flag_diff\",'Refund' as \"order\" from (\n  select *, \n  case when abs(\"order_payout\")>\"FinalPayout_elt2_order\" then \"FinalPayout_elt2_order\"*(-1) else \"order_payout\" end as \"FinalPayoutRefund_\",\"final_payout1\" as \"FinalPayoutRefund\"\n  from (\n  select *, \n  GREATEST ((\"partialRefundAmount\"/\"conv_to_USD_\") *(\"payoutPercentage\"/100) ,\"minPayout\") * (-1) as \"order_payout\"\n  from (\n  (select * from(                                                                        \n  (select \"Email\",\"Program Name\",\"University_flag\",sum(\"final_payout\") as \"final_payout1\",max(\"minPayout\"/\"deductionsCurrency_to_USD\") as \"minPayout\",max(\"payoutPercentage\") as \"payoutPercentage\",\n   sum(\"collection_amount\") as \"collection_amount\",max(\"orderNumber\") as \"orderNumber\", max(\"paymentGeo\") as \"paymentGeo\" from \n   (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\" in ('Refund','Chargeback') and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C'\n  order by \"latest_payment_date\")group by 1,2,3)pay\n  left join\n  (select \"userEmail\",\"Program Name\" as \"Program Name_\",sum(\"refund_elt2_USD\") as \"refund_elt2_USD\" ,max(\"Sub-Category\") as \"Sub-Category\",\n   sum(\"partialRefundAmount\") as \"partialRefundAmount\", max(\"conv_to_USD_\") as \"conv_to_USD_\" from(\n  select *,(\"partialRefundAmount\"/\"conv_to_USD_\") as \"refund_elt2_USD\",\n  case when \"Flag\"=1 then 'Partial Refund' else 'Full Refund' end as \"Sub-Category\"\n  from (\n  select *,\n  case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD_\" from(\n  (select *,\"order_selling_price_order\"-\"partialRefundAmount\",\n  case when abs(\"order_selling_price_order\"-\"partialRefundAmount\")>1 then 1 else 0 end as \"Flag\" from(\n  select * from(\n  (select \"userEmail\",\"Program Name\",max(\"refundedOrderNumber\") as \"refundedOrderNumber\",sum(\"partialRefundAmount\") as \"partialRefundAmount\",max(\"ndate\") as \"ndate\", \n   max(\"currency\") as \"currency\" from (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"refundedOrderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-07-01' and \"partialRefundAmount\">0\n  order by \"userEmail\",\"Program Name\")group by 1,2)A\n\n  left join\n\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"PName\",sum(\"order_selling_price\") as \"order_selling_price_order\"\n  from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"orderNumber\" is not null and \"Program Type\" in ('PG','Bootcamp','Study Abroad') \n  group by \"userEmail\",\"Program Name\")B\n    on A.\"userEmail\"=B.\"email\" and A.\"Program Name\"=B.\"PName\")))elt2\n  left join\n  (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\") rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))))order by \"ndate\")\n    group by 1,2 )elt\n  on pay.\"Email\"=elt.\"userEmail\" and pay.\"Program Name\"=elt.\"Program Name_\")\n  )rfd\n\n    left join\n  ----------------------\n  --order+partial\n  (\n  (select \"Email\" as \"Email_\",\"Program Name\" as \"Program Name_\",\"universityFlag\" as \"University_\",\"final_payout_elt2\" as \"FinalPayout_elt2_order\",\"orderNumber\" as \"order_Number\"  \n   from (\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n  where \"order_type\"='Order' and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C') payout\n\n  left join\n\n  (select *, \n  GREATEST((\"revenueForPayoutUSD\")* (\"payoutPercentage\"/100), \"minPayout\") as \"final_payout_elt2\"\n  from(\n  select \"userEmail\",\"Program Name\" as \"Program_Name\",\"universityFlag\",max(\"ndate\") as \"ndate_elt2\",max(\"latest_orderNumber\"),\n  sum(\"order_selling_price\"/\"conv_to_USD\") as \"collection_elt2_USD\",\n  sum(\"collection_minusGSTelt2\"/\"conv_to_USD\") as \"collection_minusGSTelt2_USD\",\n  sum(\"collectionMinusGST&TDRSub\"/\"conv_to_USD\") as \"collectionMinusGST&TDRSub_USD\",\n  sum((\"collectionMinusGST&TDRSub\"/\"conv_to_USD\")-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"\n     -\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"-\"TeachingAssistants_cost\"\n     -\"Platform_cost\") as \"revenueForPayoutUSD\",max(\"payoutPercentage\") as \"payoutPercentage\",max(\"minPayout\"/\"deductionsCurrency_to_USD\") as \"minPayout\"\n  from (\n  select *,\n  \"collection_excl_subvention\"-\"serviceTax_elt2\" as \"collectionMinusGST&TDRSub\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from(\n  select *,\"order_selling_price\"-\"serviceTax_elt2\" as \"collection_minusGSTelt2\",\n  case when \"emi_subvention_rate\" is not null then \"order_selling_price\"-(\"order_selling_price\"*\"emi_subvention_rate\"/100)\n  else \"order_selling_price\"-(\"order_selling_price\"*\"TDR\") end as \"collection_excl_subvention\"\n  from(\n  select *,\n  case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"conv_to_USD\",\n  case when \"deductionsCurrency\" = 'USD' THEN 1\n           when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"deductionsCurrency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"deductionsCurrency_to_USD\",\n  case when \"paymentCountry\" like 'India' then \"order_selling_price\" * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then \"order_selling_price\" * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then \"order_selling_price\"* ( 1 - (1/1.20)) else 0 end as \"serviceTax_elt2\"\n  from (\n  (select * from (\n  select *,\n  case when abs(sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\") -\"total_collection\")>1 then 0 else 1 end \"Completed_order_Check\"\n  from (\n  select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"latest_orderNumber\", \n  case when \"SellingPrice_USD\" is null then sum(\"collection_USD\") over (partition by \"userEmail\",\"Program Name\")\n  else \"SellingPrice_USD\" end as \"total_collection\" from (\n  (select * from (select *, case when (lower(\"paymentCourse\") like '%getting started%' or  lower(\"paymentCourse\") like '%complimentary%') and\n  count(distinct \"paymentCourse\" ) over (partition by \"userEmail\",\"Program Name\") = 1 then 1\n      Else 0 end as \"only_prep_bought\"\n          from (select * from ((select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"collection_USD\" is not null and \"ndate\">='2022-07-01'\n                                and \"ndate\"<current_date and \"collection_USD\">0) A left join\n               (select distinct \"mapped_reconciliation_id\" as \"mp\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"mapped_reconciliation_id\" is not null and not(\"Program Name\" like ('%Obsolete courses%'))) B on A.\"reconciliation_id\" = B.\"mp\" )))\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" is not null and not(\"orderNumber\" like any('CSTM_UPG%','%EXTN%'))) u1\n\n  left join \n\n  (select \"userEmail\" as \"uE\", \"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"orderNumber\" like any ('CSTM_UPG%')  and \"Program Type\"  in ('PG','Bootcamp','Study Abroad') and not(\"Program Name\" like ('%Obsolete courses%')) --\n  group by 1,2) u2\n\n  on u1.\"userEmail\"=u2.\"uE\" and u1.\"Program Name\"=u2.\"PN\")\n  where \"only_prep_bought\"!=1 and \"oN\" is null and \"mp\" is null)) where \"Completed_order_Check\"=1) elt2\n\n  LEFT JOIN \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate on \n   extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) and extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\n  LEFT JOIN (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\n  LEFT JOIN (select \"orderNumber\" as \"orderNumber_emi\",\"reconciliation_id\" as \"reconciliation_id_emi\",\"paymentGateway\",\n             \"order_selling_price\" as \"order_selling_price_emi\",\n           \"emi_subvention_rate\", \"TDR\",\"POS_subvention_excluded\",\"Collection_excl_subvention_USD\"\n             from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\") emi\n      ON elt2.\"reconciliation_id\" = emi.\"reconciliation_id_emi\"  and elt2.\"orderNumber\" = emi.\"orderNumber_emi\"))))\n      group by 1,2,3))elt\n\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program_Name\" and payout.\"University_flag\"=elt.\"universityFlag\")\n  where \"final_payout_elt2\" is not null\n  )\n\n  union all\n  --upgrade\n  select \"Email\" as \"Email_\",\"Program Name\" as \"Program Name_\",\"University_flag\" as \"University_\",\"FinalPayout_elt2\" as \"FinalPayout_elt2_order\",\"order_Number\" from (\n  select *,\n    case when \"University_flag\"='IU' then 0 else greatest((\"revenueForPayout\"*(\"payoutPercentage\"/100)),\"minPayout\"/\"deductionsCurrency_to_USD\") end as \"FinalPayout_elt2\" from (\n  select *,\n  \"CollectionMinusGST&TDRSUB\"-\"Affiliate_payment_cost\"-\"FinanceCharges_cost\"-\"SalesCharges_cost\"-\"MarketingCharges_cost\"-\"Voucher_cost\"-\"Instructor_cost\"\n      -\"TeachingAssistants_cost\"-\"Platform_cost\" as \"revenueForPayout\" from (\n  select *,\n  (\"Collection_minus_TDR-Subvention\"/\"conv_to_USD\")-\"serviceTaxUSD\" as \"CollectionMinusGST&TDRSUB\",\n  (\"affiliatePaymentCosts\" / \"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"financeCharges\") as \"FinanceCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"SalesCharges\") as \"SalesCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"marketingCharges\") as \"MarketingCharges_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"voucherCosts\") as \"Voucher_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"instructorCosts\") as \"Instructor_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  ((\"order_selling_price\"/ \"conv_to_USD\")*\"platformCosts\") as \"Platform_cost\"\n  from (\n  select *,\n  (\"collection_elt2\"-\"serviceTaxUSD\") as \"collection_minus_GST_elt2\",\n  case when \"emi_subvention_rate\" is not null then round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*(\"emi_subvention_rate\")/100)))\n      else round(((\"order_selling_price_elt2\"+\"order_selling_price_parent\")-((\"order_selling_price_elt2\"+\"order_selling_price_parent\")*\"TDR\")),2) end as \"Collection_minus_TDR-Subvention\"\n\n  from (\n  (select *,\n  case when \"paymentCountry\" like 'India' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.18))\n  when \"paymentCountry\" like 'Singapore' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.07))\n  when \"paymentCountry\" like 'United Kingdom' then round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") * ( 1 - (1/1.20)) else 0 end as \"serviceTaxUSD\"\n     from (\n  select *,round((\"order_selling_price_elt2\"/\"conv_to_USD\")+(\"order_selling_price_parent\")/\"parent_conv_to_USD\") as \"collection_elt2\" from(\n   select * from((                                                                        \n  select * from(\n    (select \"Email\",\"Program Name\",\"University_flag\",max(\"order_type\") as \"order_type\",max(\"orderNumber\") as \"order_Number\",max(\"reconciliation_id\") as \"reconciliation_id_\",\n    round(max(\"collection_amount\"),1) as \"collection_amount\",round(max(\"collection_minus_GST\")) as \"collection_minus_GST\",max(\"latest_payment_date\") as \"latest_payment_date\",\n   max(\"collection_minus_GST_and_TDR_subvention_costs\") as \"collection_minus_GST_and_TDR_subvention_costs\",max(\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n   max(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",max(\"final_payout\") as \"final_payout\",max(\"paymentGeo\") as \"payment_Geo\",max(\"conv_to_USD\") as \"conv_to_USD\"\n   from (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" \n         where \"orderNumber\" like '%CSTM_UPG%' and \"latest_payment_date\">='2022-07-01' and \"order_type\"='Order' and \"paymentQueryType\"='B2C')\n                    group by 1,2,3) payout\n  left join\n\n  (select * from((select \"userEmail\",\"Program Name\" as \"Program Name_\",max(\"orderNumber_elt2\") as \"orderNumber_elt2\",sum(\"collection_USD\") as \"collection_USD\",max(\"SellingPrice_USD\") as \"SellingPrice_USD\",\n  sum(\"order_selling_price\") as \"order_selling_price_elt2\" ,max(\"parent_collection_USD\") as \"parent_collection_USD\", max(\"currency\") as \"currency\",max(\"paymentCountry\") as \"paymentCountry\",max(\"paymentGeo\") as \"paymentGeo_\"\n   from (select *,last_value(\"orderNumber\") over (partition by \"userEmail\",\"Program Name\" order by \"ndate\") as \"orderNumber_elt2\"\n         from(\n  select * from (\n  select * from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01' and \"orderNumber\" is not null) A\n\n  left join\n\n  (select \"userEmail\" as \"uE\",\"Program Name\" as \"PN\",max(\"orderNumber\") as \"oN\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"orderNumber\" like '%CSTM_UPG%' and \"ndate\">='2022-01-01'\n  group by 1,2)B\n  on A.\"userEmail\"=B.\"uE\" and A.\"Program Name\"=B.\"PN\")) where \"oN\" is not null))where \"mapped_reconciliation_id\" is not null\n  group by 1,2)elt2\n    left join\n  (select distinct * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\")  pgpay_inp on  \n   elt2.\"Program Name_\" = pgpay_inp.\"programName\"      and elt2.\"paymentGeo_\" = pgpay_inp.\"paymentGeo\"\n  ))elt\n  on payout.\"Email\"=elt.\"userEmail\" and payout.\"Program Name\"=elt.\"Program Name_\" and payout.\"University_flag\"=elt.\"universityFlag\"))F\n  left join\n  (select \"userEmail\" as \"email\",\"Program Name\" as \"Program Name_1\",max(\"ndate_\") as \"ndate_parent\",max(\"order_selling_price_parent\") as \"order_selling_price_parent\", max(\"parent_conv_to_USD\") as \"parent_conv_to_USD\" from (\n  (select * from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \"Program Type\" in ('PG','Bootcamp','Study Abroad') and \"ndate\">='2022-01-01')u1\n    left join\n  (select *,\n   case when \"currency\" = 'USD' THEN 1\n           when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n           when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n           when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n           when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n           when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\" \n           when \"currency\" = 'SGD' THEN \"SGD.to.INR\"/\"INR.to.1.USD\" end as \"parent_conv_to_USD\"\n   from((select  \"reconciliation_id\" as \"mp\",sum(\"order_selling_price\") as \"order_selling_price_parent\",max(\"ndate\") as \"ndate_\",max(\"currency\") as \"currency\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  group by 1)O\n                left join\n                (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")K\n                 on extract(year from O.\"ndate_\") =  extract(year from to_date(K.\"Month\")) and extract(month from O.\"ndate_\") =   extract(month from to_date(K.\"Month\"))\n                ))u2\n    on u1.\"mapped_reconciliation_id\" =u2.\"mp\") where \"mp\" is not null\n  group by 1,2)G\n  on F.\"Email\"=G.\"email\" and F.\"Program Name\"=G.\"Program Name_1\"))))main\n  left join\n  (select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" )emi\n  on main.\"orderNumber_elt2\"=emi.\"orderNumber\" and main.\"reconciliation_id_\"=emi.\"reconciliation_id\"))))))ord\n  on rfd.\"Email\"=ord.\"Email_\" and rfd.\"Program Name\"=ord.\"Program Name_\" and rfd.\"University_flag\"=ord.\"University_\")))) where \"flag_diff\"=1)\n  )\n\nunion all\n------------------------------------\n----checkpoint 8--------------------\n------------------------------------\nselect \"Email\", \"Program Name\", \"orderNumber\" as \"Order Number\", \"paymentGeo\" as \"Payment Geo\", null as \"Month\", \"University_flag\" as \"University\",\ncase when \"flag1\"=1 then \"collection_amount\"-\"collection_amount1\"\n        when \"flag2\"=1 then \"collection_minus_GST\"-\"collection_minus_GST1\"\n        when \"flag3\"=1 then \"Revenue_for_payout_calculation\"-\"Revenue_for_payout_calculation1\"\n        when \"flag4\"=1 then \"final_payout\"-\"final_payout1\" else null end as \"Deviation\",\n        'Historical Data Check' as \"Category\",\n case when \"flag1\"=1 then 'Collection'\n        when \"flag2\"=1 then 'Collection minus GST' \n        when \"flag3\"=1 then 'Revenue for Payout' \n        when \"flag4\"=1 then 'Final Payout' else null end as \"Sub-Category\",'Deviation from Historical Data' as \"Status\"  from (\nselect *,\ncase when abs(\"collection_amount\"-\"collection_amount1\")>1 then 1 else 0 end as \"flag1\",\ncase when abs(\"collection_minus_GST\"-\"collection_minus_GST1\")>1 then 1 else 0 end as \"flag2\",\ncase when abs(\"Revenue_for_payout_calculation\"-\"Revenue_for_payout_calculation1\")>1 then 1 else 0 end as \"flag3\",\ncase when abs(\"final_payout\"-\"final_payout1\")>1 then 1 else 0 end as \"flag4\"\nfrom(\n(select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\nwhere \"latest_payment_date\"<to_date(extract(year from current_date)||'-'||extract(month from current_date)||'-01') and \"latest_payment_date\">='2022-07-01' and \"paymentQueryType\"='B2C')A\n\nleft join\n(select \"Email\" as \"email\",\"Program Name\" as \"Program_Name\",\"orderNumber\" as \"orderNumber1\",\"order_type\" as \"orderType\",\"University_flag\" as \"UniversityFlag\",\"collection_amount\"  as \"collection_amount1\",\n \"collection_minus_GST\" as \"collection_minus_GST1\",\"Revenue_for_payout_calculation\" as \"Revenue_for_payout_calculation1\",\"final_payout\" as \"final_payout1\"\n from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_freezed_table\")B\n \n on A.\"Email\"=B.\"email\" and A.\"Program Name\"=B.\"Program_Name\" and A.\"order_type\"=B.\"orderType\" and A.\"University_flag\"=B.\"UniversityFlag\" and A.\"orderNumber\"=B.\"orderNumber1\")\n        where \"email\" is not null and \"orderNumber\" not in ('CSTM_UPG_9XLOXNHMWO4','CSTM_6X4GCSDEWCF')\n) where \"flag1\"=1 or \"flag2\"=1 or\n        \"flag3\"=1 or \"flag4\"=1\n        \n)"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591242":{"id":2591242,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-400,"y":80,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"b2b_payout_till_june_2022"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CREATE OR REPLACE TABLE \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"b2b_payout_till_june_2022\" as\nselect \nNULL as \"Email\",\n'Order' as \"order_type\",\n\"delivery_date\" as \"paymentDate\",\nNULL as \"reconciliation_id\",\nNULL as \"ReconcileOption\",\n\"b2b_orderNumber\" as \"orderNumber\",\nNULL as \"refundedOrderNumber\",\n\"currencyisocode\"  as \"currency\",\n\"Program Name\" as \"paymentCourse\",\n\"Program Name\" as \"Program Name\",\n\"geo\" as \"paymentGeo\",\n\"Country\" as \"paymentCountry\",\nNULL as \"paymentTrainingType\",\n'B2B' as \"paymentQueryType\",\nNULL as \"paymentCategory\",\nNULL as \"paymentGateway\",\nNULL as \"RefundReconciliation_id\",\nNULL as \"refundUnit\",\nNULL as \"partialRefundAmount\",\n\"delivery_date\" as \"ndate\",\nNULL as \"EMITerm\",\nNULL as \"fee\",\nNULL as \"applicableOnwards\",\nNULL as \"emi_subvention_rate\",\nNULL as \"TDR\",\nNULL as \"POS_subvention_excluded\",\nNULL as \"POS_order_selling_price\",\nNULL as \"GST\",\nNULL as \"selling_price\",\n\"universityFlag\" \"University_flag\",\n\"deductionsCurrency\",\n\"affiliatePaymentCosts\",\n\"minPayout\",\n\"payoutPercentage\",\n\"minASP\",\n\"maxASP\",\n\"financeCharges\",\n\"SalesCharges\",\n\"marketingCharges\",\n\"voucherCosts\",\n\"instructorCosts\",\n\"teachingAssistantsCosts\",\n\"platformCosts\",\nNULL as \"serviceTax\",\n1 as \"main_course_cd\",\nNULL as \"prep_course_cd\",\n\"conv_to_USD\",\n\"to_inr\",\n\"deductionsCurrency_to_USD\",\n/* added as part of order details onboarding on 20211207 */\nNULL as \"CourseName\",\nNULL as  \"Parent_orderNumber\",\nNULL as \"MRP_USD\",\nNULL as \"parent_collection_USD\",\nnull as \"discount_Amount_USD\",\nnull as \"discount_Amount_INR\",\nNULL as \"discount_percentage\",\n/* end of order details onboarding on 20211207 */\n\"yr\",\n\"month\",\n\"delivery_date\" as \"first_payment_date\",\n\"b2b_orderNumber\" as \"first_order_number\",\nNULL as \"first_reconciliation_id\",\n\"delivery_date\" as \"latest_payment_date\",\n\"b2b_orderNumber\" as \"latest_order_number\",\nNULL as \"latest_reconciliation_id\",\n1 as \"main_course_bought\",\n\"collection_amount\",\n\"collection_amount\" \"collection_minus_GST\",\n\"collection_amount\" \"collection_minus_GST_and_TDR_subvention_costs\",\nNULL as \"Affiliate_payment_cost\",\nNULL as \"FinanceCharges_cost\",\nNULL as \"SalesCharges_cost\",\nNULL as \"MarketingCharges_cost\",\nNULL as \"Voucher_cost\",\nNULL as \"Instructor_cost\",\nNULL as \"TeachingAssistants_cost\",\nNULL as \"Platform_cost\",\n\"collection_amount\" as \"Revenue_for_payout_calculation\",\nNULL as \"order_payout\",\n\"final_payout\",\n1 as \"latest_order_row\",\nNULL as \"Email_wise_payout\",\nNULL as \"refund_flag\",\n'Complete order' as \"Order_tag\",\n\"number of participants\",\n\"account name\",\n\"USD.to.INR\",\nnull as \"cohort_name\",\nNULL as \"serviceTax_INR\",\nNULL as \"order_selling_price_USD\",\nNULL as \"collection_minus_GST_INR\",\nNULL as \"order_selling_price_INR\",\nNULL as \"POS_subvention_excluded_USD\", \nNULL as \"POS_subvention_excluded_INR\",\nNULL as \"collection_minus_GST_and_TDR_subvention_costs_INR\",\nNULL as \"Revenue_for_payout_calculation_INR\",\nNULL as \"order_payout_INR\",\nNULL as \"final_payout_INR\"\nfrom\n        (select b2b.*,\n        case when \"currencyisocode\"  = 'USD' THEN 1\n               when \"currencyisocode\"  = 'INR' THEN \"INR.to.1.USD\"\n               when \"currencyisocode\"  = 'AUD' THEN \"AUD.to.1.USD\"\n               when \"currencyisocode\"  = 'GBP' THEN \"GBP.to.1.USD\"\n               when \"currencyisocode\"  = 'EUR' THEN \"EUR.to.1.USD\"\n               when \"currencyisocode\"  = 'CAD' THEN \"CAD.to.1.USD\"\n              end as \"conv_to_USD\",\n\n        case when \"currencyisocode\" ='INR' then 1\n                      when \"currencyisocode\"  = 'USD' THEN \"USD.to.INR\"\n                      when \"currencyisocode\"  = 'AUD' THEN \"AUD.to.INR\"\n                      when \"currencyisocode\"  = 'GBP' THEN \"GBP.to.INR\"\n                      when \"currencyisocode\"  = 'EUR' THEN \"EUR.to.INR\"\n                      when \"currencyisocode\"  = 'CAD' THEN \"CAD.to.INR\"\n        END as \"to_inr\",\n\n        case when \"deductionsCurrency\" = 'USD' THEN 1\n                       when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n                       when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                       when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                       when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                       when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\"\n        end as \"deductionsCurrency_to_USD\",\n         \n        inr_conv.\"USD.to.INR\",\n\n        \"milestone_amount\"/\"conv_to_USD\" as \"collection_amount\",\n        \"universityFlag\",\n        \"deductionsCurrency\",\n        \"affiliatePaymentCosts\",\n        \"minPayout\",\n        \"payoutPercentage\",\n        \"minASP\",\n        \"maxASP\",\n        \"financeCharges\",\n        \"SalesCharges\",\n        \"marketingCharges\",\n        \"voucherCosts\",\n        \"instructorCosts\",\n        \"teachingAssistantsCosts\",\n        \"platformCosts\",\n        greatest(\"payoutPercentage\"/100 * \"collection_amount\", \"minPayout\"/\"deductionsCurrency_to_USD\") as \"final_payout\"\n        from\n\n                (select\n                //\"milestone_id__c\" \"milestone_id\",\n                \"Order_Number__c\" \"b2b_orderNumber\",\n                \"Course_Text__c\" \"Program Name\",\n                //\"Type\" \"training_type\",\n                IFNULL(b2b_orders.\"Delivery_Date__c\", \"Start_Date__c\") \"delivery_date\",\n                \"Milestone_Amount__c\" \"milestone_amount\",\n                milestones.\"CurrencyIsoCode\" as \"currencyisocode\",\n                //\"Order_BU_Type__c\",\n               case \n                    when \"Order_BU_Type__c\"='US' then 'AMERICAS'\n                    else \"Order_BU_Type__c\" end\n                \"geo\",\n                \"Billing_Country__c\" \"Country\",\n                \"Number_of_Participants__c\" \"number of participants\",\n                \"Milestone_Account_Name__c\" \"account name\",\n                //\"milestone_opportunity_number__c\",\n                //\"milestone_opportunity_label__c\",\n                //\"milestone_link__c\",\n                extract(year from to_date(\"delivery_date\")) as \"yr\", \n                extract(month from to_date(\"delivery_date\")) as \"month\"\n                from \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_milestone__c\" milestones\n                LEFT JOIN \"SL_ANALYTICS_DB\".\"LRS_ANALYTICS\".\"target_b2b_order\" b2b_orders\n                ON b2b_orders.\"OrderNumber\" = milestones.\"Order_Number__c\"\n                where \"Milestone_Status__c\" = 'Delivered'\n                --AA: 20210719: Removed hardcoding and pulled PG courses\n                --and\n                --(\n                --  lower(\"course_text__c\") like any ('%post graduate program%')\n                --  or \n                --  lower(\"course_text__c\") like any ('%professional certificate program in blockchain by iit kanpur%')\n                --)\n                and lower(\"Course_Text__c\") in (\n                select distinct lower(\"Program Name\") from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\" where \n                \"Program Type\" = 'PG' and lower(\"Program Name\") not like '%getting started%' \n                )\n                order by IFNULL(b2b_orders.\"Delivery_Date__c\", \"Start_Date__c\") desc) b2b\n\n                left join \n                (select *, extract(year from to_date(\"Month\")) as \"yr\", extract(month from to_date(\"Month\")) as \"month\"\n                from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\")inr_conv\n                on b2b.\"yr\" = inr_conv.\"yr\"\n                and b2b.\"month\" = inr_conv.\"month\"\n\n                left join\n                (select * from \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"PG_payout_inputs\") payout_inputs\n                on b2b.\"Program Name\" = payout_inputs.\"programName\"\n                and b2b.\"geo\" = payout_inputs.\"paymentGeo\"\n        ) where \"paymentDate\"<='2022-07-01';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591243":{"id":2591243,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-128,"y":48,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"University PG programs Payout process_till31Dec2021 0"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"V_till31Dec2021_University PG programs Payout process_till31Dec2021"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591244":{"id":2591244,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":112,"y":400,"width":32,"height":32,"inputConnectorIDs":[2591334],"outputSuccessConnectorIDs":[2591220],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"b2b_payout_draft"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_draft\" as \nselect \"Order_Number__c\",\"paymentGeo\",\"geo\",\"milestone_mmyy\",\"payment_date\",\"Course_Text__c\",\"programName\",\"universityFlag\",\n\"payoutPercentage\",\"order_CurrencyIsoCode\",\"milestone_CurrencyIsoCode\",\"deductionsCurrency\",\n\"affiliatePaymentCosts\",\"minPayout\",\"minASP\",\"maxASP\",\"financeCharges\",\"SalesCharges\",\n\"marketingCharges\",\"voucherCosts\",\"instructorCosts\",\"teachingAssistantsCosts\",\"platformCosts\",\ncase when \"order_CurrencyIsoCode\"  = 'USD' THEN 1\n               when \"order_CurrencyIsoCode\"  = 'INR' THEN \"INR.to.1.USD\"\n               when \"order_CurrencyIsoCode\"  = 'AUD' THEN \"AUD.to.1.USD\"\n               when \"order_CurrencyIsoCode\"  = 'GBP' THEN \"GBP.to.1.USD\"\n               when \"order_CurrencyIsoCode\"  = 'EUR' THEN \"EUR.to.1.USD\"\n               when \"order_CurrencyIsoCode\"  = 'CAD' THEN \"CAD.to.1.USD\"\n              end as \"conv_to_USD\",--\"payment_received\"\nROUND(\"payment_received\"/\"conv_to_USD\") as \"payment_received\",--\"Order_Amount__c\"\nROUND(\"Order_Amount__c\"/\"conv_to_USD\") as \"Order_Amount__c\", --\"Sum Milestones Amount\"\nROUND(\"Sum Milestones Amount\"/\"conv_to_USD\") as \"Sum Milestones Amount\", --\"Payout per order\"\nROUND(\"Payout per order\"/\"conv_to_USD\") as \"Payout per order\", --\"Payout on Delivered Milstone\"\nROUND(\"Payout on Delivered Milstone\"/\"conv_to_USD\") as \"Payout on Delivered Milstone\", --\"Final_payout\"\nROUND(\"Final_payout\"/\"conv_to_USD\") as \"Final_payout\", --\"cumulative_payout\"\nROUND(\"cumulative_payout\"/\"conv_to_USD\") as \"cumulative_payout\", --\"remainder_payout\"\nROUND(\"remainder_payout\"/\"conv_to_USD\") as \"remainder_payout\"\nfrom \n(select *\n\t,\"Final_payout\"+NVL(LAG(\"Final_payout\") over (partition by \"Order_Number__c\",\"programName\",\"universityFlag\"  order by \"milestone_pdate\" asc),0) as \"cumulative_payout\"\n    ,case when \"Order_Amount__c\"<=\"payment_received\" then \"Payout per order\"-\"cumulative_payout\" \n    when \"Order_Amount__c\">\"payment_received\" then \n     (case when \"Payout on Delivered Milstone\"-\"cumulative_payout\"<=0 then \"Payout per order\"-\"cumulative_payout\" else \"Payout on Delivered Milstone\"-\"cumulative_payout\" end)\n    else null end as \"remainder_payout\",\n    TO_CHAR(date(\"milestone_pdate\"),'YYYYMM') \"milestone_mmyy\"\nfrom (\n    select  history.*,main.\"Course_Text__c\",\n    \"payment_received\"+NVL(LAG(NVL(\"payment_received\",0)) over (partition by main.\"Order_Number__c\" order by \"milestone_pdate\" asc),0) as \"cumulative\", \n    round(main.\"Order_Amount__c\") \"Order_Amount__c\",main.\"Sum Milestones Amount\",\n    (main.\"Order_Amount__c\"*payout.\"payoutPercentage\"/100) \"Payout per order\",\n    (main.\"Sum Milestones Amount\"*payout.\"payoutPercentage\"/100) \"Payout on Delivered Milstone\",\n    CASE when main.\"Sum Milestones Amount\"=round(main.\"Order_Amount__c\") and main.\"Order_Amount__c\">\"payment_received\" then case when (\"payment_received\"*payout.\"payoutPercentage\"/100) <0 then 0 else LEAST((\"payment_received\"*\"payoutPercentage\"/100),((\"Sum Milestones Amount\"-(\"cumulative\"-\"payment_received\"))*\"payoutPercentage\"/100)) end\n         when main.\"Sum Milestones Amount\"=round(main.\"Order_Amount__c\") and main.\"Order_Amount__c\"<=\"payment_received\" then (main.\"Order_Amount__c\"*payout.\"payoutPercentage\"/100)\n         when round(main.\"Order_Amount__c\")>main.\"Sum Milestones Amount\" and main.\"Sum Milestones Amount\"<=\"payment_received\" then (main.\"Sum Milestones Amount\"*payout.\"payoutPercentage\"/100)  \n         when round(main.\"Order_Amount__c\")>main.\"Sum Milestones Amount\" and main.\"Sum Milestones Amount\">\"payment_received\" --then (\"payment_received\"*payout.\"payoutPercentage\"/100)\n      then LEAST((\"payment_received\"*\"payoutPercentage\"/100),((\"Sum Milestones Amount\"-(\"cumulative\"-\"payment_received\"))*\"payoutPercentage\"/100))\n      else null\n    end as \"Final_payout\",\n    MIN(history.\"milestone_pdate\") \n      over (partition by main.\"Order_Number__c\",TO_CHAR(date(\"milestone_pdate\"),'YYYYMM') order by TO_CHAR(date(\"milestone_pdate\"),'YYYYMM')) as \"payment_date\",\n    case \n        when \"Order_BU_Type__c\"='US' then 'AMERICAS'\n        else \"Order_BU_Type__c\" end\n        \"geo\"\n    \t,payout.*,\n      main.\"CurrencyIsoCode\" \"milestone_CurrencyIsoCode\",\n      b2b_orders.\"CurrencyIsoCode\" \"order_CurrencyIsoCode\"\n  from \n(select *,\n sum(\"Amount__c\") over (partition by \"Order_Number__c\") as \"Sum Milestones Amount\"\n from \"MELV1N_CRM2\".\"target_milestone__c\" where   \"Milestone_Status__c\"='Delivered') main\nLEFT JOIN \n  \"LRS_ANALYTICS\".\"target_b2b_order\" b2b_orders\nON b2b_orders.\"OrderNumber\" = main.\"Order_Number__c\"\n\nleft join (\n\tselect \"Order_Number__c\", \n    \"milestone_pdate\",\n    NVL(\"Milestone_payment_received\",0)-NVL(\"OldValue\",0) as \"payment_received\"\nfrom (\n  \tselect  hist.\"ParentId\",hist.\"CreatedDate\" as \"milestone_pdate\",hist.\"OldValue\",hist.\"NewValue\" as \"Milestone_payment_received\",mile.\"Payment_Amount__c\",\n  \tmile.* \nfrom \"MELV1N_CRM2\".\"target_milestone__c\" mile\nleft join \n\t(select * from (select m.\"ParentId\",m.\"CreatedDate\",m.\"NewValue\",NVL(m.\"OldValue\",0) \"OldValue\",\n    row_number() over (partition by \"ParentId\",TO_CHAR(date(\"CreatedDate\"),'YYYYMM') order by \"CreatedDate\" desc) as \"rn\"\n    from \"MELV1N_CRM2\".\"target_Milestone__History__c\" m\n    where \n    \"Field\"='Payment_Amount__c' ) where \"rn\"=1) hist\n    on hist.\"ParentId\"=mile.\"Id\"\n  \torder by 1\n  ) where \n  \"Milestone_Status__c\" = 'Delivered'\n  and \"milestone_pdate\" is not null\n  group by 1,2,3 order by 1) history\n  on history.\"Order_Number__c\"=main.\"Order_Number__c\" \n  ------\nleft join \"PRODCT_TEMP\".\"PG_payout_inputs\" payout\non lower(payout.\"programName\") = lower(main.\"Course_Text__c\") and UPPER(payout.\"paymentGeo\")=UPPER(\"geo\")\n-----\nqualify row_number() over (partition by history.\"Order_Number__c\",\"milestone_pdate\",\"programName\",\"universityFlag\" order by \"milestone_pdate\")=1\norder by 1,2\n  )\n left join (select *,TO_CHAR(date(\"Month\"),'YYYYMM') \"MonthYY\" from \"PRODCT_TEMP\".\"conversion_rates_monthwise\" ) conv_rate\non \n\"milestone_mmyy\" = conv_rate.\"MonthYY\"\nwhere \"Final_payout\" is not null\n ) \n ;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591245":{"id":2591245,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":256,"y":400,"width":32,"height":32,"inputConnectorIDs":[2591220],"outputSuccessConnectorIDs":[2591336],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"b2b_payout_milestone"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"merge into ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_draft\" un\n\tusing \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" dim on lower(un.\"programName\") = lower(dim.\"Course\")\n    when matched then update set un.\"programName\" = dim.\"Program Name\";\n\n\ndelete from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_milestone\" \nwhere \"milestone_mmyy\" >= (\nselect max(\"milestone_mmyy\") from   ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_draft\" where \"Final_payout\" is not null);\n\ncommit;\n\n\ninsert into ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_milestone\"\nselect * from  ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_draft\"\nwhere \"Final_payout\" is not null \nand \"milestone_mmyy\"=(select max(\"milestone_mmyy\") from \"PRODCT_TEMP\".\"b2b_payout_draft\" where \"Final_payout\" is not null);\n\n\n/*create or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_milestone\"  as\nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"b2b_payout_draft\" \n*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591246":{"id":2591246,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":912,"y":736,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[2591227],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Snapshot_university_payout_freezed_table"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*delete from \"PRODCT_TEMP\".\"university_payout_table_freezed_table\"\n where \"ndate\" >= date_trunc('month', current_date);\n*/\n\ncreate or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_freezed_table\" as\n--INSERT INTO \"PRODCT_TEMP\".\"university_payout_table_freezed_table\"\nselect * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n --where \"ndate\" >= date_trunc('month', current_date) and \"ndate\" < date_trunc('month', current_date+10);\n where \"ndate\" >= '2022-07-01' and \"ndate\" < date_trunc('month', current_date+10)\n; \n\ndelete from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_freezed_table\"\n where \"ndate\" >= date_trunc('month', current_date);\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591247":{"id":2591247,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":1152,"y":736,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[2591269],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"if_check for_anomaly"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${dt.now().format(\"dd\")}"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"01"}}}},"visible":false},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt.now().format(\"dd\") == 5"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2591248":{"id":2591248,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":896,"y":160,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[2591219,2591226],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_freezed_table_till_last_month"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*create or replace table ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\" as      \nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\nwhere \"latest_payment_date\" < date_trunc(month,current_date)\n;\n*/\n\n\ndelete from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\nwhere \"latest_payment_date\" < '2023-02-01' and \"latest_payment_date\" >= '2022-07-01' \nand \"Program Name\" in('Product Management Bootcamp','UMass Amherst Digital Marketing Bootcamp');\n\n--and \"University_flag\" like 'SPJIMR';\n--and \n--where \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-25);\n\n\nINSERT INTO ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_freezed\"\n\nselect * from ${ev_sf_db_sl_analytics_db}.${ev_sf_schema_product_temp}.\"university_payout_table_with_b2b_temp\"\nwhere \"latest_payment_date\" < '2023-02-01' and \"latest_payment_date\" >= '2022-07-01' \nand \"Program Name\" in('Product Management Bootcamp','UMass Amherst Digital Marketing Bootcamp');\n\n--and \"University_flag\" like '%SPJIMR%';\n--where \"latest_payment_date\" < date_trunc(month,current_date) and \"latest_payment_date\" >= date_trunc(month,current_date-25);\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2899804":{"id":2899804,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":368,"y":832,"width":32,"height":32,"inputConnectorIDs":[2899801],"outputSuccessConnectorIDs":[2899935],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_PUBLIC_target_anomaly_alerts_stg_1"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"---------- Main select query starts from line 566 ------------\n\nCREATE OR REPLACE TABLE ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" AS\n\n------------- Orders CTE -------------------\nwith elt2_with_upg_orders as\n(\nselect distinct main.* exclude(\"New_Program Name\",\"New_paymentCourse\",\"New_reconciliation_id\",\"New_Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"New_Program Name\") end as \"New_Program Name\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"New_reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg2.\"paymentCourse\",main.\"New_paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg2.\"Program Type\",main.\"New_Program Type\") as \"New_Program Type\" \n\t\tfrom\n        \n    (select distinct main.*, \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"New_Program Name\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"New_Program Type\" \n\n\t\tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level og upgrades ------------------\n  \t\t-----------------------------------------------------------\n        left outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"New_reconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\n\n--------------------------------------------------------------------------------------------\n---------- To get all the valid orders with some derivations from unified_elt2 -------------\n--------------------------------------------------------------------------------------------\nelt2_orders_CTE as \n(\n  select a.* , --gst.\"GST\", \n\tcase when (lower(\"New_paymentCourse\") like '%getting started%' \n\t\t\t\tor  lower(\"New_paymentCourse\") like '%complimentary%') \n              and count(distinct \"New_paymentCourse\" ) over (partition by a.\"userEmail\",\"New_Program Name\") = 1 \n  \t\t\tthen 1\n\t\tElse 0 end as \"only_prep_bought\",   \n\tifnull(pr.\"serviceTax\",0) \"serviceTax_adjusted\",\n  \tmax(a.\"ndate\") over (partition by a.\"userEmail\",\"New_Program Name\",\"New_reconciliation_id\" ) as \"latest_payment_dt\",\n    round(sum(\"collection_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  as \"Total_Collection_USD\", \n\tcase when NVL(round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2),0) > 0 \n\t\t\t then round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  \n\t\t else \"Total_Collection_USD\" end \n\t\t as \"max_SellingPrice_USD\",\n\tcase when \"New_reconciliation_id\" is not null then 'Order' \n\t\twhen \"RefundReconciliation_id\" is not null then 'Refund' \n\t\telse NULL end \n\t\tas \"order_type\"\n         \n\tfrom elt2_with_upg_orders a\n\tleft join\n  \t(\n    \tselect * from ${ev_default_db_name}.melv1n_crm2.\"target_paymentReconciliations\"\n    ) PR\n  \tON PR.\"orderNumber\" = a.\"orderNumber\"\n  \t\tand pr.\"reconciliation_id\" = a.\"reconciliation_id\"\n\t\t\n    where a.\"orderNumber\" is not null \n\t\tand  \"collection_USD\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"New_Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad')\n\t\tand  a.\"orderNumber\" not like '%_EXTN_%' \n),\n\n--------------------------------------------------------------------------------------\n---------- Mapping orders with university programs and currency conversions ----------\n--------------------------------------------------------------------------------------\nuniversity_orders_with_conversion_CTE as \n(\n  select * from\t\t\t\n  (\n    select elt2.* , --exclude(\"payoutPercentage\"),\n            case when \"currency\" = 'USD' THEN 1\n             when \"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n             when \"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n             when \"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n             when \"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n             when \"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n             when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n            end as \"conv_to_USD\",\n            case when \"currency\"='INR' then 1\n                 when \"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"to_inr\",\t\t \n            case when \"deductionsCurrency\" = 'USD' THEN 1\n                 when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                 when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                 when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n                end as \"deductionsCurrency_to_USD\",\n            case when \"deductionsCurrency\"='INR' then 1\n                 when \"deductionsCurrency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"deductionsCurrency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"deductionsCurrency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"deductionsCurrency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"deductionsCurrency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"deductionsCurrency_to_INR\"\t\n  \n  \t\t\t\n        from \n  \t\t(\n              select elt2.* exclude(\"latest_payment_dt\",\"ndate\"),\n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"latest_payment_dt\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"latest_payment_dt\" \n            end \"latest_payment_dt\", -- Adjusted for getting started \n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"ndate\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"ndate\" \n            end \"ndate\", -- Adjusted for getting started \n\n            max(case when \"paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                   then NULL  \n                 when (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 or \"Total_Collection_USD\" > \"max_SellingPrice_USD\") \n                   then \"ndate\" end) over (partition by \"userEmail\",\"New_Program Name\")\n            \"main_bundles_max_ndate\", -- -- Adjusted for getting started purchased after the main bundle\n\n            pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", \n            pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", \n            pgpay_inp.\"instructorCosts\", pgpay_inp.\"teachingAssistantsCosts\", pgpay_inp.\"platformCosts\",\n            pgpay_inp.\"universityFlag\" , pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n            pgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\",pgpay_inp.\"maxASP\",pgpay_inp.\"Revised_Logic_Applicable_Flag\",\n\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"New_paymentCourse\" end as \"mainpaymentCourse\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"orderNumber\" end as \"mainorderNumber\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"cohort_name\" end as \"maincohort_name\" \n\n          \t,case when \"universityFlag\" ilike '%ihub%' and \"New_paymentCourse\" not ilike '%gettiing%started%' \n                    and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n                           or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n            then \n                dense_rank() over (partition by \"universityFlag\" order by \"New_reconciliation_id\") \n  \t\t\telse null end \"order_rank\"\n\n        from  elt2_orders_CTE elt2\n\t\t\n        ---------------------------------------------------------------------\n        ------------ PG payouts input sheet owned by product team -----------\n        ---------------------------------------------------------------------\n        LEFT JOIN \n        (\n            select distinct * from  ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" \n        ) pgpay_inp \n        on trim(elt2.\"New_Program Name\") = trim(pgpay_inp.\"programName\")     \n            and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n            and \"latest_payment_dt\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n            and \"latest_payment_dt\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n            and elt2.\"Total_Collection_USD\" >= pgpay_inp.\"minASP\" \n            and elt2.\"Total_Collection_USD\" <= pgpay_inp.\"maxASP\"\n            and pgpay_inp.\"universityFlag\" is not null \n            and pgpay_inp.\"programName\" is not null\n    \t)elt2\n    \n  \t\t------------------------------------------------------------------------------------------------\n  \t\t------------ Finance Control_Currency Conversion sheet for monthly conversion values -----------\n  \t\t------------------------------------------------------------------------------------------------\n        LEFT OUTER JOIN \n        ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n        on extract(year from elt2.\"latest_payment_dt\") =  extract(year from to_date(rate.\"Month\")) \n            and extract(month from elt2.\"latest_payment_dt\") =   extract(month from to_date(rate.\"Month\"))\n\n\t\t--where    elt2.\"order_type\" = 'Order' \n\t)\n),\n\n----------- Refunds CTE -------------\nelt2_with_upg_refunds as\n(\nselect distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg2.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg2.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom\n        \n    (select distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom \n        -- (select * from\n        ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n        -- where \"userEmail\" = 'denizzkut@gmail.com')\n        main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n\t\t\t\tand \"refundedOrderNumber\" is not null\n                and \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level of upgrades ------------------\n  \t\t-----------------------------------------------------------\n  \t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n                and \"refundedOrderNumber\" is not null\n\t\t\t\tand \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"RefundReconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\nelt2_refunds_monthly as \n(\n\tselect a.* exclude(\"cohort_name\"), --gst.\"GST\",\n\t\t--max(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"latest_payment_dt\",\n  \t\t\"order_latest_pdate\"  as \"latest_payment_dt\",\n\t\t--min(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"first_payment_dt\",\n\t\t\"ndate\" as \"first_payment_dt\",\n  \t\tcase when lower(\"paymentCourse\") like '%getting started%' and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",a.\"Program Name\") = 1 then 1\n\t\t\tElse 0 end as \"only_prep_bought\",   \n\t\t\n\t\tcase when a.\"reconciliation_id\" is not null then 'Order' \n\t\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\t\telse NULL end as \"order_type\",\n\t\tb.\"order ndate\",\n\t\t\"first_lvc_attended_date\",\n\t\tAt_least_1_LVC_attended\n\n\tfrom elt2_with_upg_refunds a \n\t \n  \t-----------------------------------------------------------\n  \t--------- getting orders for refund payout ----------------\n  \t-----------------------------------------------------------\n  \tinner join \n\t(\n\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\n\t\t\t\tmin(\"ndate\") as \"order ndate\" , \n      \t\t\tmin(\"latest_payment_date\") \"order_latest_pdate\",\n\t\t\t\tmin(\"first_lvc_attended_date\") \"first_lvc_attended_date\",\n\t\t\t\tmin(At_least_1_LVC_attended) At_least_1_LVC_attended \n\t\tfrom \n\t\t(\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\",\"first_lvc_attended_date\",At_least_1_LVC_attended \n\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\" ='Order' \n\t\t\t\tand At_least_1_LVC_attended = 1 \n\t\t\t\tand \"Revised_Logic_Applicable_Flag\" ilike 'yes' \n\t\t\t\tand \"latest_payment_date\" >= '2023-12-11' \n\t\tunion\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\",\"first_lvc_attended_date\",At_least_1_LVC_attended \n\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\" ='Order'\n\t\t\t\tand At_least_1_LVC_attended = 1 \n\t\t\t\tand \"Revised_Logic_Applicable_Flag\" ilike 'yes' \n\t\t\t\tand \"latest_payment_date\" >= '2023-12-11' \n\t\t)\n\t\tgroup by 1,2,3\n\t) b \n\ton a.\"userEmail\" = b.\"Email\" \n\t\tand a.\"Program Name\" = b.\"Program Name\"\n  \t\tand a.\"RefundReconciliation_id\" = b.\"reconciliation_id\"\n\n\twhere a.\"refundedOrderNumber\" is not null \n\t\tand \"partialRefundAmount\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad') \n\t\tand a.\"ndate\">= '2024-03-01' \n),\n\nmain_refunds_cte as\n(\n--------------------------------------------------------------------------------------\n---------- Mapping refunds with university programs and currency conversions ---------\n--------------------------------------------------------------------------------------\n\tselect elt2.*, odr.\"order_payout\" as \"odr_order_payout\",odr.\"order_payout_INR\" as \"odr_order_payout_INR\" ,ref.\"refund_payout_INR\", ref.\"refund_payout\",\n\t\tref.\"ref_POS_order_selling_price\",pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n\t\tpgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n\t\tpgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\" ,pgpay_inp.\"maxASP\",\"Revised_Logic_Applicable_Flag\",\n\t\t/*case when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else elt2.\"paymentCourse\" end as \"mainpaymentCourse\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n\t\t */\n  \t\tcase when \"only_prep_bought\" = 1 then NULL \n            else \"paymentCourse\" end as \"mainpaymentCourse\",\n        case when \"only_prep_bought\" = 1 then NULL \n            else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n  \n\t\tcase when elt2.\"currency\" = 'USD' THEN 1\n\t\t\t\t when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n\t\t\t\t when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"conv_to_USD\",\n\t\tcase when elt2.\"currency\"='INR' then 1\n\t\t\t\t\t  when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n\t\tend as \"to_inr\",\t\t \n\t\tcase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"deductionsCurrency_to_USD\"\n\n\tfrom elt2_refunds_monthly as  elt2\n\t \n  \t---------------------------------------------------------------------------------------------------\n\t------------ Finance Control_Currency Conversion sheet for monthly conversion values --------------\n\t---------------------------------------------------------------------------------------------------\n\tLEFT OUTER JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n\ton extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) \n\t\tand extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\t \n  \t-----------------------------------------------------------------------------\n\t------------ PG payouts input sheet owned by product team -------------------\n\t-----------------------------------------------------------------------------\n  \tLEFT JOIN \n\t(\n\t\tselect distinct * from  ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" \n\t)  pgpay_inp \n\ton elt2.\"Program Name\" = pgpay_inp.\"programName\"      \n\t\tand elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\t\tand elt2.\"order ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n\t\tand elt2.\"order ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" >= pgpay_inp.\"minASP\" \n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" <= pgpay_inp.\"maxASP\"\n\t\tand pgpay_inp.\"universityFlag\" is not null \n\t\tand pgpay_inp.\"programName\" is not null\n\t\t\n  \t\n\t-----------------------------------------------------------------------------\n  \t------------------ To get the orders payout for the same purchase -----------\n  \t-----------------------------------------------------------------------------\t\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"order_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"order_payout_INR\" \n\t\tfrom\n\t\t(\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\"='Order' \n         \n         \tunion \n\n\t\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\"='Order' \n\t\t\t\n\t\t)\n\t\tgroup by 1,2,3,4\n\t) odr \n\ton elt2.\"userEmail\" = odr.\"Email\" \n\t\tand  elt2.\"Program Name\" =  odr.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  odr.\"University_flag\"  \n  \t\tand elt2.\"RefundReconciliation_id\" =  odr.\"reconciliation_id\"   \n\t  \n \t-----------------------------------------------------------------------------\n  \t------ To get the previously made refund payouts for the same purchase ------\n  \t-----------------------------------------------------------------------------\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"RefundReconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"refund_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"refund_payout_INR\", \n\t\t\t\tsum(\"POS_order_selling_price\") as \"ref_POS_order_selling_price\" \n\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\"\n\t\twhere \"order_type\" like any ('Refund','Chargeback') \n\t\t\tand \"ndate\" <= '2022-03-31'\n\t\tgroup by 1,2,3,4\n\t) ref \n\ton elt2.\"userEmail\" = ref.\"Email\" \n\t\tand elt2.\"Program Name\" =  ref.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  ref.\"University_flag\" \n  \t\tand elt2.\"RefundReconciliation_id\" =  ref.\"RefundReconciliation_id\" \n\t  \n\twhere elt2.\"order_type\" like any ('Refund','Chargeback')\n\n),\n\norder_final_agg_cte as\n(\n select \n  main.\"userEmail\" as \"Email\",     \n  main.\"order_type\" as \"order_type\",\n  main.\"New_Program Name\" as \"Program Name\",\n  main.\"universityFlag\" as \"University_flag\",\n  \"New_reconciliation_id\" as \"reconciliation_id\", -- Added new column in the level of this table\n  max(\"mapped_reconciliation_id\") \"mapped_reconciliation_id\", -- Added on 20240305 : SP\n  max(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\n  max(\"main_bundles_max_ndate\") \"main_bundles_max_ndate\",\n  --max(main.\"reconciliation_id\" ) as \"reconciliation_id\",\n  REPLACE(NVL(max(case when main.\"mainorderNumber\" like '%_UPG_%' then 'ZZZ_'||main.\"mainorderNumber\"\n                        else main.\"mainorderNumber\" end\n                      ),\n              max( main.\"mainorderNumber\")),\n          'ZZZ_','') as \"orderNumber\",\n  NULL as \"refundedOrderNumber\",\n  max(main.\"New_Program Type\") \"Program Type\", -- Added on 20240305 : SP\n  max(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\n  max(main.\"paymentGateway\" ) as \"paymentGateway\" ,\n  max(main.\"paymentGeo\" ) as \"paymentGeo\" ,\n  max(main.\"paymentQueryType\" ) as \"paymentQueryType\" ,\n  max(main.\"ndate\") as \"ndate\",\n  sum(emi.\"POS_subvention_excluded\") as \"POS_subvention_excluded\" ,\n  sum(main.\"order_selling_price\") as \"POS_order_selling_price\" ,\n  max(main.\"minPayout\" ) as \"minPayout\" ,\n  max(main.\"payoutPercentage\") as \"payoutPercentage\",\n  max(main.\"order_rank\") \"order_rank\",\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax\",\n  max(main.\"conv_to_USD\" ) as \"conv_to_USD\",\n  max(main.\"to_inr\") as \"to_inr\",\n  max(main.\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n  max(main.\"deductionsCurrency_to_INR\") as \"deductionsCurrency_to_INR\",\n  max(main.\"parent_collection_USD\" ) as \"parent_collection_USD\",\n  max(main.\"discount_Amount_USD\" ) as \"discount_Amount_USD\",\n  max(main.\"discount_Amount_INR\" ) as \"discount_Amount_INR\",\n  max(main.\"discount_percentage\" ) as \"discount_percentage\",\n  max(main.\"maincohort_name\" ) as \"cohort_name\",\n  max(\"latest_payment_dt\") as \"latest_payment_date\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"collection_amount\" ,\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax_adjusted\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") - sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"collection_minus_GST\",\n  sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") as \"collection_minus_GST_and_TDR_subvention_costs\",\n  max(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") as \"FinanceCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") as \"SalesCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") as \"MarketingCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") as \"Voucher_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") as \"Instructor_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\") as \"Platform_cost\",\n  sum(main.\"service_Tax_INR\") as \"serviceTax_INR\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"order_selling_price_USD\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") as \"order_selling_price_INR\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") - sum(main.\"service_Tax_INR\") as \"collection_minus_GST_INR\",\n  sum(emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") as \"POS_subvention_excluded_USD\",\n  sum(emi.\"POS_subvention_excluded\"*main.\"to_inr\") as \"POS_subvention_excluded_INR\",\n  sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) as \"collection_minus_GST_and_TDR_subvention_costs_INR\"\n\n  ,max(upt.\"final_payout\") as \"upt_final_payout\"  \n  \n  from university_orders_with_conversion_CTE main\n\n  LEFT JOIN \n  ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n  ON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  \n      and main.\"orderNumber\" = emi.\"orderNumber\"\n\n  -- To balance the payout for getting started purchases for same program\n  LEFT JOIN \n  (\n      select \"Email\" EMAIL,\"Program Name\" PN,\"University_flag\" UF,\n          sum(\"final_payout\") \"final_payout\",\n          sum(\"final_payout_INR\") \"final_payout_INR\"\n      from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n      group by 1,2,3\n  ) upt\n  ON main.\"userEmail\" = upt.EMAIL  \n      and main.\"New_Program Name\" = upt.PN\n      and main.\"universityFlag\" = upt.UF\n\n  where  main.\"only_prep_bought\" <> 1 \n      and (ABS (main.\"Total_Collection_USD\" - main.\"max_SellingPrice_USD\") <= 1 \n           or main.\"Total_Collection_USD\" > main.\"max_SellingPrice_USD\")\n\n  group by 1,2,3,4,5\n\n)\n\n\n\n------------------- Main Query starts from here ----------------------\nselect\n    SHA2_HEX(\n        concat(\n            ifnull(\"Email\", '-'),\n            ifnull(\"Program Name\", '-'),\n            ifnull(\"Order Number\", '-'),\n            ifnull(\"Payment Geo\", '-'),\n            ifnull(\"University\", '-'),\n            ifnull(\"Deviation\", '0'),\n            ifnull(\"Category\", '-'),\n            ifnull(\"Sub-Category\", '-'),\n            ifnull(\"Status\", '-')\n        )\n    ) as \"SHA2_HEX_ID\",\n    current_date \"TimeStamp\",\n    0 \"No. of Days\",\n    *\nfrom\n(\n    \n    -------------------------------------------\n    --- checkpoint 1- elt2 order check --------\n    -------------------------------------------\n    (\t\n        select\n        null as \"Email\",\n        null as \"Program Name\",\n        \"orderNumber\" as \"Order Number\",\n        null as \"Payment Geo\",\n        null as \"Month\",\n        null as \"University\",\n        null as \"Deviation\",\n        'elt2 Check' as \"Category\",\n        'Order check' as \"Sub-Category\",\n        'Missing order' as \"Status\"\n        from\n        (\n    \tselect\n    \t\tdistinct \"orderNumber\"\n    \tfrom\n    \t\t(\n    \t\t\tselect\n    \t\t\t\t*,\n    \t\t\t\tto_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n    \t\t\tfrom\n    \t\t\t\t${ev_default_db_name}.\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n    \t\t\twhere\n    \t\t\t\t\"payment_date\" >= '2024-03-01'\n    \t\t\t\tand not(\"orderNumber\" like any ('SMPL_B2B%', 'CSTM_CORP%'))\n    \t\t\t\tand not (\"transactionId\" like any ('APP_FREE%', 'WEB_FREE%'))\n    \t\t\t\tand \"course_id\" not in (1018, 1019, 1020)\n    \t\t\t\tand not(\"userEmail\" like any ('%simplilearnautomation%'))\n    \t\t\t\tand \"is_test_payment\" = 0\n    \t\t)\n    \twhere\n    \t\"orderNumber\" not in (\n    \t\t\tselect distinct \"orderNumber\"\n    \t\t\t\tfrom\n    \t\t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n    \t\t\t\twhere\n    \t\t\t\t\t\"ndate\" >= '2024-03-01'\n    \t\t\t\t)\n    \tand \"orderNumber\" is not null\n    \tand not(\"orderNumber\" like any ('00%')) --and \"orderNumber\"!='BACKEND_1641204895_SP718612'\n    \t\n    \torder by \"orderNumber\"\t\n        )\n    )\n    \t\t\n    union all\n    ----------------------------------------\n    -------- elt2 collection check ---------\n    ----------------------------------------\n    (\n        select\n    \t\"userEmail\" as \"Email\",\n    \t\"Program Name\",\n    \t\"orderNumber\" as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"University\",\n    \t\"deviation\" as \"Deviation\",\n    \t'elt2 Check' as \"Category\",\n    \t'Collection check' as \"Sub-Category\",\n    \t'Deviation in Collection' as \"Status\"\n        from\n        (\n        \tselect\n        \t\t\"userEmail\",\n        \t\t\"Program Name\",\n        \t\t\"orderNumber\",\n        \t\t\"collection_pr\",\n        \t\t\"collection_ue\",\n        \t\t\"paymentCountry\",\n        \t\t\"paymentGeo\",\n        \t\t\"University\",\n        \t\t\"collection_pr\" - \"collection_ue\" as \"deviation\",\n        \t\t\"currency\"\n        \tfrom(\n        \t\t\tselect\n        \t\t\t\t*,\n        \t\t\t\tcase\n        \t\t\t\t\twhen \"collection_pr\" = \"collection_ue\" then 1\n        \t\t\t\t\telse 0\n        \t\t\t\tend as \"flag\"\n        \t\t\tfrom(\n        \t\t\t\t\t(\n        \t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\"orderNumber\",\n        \t\t\t\t\t\t\tround(sum(\"amount\"), 0) as \"collection_pr\",\n        \t\t\t\t\t\t\tmax(\"paymentRegion\") as \"paymentRegion\",\n        \t\t\t\t\t\t\tmax(\"paymentCountry\") as \"paymentCountry\",\n        \t\t\t\t\t\t\tsum(\"discountAmount\") as \"discountAmount\"\n        \t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t(\n        \t\t\t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\t\t*,\n        \t\t\t\t\t\t\t\t\tto_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n        \t\t\t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t\t\t${ev_default_db_name}.\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n        \t\t\t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\t\t\"payment_date\" >= '2024-03-01'\n        \t\t\t\t\t\t\t\t\tand not(\"orderNumber\" like any ('SMPL_B2B%', 'CSTM_CORP%'))\n        \t\t\t\t\t\t\t\t\tand not (\"transactionId\" like any ('APP_FREE%', 'WEB_FREE%')\t\t\t\t\t\t\t\t\t)\n        \t\t\t\t\t\t\t\t\tand \"course_id\" not in (1018, 1019, 1020)\n        \t\t\t\t\t\t\t\t\tand not(\"userEmail\" like any ('%simplilearnautomation%'))\n        \t\t\t\t\t\t\t\t\tand \"is_test_payment\" = 0\n        \t\t\t\t\t\t\t)\n        \t\t\t\t\t\tgroup by 1\n        \t\t\t\t\t) pr\n        \t\t\t\t\tleft join \n        \t\t\t\t\t(\n        \t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\"orderNumber\" as \"oN\",\n        \t\t\t\t\t\t\tround(sum(\"order_selling_price\"), 0) as \"collection_ue\",\n        \t\t\t\t\t\t\tmax(\"paymentGeo\") as \"paymentGeo\",\n        \t\t\t\t\t\t\tmax(\"University Name\") as \"University\",\n        \t\t\t\t\t\t\tmax(\"userEmail\") as \"userEmail\",\n        \t\t\t\t\t\t\tmax(\"Program Name\") as \"Program Name\",\n        \t\t\t\t\t\t\tmax(\"currency\") as \"currency\",\n        \t\t\t\t\t\t\tmax(\"ndate\") as \"ndate\"\n        \t\t\t\t\t\tfrom(\n        \t\t\t\t\t\t\t\tselect *\n        \t\t\t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n        \t\t\t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\t\t\"ndate\" >= '2024-03-01'\n        \t\t\t\t\t\t\t)\n        \t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\"orderNumber\" is not null\n        \t\t\t\t\t\t\tand not(\"orderNumber\" like any ('00%'))\n        \t\t\t\t\t\tgroup by 1\n        \t\t\t\t\t) ue \n        \t\t\t\t\ton pr.\"orderNumber\" = ue.\"oN\"\n        \t\t\t\t\n        \t\t\t)\n        \t\t\torder by \"orderNumber\"\n        \t\t\t\t\n        \t\t)\n        \twhere\n        \t\t\"flag\" = 0\n        \t\tand abs(\"deviation\") > 1\n        \t\tand \"University\" is not null\n        )\n    )\n    \n    union all\n    ----------------------------------------------------------------\n    ---checkpoint 3----pg payout inputs duplicate entry check\n    ----------------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Duplicate entry check' as \"Sub-Category\",\n    \t'Duplicate Entry' as \"Status\"\n        from\n        (\n        \tselect\n        \t\t\"universityFlag\" as \"University\",\n        \t\t\"programName\" as \"Program Name\",\n        \t\t\"paymentGeo\" as \"Payment Geo\"\n        \tfrom(\n        \t\t\tselect\n        \t\t\t\t\"universityFlag\",\n        \t\t\t\t\"programName\",\n        \t\t\t\t\"paymentGeo\",\n        \t\t\t\tcount(\"programName\") as \"count\"\n        \t\t\tfrom\n        \t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\"\n        \t\t\tgroup by 1, 2, 3\n        \t\t\t\thaving \"count\" > 1\n        \t\t)\n        )\n    )            \n    union all\n    --------------------------------------------------------\n    -------- pg payout inputs missing value check ----------\n    --------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"programName\" as \"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"universityFlag\" as \"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Missing value check' as \"Sub-Category\",\n    \t'Missing value' as \"Status\"\n        from\n        (\n            select\n                *\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\"\n            where concat(\"universityFlag\", \"programName\", \"paymentGeo\", \"deductionsCurrency\", \"affiliatePaymentCosts\", \"minPayout\", \"payoutPercentage\", \"contractStartDate\",   \"contractEndDate\", \"minASP\", \"maxASP\", \"financeCharges\", \"SalesCharges\", \"marketingCharges\", \"voucherCosts\", \"instructorCosts\", \"teachingAssistantsCosts\", \"platformCosts\", \"Revised_Logic_Applicable_Flag\") is null\n        )\n    )\n    \n    union all\n    ---------------------------------------------------------------\n    --------- pg payout inputs program name validation ------------\n    ---------------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"programName\" as \"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"universityFlag\" as \"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Program Name validation' as \"Sub-Category\",\n    \t'Program Name mismatch' as \"Status\"\n        from\n    \t(\n    \t\tselect\n    \t\t\t*\n    \t\tfrom \n    \t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" pgp_inp\n    \t\tleft join \n    \t\t(\n    \t\t\tselect\n    \t\t\t\tdistinct case when \"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n    \t\t\t\t\t\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n    \t\t\t\t\t\t\telse \"Program Name\" end as \"Program Name\"\n    \t\t\tfrom\n    \t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n    \t\t\twhere\n    \t\t\t\t\"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n    \t\t) elt2 on pgp_inp.\"programName\" = elt2.\"Program Name\"\n    \t\n    \t\twhere\n    \t\t\telt2.\"Program Name\" is null\n    \t\torder by\n    \t\t\telt2.\"Program Name\"\n    \t)\n    )\n    \n    union all\n    -------------------------------------------------------------------\n    --- checkpoint 4 - finance control check for current month entry --\n    -------------------------------------------------------------------\n    (\n    \tselect\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\tdate_trunc('month',current_date) as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Current Month Entry Check' as \"Sub-Category\",\n    \t\t'Missing Current Month Entry' as \"Status\"\n    \tfrom\n    \t\t(\n            select\n                max(to_date(\"Month\")) as \"current_month_crm\"\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n            having date_trunc('month',\"current_month_crm\") <> date_trunc('month',current_date)\n    \t\t)\n    )\t\t\n    \n    union all\n    ---------------------------------------------------------------\n    -------- finance control check for historical entries ---------\n    ---------------------------------------------------------------\n    (\n    \tselect\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\tNULL as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Historical entry check' as \"Sub-Category\",\n    \t\t'Missing Historical Entry' as \"Status\"\n    \tfrom\n    \t\t(\n                select\n                   datediff('months',\"Start_date\",\"Latest_month\")+1 \"expected_#months\",\n                   \"actual_#months\",\n                   abs(\"expected_#months\" - \"actual_#months\") \"#missing_months\"\n                from(\n                        select\n                            distinct\n                            to_date('2018-12-01') as \"Start_date\",\n                            max(\"Month\") \"Latest_month\" ,\n                            count(distinct date(\"Month\")) \"actual_#months\"\n                        from\n                            ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" \n                    )\n                where \"#missing_months\" > 0\n    \t\t)\n    )\n            \n    union all\n    ------------------------------------------------------\n    ------ finance control check for missing values ------\n    ------------------------------------------------------\n    (\n        select\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\t\"Month\" as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Missing value check' as \"Sub-Category\",\n    \t\t'Missing Value' as \"Status\"\n    \tfrom\n    \t\t(\n    \t\tselect\n    \t\t\t*\n    \t\tfrom\n    \t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n    \t\twhere concat(\"Month\", \"INR.to.1.USD\", \"AUD.to.1.USD\", \"GBP.to.1.USD\", \"EUR.to.1.USD\", \n    \t\t\t\t\t\"USD.to.INR\", \"AUD.to.INR\", \"GBP.to.INR\", \"EUR.to.INR\", \"CAD.to.INR\", \"SGD.to.INR\",       \n    \t\t\t\t\t\"CAD.to.1.USD\", \"TDR.IN\", \"TDR.AMERICAS\", \"TDR.ROW\", \"Sales.Commission.IN\", \n    \t\t\t\t\t\"Sales.Commission.AMERICAS\", \"Sales.Commission.ROW\", \"Trainer.fee.LVC\", \"Trainer.fee.CR\", \n    \t\t\t\t\tcase when \"Month\" >= '2021-10-01' then \"SGD.to.1.USD\" else 1 end) is null\n    \t\t)\n    )\n    \n    union all\n    ------------------------------------------------------------------------------\n    -----checkpoint 2-------------------------------------------------------------\n    ------------------------------------------------------------------------------\n    ------- Complete Order Check FullPayment order check ---------\n    \n    (\n        select\n        \"userEmail\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(A.\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" as \"Payment Geo\",\n        date(\"latest_payment_dt\") as \"Month\",\n        \"universityFlag\" as \"University\",\n        null as \"Deviation\",\n        'Complete order check' as \"Category\",\n        'Full Payment check' as \"Sub-Category\",\n        'Missing order' as \"Status\"\n        from\n    \n    \t(\n    \tselect\n        distinct \n        \"userEmail\",\n        \"New_Program Name\" \"Program Name\",\n        \"latest_payment_dt\",\n        \"New_reconciliation_id\" \"reconciliation_id\",\n        \"paymentGeo\",\n        \"universityFlag\" ,\n        max(\"orderNumber\") \"orderNumber\"\n        \n        from\n            university_orders_with_conversion_CTE elt2\n            \n            left join\n            (\n    \t\t\tselect distinct csa.email,dim.\"Program Name\" program_name\n    \t\t\t\t  ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n    \t\t\t\t  ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n    \t\t\tfrom ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n    \t\t\tleft join\n    \t\t\t(\n    \t\t\t\t  select \"Course\",\"Program Name\" \n    \t\t\t\t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n    \t\t\t\t  group by 1,2 \n    \t\t\t) dim\n    \t\t\ton  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n    \t\t) csa\n    \t\tON elt2.\"userEmail\" = csa.email and trim(csa.program_name) = trim(elt2.\"New_Program Name\")\n            \n        where \"universityFlag\" is not null\n            and \"latest_payment_dt\" >= '2024-03-01'\n            and \"only_prep_bought\" != 1\n            and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n               or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n            and ((\"Revised_Logic_Applicable_Flag\" ilike 'yes' and At_least_1_LVC_attended = 1 )\n                or  \"Revised_Logic_Applicable_Flag\" ilike 'no')\n            and \"latest_payment_dt\"<=\"main_bundles_max_ndate\"\n        group by 1,2,3,4,5,6\n        ) A\n    \n    ---------------------- University Payout Table ------------\n        left join \n        (\n            select\n                \"Email\",\n                case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                    else prod_dim.\"Program Name\" end as \"Program_Name\",\n                \"University_flag\",\n                \"reconciliation_id\",\n                \"order_type\"\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" upt\n                left join\n                EDW.DW.DIM_PRODUCT_REF prod_dim\n                ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n            where\n                \"latest_payment_date\" >= '2024-03-01'\n                and \"order_type\" = 'Order'\n                and \"University_flag\" is not null\n                and \"paymentQueryType\" = 'B2C'\n            group by\n                1,2,3,4,5\n        ) B \n    \ton A.\"userEmail\" = B.\"Email\"\n    \t\tand A.\"Program Name\" = B.\"Program_Name\"\n    \t\tand A.\"universityFlag\" = B.\"University_flag\"\n    \t\tand A.\"reconciliation_id\" = B.\"reconciliation_id\"\n    \n        where \"Email\" is null \n    )\n    -------------------------------------------------------------\n    \n    \n    union all\n    -------------------------- Checkpoint -----------------------------------\n    ----------- complete order Full Payment order Collection check ----------\n    -------------------------------------------------------------------------\n    (    \n        select\n        \"userEmail\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(A.\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" ,\n        date(\"latest_payment_dt\") as \"Month\",\n        \"universityFlag\" ,\n        (\"elt2_collection\"-\"upf_collection\") \"Deviation\",\n        'Complete order check' as \"Category\",\n        'Full Payment collection check' as \"Sub-Category\",\n        'Deviation in Collection' as \"Status\"\n        from\n        \n        \t(\n        \tselect\n        \t\t\"userEmail\",\n        \t\t\"New_Program Name\" \"Program Name\",\n        \t\t\"latest_payment_dt\",\n        \t\t\"New_reconciliation_id\" \"reconciliation_id\",\n        \t\t\"paymentGeo\",\n        \t\t\"universityFlag\",\n                max(\"orderNumber\") \"orderNumber\",\n        \t\tsum(\"order_selling_price\" / \"conv_to_USD\") \"elt2_collection\"\n        \t\t\n        \tfrom\n                university_orders_with_conversion_CTE elt2\n        \tleft join\n                (\n                select distinct csa.email,dim.\"Program Name\" program_name\n        \t\t\t  ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n        \t\t\t  ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n                  from ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n                  left join\n                  (\n                \t  select \"Course\",\"Program Name\" \n                \t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n                \t  group by 1,2 \n                  ) dim\n                  on  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n                 ) csa\n                 ON elt2.\"userEmail\" = csa.email and trim(csa.program_name) = trim(elt2.\"New_Program Name\")\n                \n            where \"universityFlag\" is not null\n                and \"latest_payment_dt\" >= '2024-03-01'\n                and \"only_prep_bought\" != 1\n                and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n                   or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n                   -- );\n                and ((\"Revised_Logic_Applicable_Flag\" ilike 'yes' and At_least_1_LVC_attended = 1 )\n                    or  \"Revised_Logic_Applicable_Flag\" ilike 'no')\n                and \"latest_payment_dt\"<=\"main_bundles_max_ndate\"\n                \n            group by 1,2,3,4,5,6\n            \n        \t) A\n        \t---------------------- University Payout Table ------------\n            left join \n            (\n                select\n                    distinct\n                    \"Email\",\n                    case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                        else prod_dim.\"Program Name\" end as \"Program_Name\",\n                    \"University_flag\",\n                    \"reconciliation_id\",\n                    \"order_type\",\n                    \"collection_amount\" \"upf_collection\"\n                from\n                    ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" upt\n                    left join\n                    edw.dw.DIM_PRODUCT_REF prod_dim\n                    ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n                where\n                    \"latest_payment_date\" >= '2024-03-01'\n                    and \"order_type\" = 'Order'\n                    and \"University_flag\" is not null\n                    and \"paymentQueryType\" = 'B2C'\n                \n            ) B \n        \ton A.\"userEmail\" = B.\"Email\"\n            and A.\"Program Name\" = B.\"Program_Name\"\n            and A.\"universityFlag\" = B.\"University_flag\"\n            and A.\"reconciliation_id\" = B.\"reconciliation_id\"\n        \n            where abs(round(\"elt2_collection\") - round(\"upf_collection\")) > 1\t\n    )\n    \t\t\n    -----------------------------------------------------------------------------\n    -----------------------------------------------------------------------------\n    \n    \n    union all\n    -------------------------------------------------------\n    ----- checkpoint 6 - Deviation in Refund Collection ---\n    -------------------------------------------------------\n    (\n        select\n        \"Email\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" as \"Payment Geo\",\n        null as \"Month\",\n        \"University_flag\" as \"University\",\n        (\"collection_amount\" + \"refund_elt2_USD\") *(-1) as \"Deviation\",\n        'Refund' as \"Category\",\n        \"Sub-Category\",\n        'Deviation in Refund Collection' as \"Status\"\n        from\n        (\n            \tselect\n            \t\t*\n                from\n                    (\n                        select\n                            \"Email\",\n                            \"Program Name\",\n                            \"University_flag\",\n                            \"reconciliation_id\",\n                            sum(\"collection_amount\") as \"collection_amount\",\n                            max(\"orderNumber\") as \"orderNumber\",\n                            max(\"paymentGeo\") as \"paymentGeo\"\n                        from\n                            (\n                                select\n                                    *\n                                from\n                                    ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n                                where\n                                    \"order_type\" in ('Refund', 'Chargeback')\n                                    and \"latest_payment_date\" >= '2024-03-01'\n                                    and \"paymentQueryType\" = 'B2C'\n                                order by\n                                    \"latest_payment_date\"\n                            )\n                        group by 1,2,3,4\n                    ) pay\n                    LEFT JOIN \n                    (\n                        select\n                            \"userEmail\",\n                            \"Program Name\" as \"Program Name_\",\n                            \"RefundReconciliation_id\",\n                            sum(\"partialRefundAmount_USD\") as \"refund_elt2_USD\",\n                            max(\"Sub-Category\") as \"Sub-Category\"\n                        from(\n                                select\n                                *,\n                                case\n                                    when \"currency\" = 'USD' THEN 1\n                                    when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n                                    when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                                    when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                                    when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                                    when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\"\n                                    when \"currency\" = 'SGD' THEN \"SGD.to.INR\" / \"INR.to.1.USD\"\n                                end as \"conv_to_USD_\",\n                                case\n                                    when (\"order_selling_price_order\" - sum(\"partialRefundAmount\") over (partition by \"userEmail\", \"Program Name\")) > 0\n                                        then 'Partial Refund'\n                                    else 'Full Refund'\n                                end as \"Sub-Category\",\n                                \"partialRefundAmount\" / \"conv_to_USD_\" as \"partialRefundAmount_USD\"\n                                \n                                from\n                                (\n                                    select * from        \n                                        (\n                                            select * from\n                                                ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n                                            where\n                                                \"refundedOrderNumber\" is not null\n                                                and \"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n                                                and \"ndate\" >= '2024-03-01'\n                                                and \"partialRefundAmount\" > 0\n                                            order by\n                                                \"userEmail\",\n                                                \"Program Name\"\n                                        ) A\n                                        LEFT JOIN \n                                        (\n                                            select\n                                                \"userEmail\" as \"email\",\n                                                \"Program Name\" as \"PName\",\n                                                sum(\"order_selling_price\") as \"order_selling_price_order\"\n                                            from\n                                                ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n                                            where\n                                                \"orderNumber\" is not null\n                                                and \"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n                                            group by\n                                                \"userEmail\",\n                                                \"Program Name\"\n                                        ) B \n                                        on A.\"userEmail\" = B.\"email\"\n                                        and A.\"Program Name\" = B.\"PName\"\n                                ) elt2\n                                LEFT JOIN \n                                (\n                                    select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n                                ) rate \n                                on year(elt2.\"ndate\") = year(to_date(rate.\"Month\"))\n                                and month(elt2.\"ndate\") = month(to_date(rate.\"Month\"))   \n                            )\n                            group by 1, 2, 3\n                    ) elt \n                    on pay.\"Email\" = elt.\"userEmail\"\n                    and pay.\"Program Name\" = elt.\"Program Name_\"\n                    and pay.\"reconciliation_id\" = elt.\"RefundReconciliation_id\"\t \n                where \"collection_amount\" + \"refund_elt2_USD\" > 1\n            )\n    )\n                    \n    -------------------------------------------------------\n    ----- checkpoint 6 - Deviation in Refund Payout -------\n    -------------------------------------------------------\t\t\n    /*\n    union all\n        (\n        select\n        \t\"Email\" as \"Email\",\n        \t\"Program Name\",\n            concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"orderNumber\",\n        \t\"paymentGeo\" as \"Payment Geo\",\n        \t\"latest_payment_date\" as \"Month\",\n        \t\"University_flag\" as \"University\",\n        \t\"sum_final_payout\" as \"Deviation\",\n        \t'Refund' as \"Category\",\n        \t'Refund Payout Check' as \"Sub-Category\",\n        \t'Deviation in Refund Payout' as \"Status\"\n        from\n        \t(\n        \t\tselect\n        \t\t\t*\n        \t\tfrom\n        \t\t\t\t(\n        \t\t\t\t\tselect\n        \t\t\t\t\t\tdistinct \"Email\",\"Program Name\",\"orderNumber\",\"reconciliation_id\",\"University_flag\",\"paymentGeo\",\"latest_payment_date\"\n        \t\t\t\t\tfrom\n        \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n        \t\t\t\t\twhere\n        \t\t\t\t\t\t\"order_type\" not in ('Chargeback', 'Refund')\n        \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n        \t\t\t\t) A\n        \t\t\t\tleft join \n        \t\t\t\t(\n        \t\t\t\t\tselect\n        \t\t\t\t\t\t\"Email\" as \"email\",\n        \t\t\t\t\t\t\"Program Name\" as \"programName\",\n        \t\t\t\t\t\t\"University_flag\" as \"uni\",\n                                \"reconciliation_id\" \"reconId\",\n        \t\t\t\t\t\tsum(\"final_payout\") as \"sum_final_payout\"\n        \t\t\t\t\tfrom\n        \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n        \t\t\t\t\tgroup by 1,2,3,4 having \"sum_final_payout\" < -1\n        \t\t\t\t\torder by\n        \t\t\t\t\t\t\"Email\",\n        \t\t\t\t\t\t\"Program Name\"\n        \t\t\t\t) B \n        \t\t\t\ton A.\"Email\" = B.\"email\"\n        \t\t\t\tand A.\"Program Name\" = B.\"programName\"\n        \t\t\t\tand A.\"University_flag\" = B.\"uni\"\n                        and a.\"reconciliation_id\" = b.\"reconId\"\n        \t\twhere\n        \t\t\t\"email\" is not null\n        \t\t\tand \"latest_payment_date\" >= '2024-03-01'\n        \t)\n        )\n    */\n    \n    -----------------------------------------------\n    --checkpoint 7 - Deviation in Payout ----------\n    ----------------------------------------------- \n    ----- FullPayment or PartialPayment Order -----\n    union all\n    (\n       select\n    \t\t\"Email\",\n    \t\t\"Program Name\",\n    \t\tconcat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"Order Number\",\n    \t\t\"paymentGeo\" as \"Payment Geo\",\n    \t\t\"latest_payment_date\" as \"Month\",\n    \t\t\"University_flag\" as \"University\",\n    \t\t\"Deviation in Payout\" as \"Deviation\", \n    \t\t'Payout Check' as \"Category\",\n    \t\t'FullPayment or PartialPayment Order' as \"Sub-Category\", \n    \t\t'Deviation in Payout' as \"Status\"\n    \tfrom\n    \t\t(\n    \t\t\tselect\n    \t\t\t\telt.*,\n    \t\t\t\t\"final_payout\" - \"final_payout_elt2\" as \"Deviation in Payout\"\n    \t\t\tfrom\n    \t\t\t(\n    \t\t\t\tselect \"Email\",\n    \t\t\t\t\tmain.\"reconciliation_id\",\n    \t\t\t\t\t\"Program Name\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\"University_flag\",\n    \t\t\t\t\tmax(main.\"orderNumber\") \"orderNumber\",\n    \t\t\t\t\tmax(\"paymentGeo\") \"paymentGeo\",\n    \t\t\t\t\tmax(\"latest_payment_date\") \"latest_payment_date\",\n    \t\t\t\t\tmax(case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n                              then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100)\n                          when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n                              then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n                          else  GREATEST((\"collection_minus_GST_and_TDR_subvention_costs\" - \n                                          \"Affiliate_payment_cost\" - \"FinanceCharges_cost\" - \n                                          \"SalesCharges_cost\" - \"MarketingCharges_cost\" - \"Voucher_cost\" - \n                                          \"Instructor_cost\" - \"TeachingAssistants_cost\" - \"Platform_cost\"\n                                          )* \n                                          ((main.\"payoutPercentage\" )/100)\n                                         , case when (\"paymentCourse\") ilike '%getting%started%' and (\"upt_final_payout\")>((main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) then 0\n                                                 else (main.\"minPayout\" / main.\"deductionsCurrency_to_USD\") end)\n    \t\t\t\t\t\tend) as \"final_payout_elt2\"\n    \t\t\t\tfrom\n    \t\t\t\t\t(\n                            select * exclude(\"payoutPercentage\"),\n                                  max(case when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 1 and 230 then 20\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 231 and 500 then 15\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 501 and 715 then 12\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" > 715 then 10\n                                      \t\t\telse \"payoutPercentage\" end) \n                                  \t\t\tover (partition by \"Email\",\"order_type\",\"Program Name\",\"University_flag\",\"reconciliation_id\") as \"payoutPercentage\"  \n                                  from\n                                  (\n                                  select *\n                                    ,case when \"University_flag\" ilike '%ihub%' then \n                                                row_number() over (partition by \"University_flag\" order by \"latest_payment_date\", \"reconciliation_id\",\"Email\") \n                                  \t\t\telse null end \"enrollment_rn\"\n                                  from \n                                  (\n                                      select ord.* exclude(\"latest_payment_date\") , \n                                          \"latest_payment_date\",\n                                          \"latest_payment_date\" \"old_latest_payment_date\",\n                                          NULL \"first_lvc_attended_date\",\n                                          NULL At_least_1_LVC_attended\n                                      from order_final_agg_cte ord\n                                      where \"ndate\" < '2023-12-11' or \"Revised_Logic_Applicable_Flag\" ilike 'no'\n                                \n                                      union\n                                \n                                      select ord.* exclude(\"latest_payment_date\") ,\n                                          greatest(first_lvc_attended_date,\"latest_payment_date\") \"latest_payment_date\",\n                                          \"latest_payment_date\" \"old_latest_payment_date\",\n                                          first_lvc_attended_date \"first_lvc_attended_date\",\n                                          At_least_1_LVC_attended\n                                      from order_final_agg_cte ord\n                                \n                                      left join\n                                      (\n                                          select distinct csa.email,dim.\"Program Name\" program_name\n                                          ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n                                          ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n                                          from ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n                                          left join\n                                          (\n                                        \t  select \"Course\",\"Program Name\" \n                                        \t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n                                        \t  group by 1,2 \n                                          ) dim\n                                          on  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n                                      ) as csa\n                                      ON ord.\"Email\" = csa.email and trim(csa.program_name) = trim(ord.\"Program Name\")\n                                \n                                      where At_least_1_LVC_attended = 1 and \"Revised_Logic_Applicable_Flag\" ilike 'yes' and \"ndate\" >= '2023-12-11' \n                                  )\n                                  qualify min(case when \"paymentCourse\" ilike '%getting%started%' or \"paymentCourse\" ilike '%complement%' then 'zzzzz' else  \"paymentCourse\" end) \n                                              over (partition by \"Email\",\"University_flag\",\"Program Name\") not ilike 'zzzzz'\n                                  )\n                        ) main\n    \t\t\t\tLEFT JOIN \n    \t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n    \t\t\t\tON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  \n    \t\t\t\t  and main.\"orderNumber\" = emi.\"orderNumber\"\n    \t\t\t\t\n                    where \"latest_payment_date\" >= '2024-03-01'\n                        and \"University_flag\" is not null\n                        \n    \t\t\t\tgroup by 1,2,3,4,5\n    \t\t\t) elt\n    \t\t\tleft join\n    \t\t\t(\n    \t\t\t\tselect\n    \t\t\t\t\t\"Email\",\n    \t\t\t\t\tcase when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n    \t\t\t\t\t\telse prod_dim.\"Program Name\" end as \"Program Name\",\n    \t\t\t\t\t\"University_flag\",\n    \t\t\t\t\t\"reconciliation_id\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\"final_payout\"\n    \t\t\t\tfrom\n    \t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" upt\n    \t\t\t\t\tleft join\n    \t\t\t\t\tEDW.DW.DIM_PRODUCT_REF prod_dim\n    \t\t\t\t\tON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n    \t\t\t\twhere\n    \t\t\t\t\t\"latest_payment_date\" >= '2024-03-01'\n    \t\t\t\t\tand \"University_flag\" is not null\n    \t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n    \t\t\t) payout\n    \t\t\ton payout.\"Email\" = elt.\"Email\"\n    \t\t\tand payout.\"Program Name\" = elt.\"Program Name\"\n    \t\t\tand payout.\"reconciliation_id\" = elt.\"reconciliation_id\"\n    \t\t\tand payout.\"University_flag\" = elt.\"University_flag\"\n    \t\t\tand payout.\"order_type\" = elt.\"order_type\"\n    \t\t\n\t\t\twhere payout.\"Email\" is not null\n    \t\t\tand abs(\"Deviation in Payout\") > 1\n    \t\t)\n    ) \n    \n    ----- FullPayment or PartialPayment Refunds -----\n    union all\n    (\n    \tselect\n    \t\t\"Email\",\n    \t\t\"Program Name\",\n    \t\tconcat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"Order Number\",\n    \t\t\"paymentGeo\" as \"Payment Geo\",\n    \t\t\"latest_payment_date\" as \"Month\",\n    \t\t\"universityFlag\" as \"University\",\n    \t\t\"Deviation in Payout\" as \"Deviation\",\n    \t\t'Payout Check' as \"Category\",\n    \t\t'FullPayment or PartialPayment Refund' as \"Sub-Category\" ,\n    \t\t'Deviation in Payout' as \"Status\"\t\n    \n    \tfrom\n    \t(\n    \t\tselect\n    \t\t\telt.*,\n    \t\t\t\"final_payout\" - \"final_payout_elt2\" as \"Deviation in Payout\"\n    \t\tfrom\n    \t\t\t(\n    \t\t\t\tselect \n    \t\t\t\t\t\"userEmail\" \"Email\",\n    \t\t\t\t\t\"RefundReconciliation_id\" \"reconciliation_id\",\n    \t\t\t\t\t\"Program Name\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\"universityFlag\",\t\t\t\t\n    \t\t\t\t\tto_char(main.\"latest_payment_dt\",'YYYYMM') \"nmonth\",\n    \t\t\t\t\tmax(\"refundedOrderNumber\") \"orderNumber\",\n    \t\t\t\t\tmax(\"paymentGeo\") \"paymentGeo\",\n    \t\t\t\t\tgreatest(max(\"latest_payment_dt\"),max(\"ndate\")) \"latest_payment_date\",\n    \t\t\t\t\t\n    \t\t\t\t\tGREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n    \t\t\t\t\t\t+  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n    \t\t\t\t\t\t) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\"/main.\"conv_to_USD\")\n    \t\t\t\t\t  ) * (-1) as \"order_payout\",\n    \t\t\t\t\t  \n    \t\t\t\t\t-1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order  \n    \t\t\t\t\t\t\t\t\t\tby to_char(main.\"latest_payment_dt\",'YYYYMM')) = 1 \n    \t\t\t\t\t\t\t\tthen case when ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) then 0 \n    \t\t\t\t\t\t\t\t\t\t  else LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n    \t\t\t\t\t\t\t  else LEAST ( \n    \t\t\t\t\t\t\t\t\t\t\tabs(\"order_payout\"),\n    \t\t\t\t\t\t\t\t\t\t\tcase when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"latest_payment_dt\",'YYYYMM')) - abs(\"order_payout\")) <=0 then 0\n    \t\t\t\t\t\t\t\t\t\t\telse max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(main.\"latest_payment_dt\",'YYYYMM')) - abs(\"order_payout\")) end\n    \t\t\t\t\t\t\t\t\t\t )\n    \t\t\t\t\t  end as \"final_payout_elt2\"\n    \t\t\t\tfrom main_refunds_cte main\n    \t\t\t\t\n    \t\t\t\twhere main.\"only_prep_bought\" <> 1 \n    \t\t\t\t\tand \"latest_payment_dt\" >= '2024-03-01'\n    \t\t\t\t\n    \t\t\t\tgroup by 1,2,3,4,5,6\n    \t\t\t) elt\n    \t\t\tleft join\n    \t\t\t(\n    \t\t\t\tselect\n    \t\t\t\t\t\"Email\",\n    \t\t\t\t\tcase when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n    \t\t\t\t\t\telse prod_dim.\"Program Name\" end as \"Program Name\",\n    \t\t\t\t\t\"University_flag\",\n    \t\t\t\t\t\"reconciliation_id\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\tsum(\"final_payout\") \"final_payout\"\n    \t\t\t\tfrom\n    \t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\" upt\n    \t\t\t\t\tleft join\n    \t\t\t\t\tEDW.DW.DIM_PRODUCT_REF prod_dim\n    \t\t\t\t\tON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n    \t\t\t\twhere\n    \t\t\t\t\t\"latest_payment_date\" >= '2024-03-01'\n    \t\t\t\t\tand \"University_flag\" is not null\n    \t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n    \t\t\t\tgroup by 1,2,3,4,5\n    \t\t\t) payout\n    \t\t\ton payout.\"Email\" = elt.\"Email\"\n    \t\t\tand payout.\"Program Name\" = elt.\"Program Name\"\n    \t\t\tand payout.\"reconciliation_id\" = elt.\"reconciliation_id\"\n    \t\t\tand payout.\"University_flag\" = elt.\"universityFlag\"\n    \t\t\tand payout.\"order_type\" = elt.\"order_type\"\n    \t\t\n\t\t\twhere abs(\"Deviation in Payout\") > 1\n    \t)\n    )\n    \n    union all\n    (\n    select\n    \t\"Email\",\n    \t\"Program Name\",\n    \tconcat(\"orderNumber\",'-',\"reconciliation_id\") as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \t\"latest_payment_date\" as \"Month\",\n    \t\"University_flag\" as \"University\",\n        case\n    \t\twhen \"flag1\" = 1 then \"collection_amount\" - \"collection_amount1\"\n    \t\twhen \"flag2\" = 1 then \"collection_minus_GST\" - \"collection_minus_GST1\"\n    \t\twhen \"flag3\" = 1 then \"Revenue_for_payout_calculation\" - \"Revenue_for_payout_calculation1\"\n    \t\twhen \"flag4\" = 1 then \"final_payout\" - \"final_payout1\"\n    \t\telse null\n    \tend as \"Deviation\",\n    \t'Historical Data Check' as \"Category\",\n    \tcase\n    \t\twhen \"flag1\" = 1 then 'Collection'\n    \t\twhen \"flag2\" = 1 then 'Collection minus GST'\n    \t\twhen \"flag3\" = 1 then 'Revenue for Payout'\n    \t\twhen \"flag4\" = 1 then 'Final Payout'\n    \t\telse null\n    \tend as \"Sub-Category\",\n    \t'Deviation from Historical Data' as \"Status\"\n    from\n    \t(\n    \t\tselect\n    \t\t\t*,\n    \t\t\tcase\n    \t\t\t\twhen abs(\"collection_amount\" - \"collection_amount1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag1\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\"collection_minus_GST\" - \"collection_minus_GST1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag2\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\n    \t\t\t\t\t\"Revenue_for_payout_calculation\" - \"Revenue_for_payout_calculation1\"\n    \t\t\t\t) > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag3\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\"final_payout\" - \"final_payout1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag4\"\n    \t\tfrom(\n    \t\t\t\t(\n    \t\t\t\t\tselect\n    \t\t\t\t\t\t\"Email\",\n    \t\t\t\t\t\t\"Program Name\",\n                            \"reconciliation_id\",\n    \t\t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\t\"University_flag\",\n                            \"paymentGeo\",\n                            max(\"latest_payment_date\") \"latest_payment_date\",\n                            max(\"orderNumber\") as \"orderNumber\",\n    \t\t\t\t\t\tsum(\"collection_amount\") as \"collection_amount\",\n    \t\t\t\t\t\tsum(\"collection_minus_GST\") as \"collection_minus_GST\",\n    \t\t\t\t\t\tsum(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",\n    \t\t\t\t\t\tsum(\"final_payout\") as \"final_payout\"\n    \t\t\t\t\tfrom\n    \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b\"\n    \t\t\t\t\twhere\n    \t\t\t\t\t\t\"latest_payment_date\" < date_trunc('month',CURRENT_DATE)\n    \t\t\t\t\t\tand \"latest_payment_date\" >= '2024-03-01'\n    \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n                        group by 1,2,3,4,5,6\n    \t\t\t\t) A\n    \t\t\t\tleft join (\n    \t\t\t\t\tselect\n    \t\t\t\t\t\t\"Email\" as \"email\",\n    \t\t\t\t\t\t\"Program Name\" as \"Program_Name\",\n                            \"reconciliation_id\" \"reconciliation_id1\",\n    \t\t\t\t\t\t\"order_type\" as \"orderType\",\n    \t\t\t\t\t\t\"University_flag\" as \"UniversityFlag\",\n                            max(\"orderNumber\") as \"orderNumber1\",\n    \t\t\t\t\t\tsum(\"collection_amount\") as \"collection_amount1\",\n    \t\t\t\t\t\tsum(\"collection_minus_GST\") as \"collection_minus_GST1\",\n    \t\t\t\t\t\tsum(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation1\",\n    \t\t\t\t\t\tsum(\"final_payout\") as \"final_payout1\"\n    \t\t\t\t\tfrom\n    \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n                        where \n                            \"latest_payment_date\" < date_trunc('month',CURRENT_DATE)\n    \t\t\t\t\t\tand \"latest_payment_date\" >= '2024-03-01'\n    \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n                        group by 1,2,3,4,5\n    \t\t\t\t) B on A.\"Email\" = B.\"email\"\n    \t\t\t\tand A.\"Program Name\" = B.\"Program_Name\"\n    \t\t\t\tand A.\"order_type\" = B.\"orderType\"\n    \t\t\t\tand A.\"University_flag\" = B.\"UniversityFlag\"\n    \t\t\t\tand A.\"reconciliation_id\" = B.\"reconciliation_id1\"\n    \t\t\t)\n    \t\twhere\n    \t\t\t\"email\" is not null\n    \t)\n    where\n    \t\"flag1\" = 1 or \"flag2\" = 1 or \"flag3\" = 1 or \"flag4\" = 1\n    )\n    \n)"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2899907":{"id":2899907,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":368,"y":928,"width":32,"height":32,"inputConnectorIDs":[2899935],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_PUBLIC_target_anomaly_alerts_1"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--CREATE Or replace table \"SL_ANALYTICS_DB\".\"PUBLIC\".\"target_anomaly_alerts\" AS\n\ndelete from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\"\nwhere \"TimeStamp\" = current_date;\n\nINSERT INTO ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\"\n\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\",\n0 \"No. of Days\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" \nwhere \"SHA2_HEX_ID\" not in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\") \n\nunion all\n\nselect a.*,b.\"No. of Days\"+1 from\n(\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" \nwhere \"SHA2_HEX_ID\" in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\") \n)a\nleft join\n(\n  select \"SHA2_HEX_ID\" ,max( \"No. of Days\") as \"No. of Days\" \n  from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\" \n  group by 1\n) b\nON a.\"SHA2_HEX_ID\" = b.\"SHA2_HEX_ID\"\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2912164":{"id":2912164,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":1136,"y":544,"width":32,"height":32,"inputConnectorIDs":[2951554],"outputSuccessConnectorIDs":[2913598],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of university_payout_table_with_b2b_final_new_logic_2_final"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"------------------------------------------------------\n------------- FINAL PAYOUT TABLE ---------------------\n------------------------------------------------------\ncreate or replace table ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" as\n\nselect \n\tmain.* exclude(\"Program Name\"),\n    main.\"Program Name\" as \"old_Program Name\",\n    NVL(iff(main.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management',\n            NULL,elt2.\"Program Name\")\n            ,main.\"Program Name\"\n       ) \"Program Name\",\n\t\"mrp\" ,\n\tcase when \"currency\"= 'USD' then 1\n\t\twhen \"currency\" = 'EUR' then con.\"EUR.to.1.USD\" -- euro\n\t\twhen \"currency\" = 'CAD' then con.\"CAD.to.1.USD\" -- Singapore dollar\n\t\twhen \"currency\" = 'SGD' then con.\"SGD.to.1.USD\" -- canadian dollar\n\t\tWHEN \"currency\" = 'INR' then con.\"INR.to.1.USD\"\n\t\tWHEN \"currency\" = 'AUD' then con.\"AUD.to.1.USD\"\n\t\tWHEN \"currency\" = 'GBP' then con.\"GBP.to.1.USD\"\n\t\tELSE 1\n\tend \"conv_sheet\",\n\t\n\tcase when \"order_type\" in ('Refund','RefundUPG','Chargeback') then NULL \n\t\telse \"mrp\"/\"conv_sheet\" \n\tend as \"CSTM_New_MRP_USD\",  -- MRP values from payment_Reconciliation table for CSTM orders\n\t\n\tcase when \"order_type\" in ('Refund','RefundUPG','Chargeback','Extn') then NULL \n\t\twhen \"orderNumber\" like 'CSTM%' then NULL\n\t\telse \"SMPL_MRP_new\"/\"conv_sheet\" \n\tend as \"SMPL_New_MRP_USD\",  -- MRP values from payment_Reconciliation table for SMPL orders\n\t\n\tcoalesce(\"CSTM_New_MRP_USD\",\"SMPL_New_MRP_USD\") as \"New_MRP_USD\" \n            \nfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_stg\" main\n\n-------------------------------------------------------------------------------\n------------- Prod Dim to get latest Program Name mapping ---------------------\n-------------------------------------------------------------------------------\nleft join \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" pref_main\non Replace(ltrim(rtrim(lower(main.\"CourseName\"))),'  ',' ') = lower(pref_main.\"Course\")\n\nleft join\n(\n\tselect \n\t\tpr.\"orderNumber\" \"order_number\",\n\t\t\"Program Name\",\n\t\tsum(pr.\"mrp\") \"mrp\",\n\t\tsum(\"SMPL_MRP_new\") \"SMPL_MRP_new\"\n\tfrom\n  \t-------------------------------------------------------------------------------\n    ------------- Getting the MRP values for CSTM/SMPL orders ---------------------\n    -------------------------------------------------------------------------------\n\t(\n\t\tselect \n\t\t\t\"reconciliation_id\",\"orderNumber\",\"course_id\",\n\t\t\t\"productType_id\",\"paymentDate\",\"courseName\",\"mrp\",\n\t\t\t(\"amount\"-ifnull(\"serviceTax\",0)+ifnull(\"discountAmount\",0)) \"SMPL_MRP_new\"\n\t\tfrom \"SL_ANALYTICS_DB\".\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n\t\t\n\t\twhere not contains (\"orderNumber\", 'SMPL_SKLUP_CERT') \n\t\t\tand not(lower(\"courseName\") like '%getting started%' \n\t\t\t\tor  lower(\"courseName\") like '%complimentary%') -- 2023-04-20 : SP\n\t)pr\n\t\n  \t-------------------------------------------------------------------------------\n    ------------- Prod Dim to get latest Program Name mapping ---------------------\n    -------------------------------------------------------------------------------\n\tleft join \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" pref\n\ton Replace(ltrim(rtrim(lower(pr.\"courseName\"))),'  ',' ') = lower(pref.\"Course\")\n\n\tgroup by 1,2\n) mrp\nON main.\"orderNumber\" = mrp.\"order_number\" \n\tand pref_main.\"Program Name\" = mrp.\"Program Name\"\n\n-------------------------------------------------------------------------------\n------------- mapping with conversion values from the sheet -------------------\n-------------------------------------------------------------------------------\nLEFT JOIN\n(\n\tselect \n\t\textract(year from to_date(\"Month\")) as \"yr\", \n\t\textract(month from to_date(\"Month\")) as \"month\",*\n\tfrom \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n) con\non extract(year from to_date(TO_DATE(to_timestamp(\"paymentDate\" ))))=con.\"yr\" \n\tand extract(month from to_date(TO_DATE(to_timestamp(\"paymentDate\" ))))= con.\"month\"\n\nLEFT JOIN\n(\n\tselect distinct \"userEmail\",\"reconciliation_id\",\"Program Name\" from \"SL_ANALYTICS_DB\".\"SALES_TEMP\".\"unified_elt2\"\n  \twhere \"collection_USD\" > 0\n) elt2\nON elt2.\"userEmail\" = main.\"Email\"\n\tand elt2.\"reconciliation_id\" = main.\"reconciliation_id\"\n\norder by \"latest_payment_date\" desc\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2913574":{"id":2913574,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":848,"y":544,"width":32,"height":32,"inputConnectorIDs":[2913598],"outputSuccessConnectorIDs":[2913680],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_PUBLIC_target_anomaly_alerts_stg_1 (1)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"---------- Main select query starts from line 566 ------------\n\nCREATE OR REPLACE TABLE ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" AS\n\n------------- Orders CTE -------------------\nwith elt2_with_upg_orders as\n(\nselect distinct main.* exclude(\"New_Program Name\",\"New_paymentCourse\",\"New_reconciliation_id\",\"New_Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"New_Program Name\") end as \"New_Program Name\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"New_reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg2.\"paymentCourse\",main.\"New_paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg2.\"Program Type\",main.\"New_Program Type\") as \"New_Program Type\" \n\t\tfrom\n        \n    (select distinct main.*, \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"New_Program Name\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"New_Program Type\" \n\n\t\tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level og upgrades ------------------\n  \t\t-----------------------------------------------------------\n        left outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"New_reconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\n\n--------------------------------------------------------------------------------------------\n---------- To get all the valid orders with some derivations from unified_elt2 -------------\n--------------------------------------------------------------------------------------------\nelt2_orders_CTE as \n(\n  select a.* , --gst.\"GST\", \n\tcase when (lower(\"New_paymentCourse\") like '%getting started%' \n\t\t\t\tor  lower(\"New_paymentCourse\") like '%complimentary%') \n              and count(distinct \"New_paymentCourse\" ) over (partition by a.\"userEmail\",\"New_Program Name\") = 1 \n  \t\t\tthen 1\n\t\tElse 0 end as \"only_prep_bought\",   \n\tifnull(pr.\"serviceTax\",0) \"serviceTax_adjusted\",\n  \tmax(a.\"ndate\") over (partition by a.\"userEmail\",\"New_Program Name\",\"New_reconciliation_id\" ) as \"latest_payment_dt\",\n    round(sum(\"collection_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  as \"Total_Collection_USD\", \n\tcase when NVL(round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2),0) > 0 \n\t\t\t then round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  \n\t\t else \"Total_Collection_USD\" end \n\t\t as \"max_SellingPrice_USD\",\n\tcase when \"New_reconciliation_id\" is not null then 'Order' \n\t\twhen \"RefundReconciliation_id\" is not null then 'Refund' \n\t\telse NULL end \n\t\tas \"order_type\"\n         \n\tfrom elt2_with_upg_orders a\n\tleft join\n  \t(\n    \tselect * from ${ev_default_db_name}.melv1n_crm2.\"target_paymentReconciliations\"\n    ) PR\n  \tON PR.\"orderNumber\" = a.\"orderNumber\"\n  \t\tand pr.\"reconciliation_id\" = a.\"reconciliation_id\"\n\t\t\n    where a.\"orderNumber\" is not null \n\t\tand  \"collection_USD\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"New_Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad')\n\t\tand  a.\"orderNumber\" not like '%_EXTN_%' \n),\n\n--------------------------------------------------------------------------------------\n---------- Mapping orders with university programs and currency conversions ----------\n--------------------------------------------------------------------------------------\nuniversity_orders_with_conversion_CTE as \n(\n  select * from\t\t\t\n  (\n    select elt2.* , --exclude(\"payoutPercentage\"),\n            case when \"currency\" = 'USD' THEN 1\n             when \"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n             when \"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n             when \"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n             when \"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n             when \"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n             when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n            end as \"conv_to_USD\",\n            case when \"currency\"='INR' then 1\n                 when \"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"to_inr\",\t\t \n            case when \"deductionsCurrency\" = 'USD' THEN 1\n                 when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                 when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                 when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n                end as \"deductionsCurrency_to_USD\",\n            case when \"deductionsCurrency\"='INR' then 1\n                 when \"deductionsCurrency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"deductionsCurrency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"deductionsCurrency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"deductionsCurrency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"deductionsCurrency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"deductionsCurrency_to_INR\"\t\n  \n  \t\t\t\n        from \n  \t\t(\n              select elt2.* exclude(\"latest_payment_dt\",\"ndate\"),\n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"latest_payment_dt\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"latest_payment_dt\" \n            end \"latest_payment_dt\", -- Adjusted for getting started \n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"ndate\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"ndate\" \n            end \"ndate\", -- Adjusted for getting started \n\n            max(case when \"paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                   then NULL  \n                 when (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 or \"Total_Collection_USD\" > \"max_SellingPrice_USD\") \n                   then \"ndate\" end) over (partition by \"userEmail\",\"New_Program Name\")\n            \"main_bundles_max_ndate\", -- -- Adjusted for getting started purchased after the main bundle\n\n            pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", \n            pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", \n            pgpay_inp.\"instructorCosts\", pgpay_inp.\"teachingAssistantsCosts\", pgpay_inp.\"platformCosts\",\n            pgpay_inp.\"universityFlag\" , pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n            pgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\",pgpay_inp.\"maxASP\",pgpay_inp.\"Revised_Logic_Applicable_Flag\",\n\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"New_paymentCourse\" end as \"mainpaymentCourse\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"orderNumber\" end as \"mainorderNumber\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"cohort_name\" end as \"maincohort_name\" \n\n          \t,case when \"universityFlag\" ilike '%ihub%' and \"New_paymentCourse\" not ilike '%gettiing%started%' \n                    and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n                           or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n            then \n                dense_rank() over (partition by \"universityFlag\" order by \"New_reconciliation_id\") \n  \t\t\telse null end \"order_rank\"\n\n        from  elt2_orders_CTE elt2\n\t\t\n        ---------------------------------------------------------------------\n        ------------ PG payouts input sheet owned by product team -----------\n        ---------------------------------------------------------------------\n        LEFT JOIN \n        (\n            select distinct * from  ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" \n        ) pgpay_inp \n        on trim(elt2.\"New_Program Name\") = trim(pgpay_inp.\"programName\")     \n            and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n            and \"latest_payment_dt\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n            and \"latest_payment_dt\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n            and elt2.\"Total_Collection_USD\" >= pgpay_inp.\"minASP\" \n            and elt2.\"Total_Collection_USD\" <= pgpay_inp.\"maxASP\"\n            and pgpay_inp.\"universityFlag\" is not null \n            and pgpay_inp.\"programName\" is not null\n    \t)elt2\n    \n  \t\t------------------------------------------------------------------------------------------------\n  \t\t------------ Finance Control_Currency Conversion sheet for monthly conversion values -----------\n  \t\t------------------------------------------------------------------------------------------------\n        LEFT OUTER JOIN \n        ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n        on extract(year from elt2.\"latest_payment_dt\") =  extract(year from to_date(rate.\"Month\")) \n            and extract(month from elt2.\"latest_payment_dt\") =   extract(month from to_date(rate.\"Month\"))\n\n\t\t--where    elt2.\"order_type\" = 'Order' \n\t)\n),\n\n----------- Refunds CTE -------------\nelt2_with_upg_refunds as\n(\nselect distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg2.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg2.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom\n        \n    (select distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom \n        -- (select * from\n        ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n        -- where \"userEmail\" = 'denizzkut@gmail.com')\n        main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n\t\t\t\tand \"refundedOrderNumber\" is not null\n                and \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level of upgrades ------------------\n  \t\t-----------------------------------------------------------\n  \t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n                and \"refundedOrderNumber\" is not null\n\t\t\t\tand \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"RefundReconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\nelt2_refunds_monthly as \n(\n\tselect a.* exclude(\"cohort_name\"), --gst.\"GST\",\n\t\t--max(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"latest_payment_dt\",\n  \t\t\"order_latest_pdate\"  as \"latest_payment_dt\",\n\t\t--min(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"first_payment_dt\",\n\t\t\"ndate\" as \"first_payment_dt\",\n  \t\tcase when lower(\"paymentCourse\") like '%getting started%' and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",a.\"Program Name\") = 1 then 1\n\t\t\tElse 0 end as \"only_prep_bought\",   \n\t\t\n\t\tcase when a.\"reconciliation_id\" is not null then 'Order' \n\t\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\t\telse NULL end as \"order_type\",\n\t\tb.\"order ndate\",\n\t\t\"first_lvc_attended_date\",\n\t\tAt_least_1_LVC_attended\n\n\tfrom elt2_with_upg_refunds a \n\t \n  \t-----------------------------------------------------------\n  \t--------- getting orders for refund payout ----------------\n  \t-----------------------------------------------------------\n  \tinner join \n\t(\n\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\n\t\t\t\tmin(\"ndate\") as \"order ndate\" , \n      \t\t\tmin(\"latest_payment_date\") \"order_latest_pdate\",\n\t\t\t\tmin(\"first_lvc_attended_date\") \"first_lvc_attended_date\",\n\t\t\t\tmin(At_least_1_LVC_attended) At_least_1_LVC_attended \n\t\tfrom \n\t\t(\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\",\"first_lvc_attended_date\",At_least_1_LVC_attended \n\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\" ='Order' \n\t\t\t\tand At_least_1_LVC_attended = 1 \n\t\t\t\tand \"Revised_Logic_Applicable_Flag\" ilike 'yes' \n\t\t\t\tand \"latest_payment_date\" >= '2023-12-11' \n\t\tunion\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\",\"first_lvc_attended_date\",At_least_1_LVC_attended \n\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\" ='Order'\n\t\t\t\tand At_least_1_LVC_attended = 1 \n\t\t\t\tand \"Revised_Logic_Applicable_Flag\" ilike 'yes' \n\t\t\t\tand \"latest_payment_date\" >= '2023-12-11' \n\t\t)\n\t\tgroup by 1,2,3\n\t) b \n\ton a.\"userEmail\" = b.\"Email\" \n\t\tand a.\"Program Name\" = b.\"Program Name\"\n  \t\tand a.\"RefundReconciliation_id\" = b.\"reconciliation_id\"\n\n\twhere a.\"refundedOrderNumber\" is not null \n\t\tand \"partialRefundAmount\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad') \n\t\tand a.\"ndate\">= '2024-03-01' \n),\n\nmain_refunds_cte as\n(\n--------------------------------------------------------------------------------------\n---------- Mapping refunds with university programs and currency conversions ---------\n--------------------------------------------------------------------------------------\n\tselect elt2.*, odr.\"order_payout\" as \"odr_order_payout\",odr.\"order_payout_INR\" as \"odr_order_payout_INR\" ,ref.\"refund_payout_INR\", ref.\"refund_payout\",\n\t\tref.\"ref_POS_order_selling_price\",pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n\t\tpgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n\t\tpgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\" ,pgpay_inp.\"maxASP\",\"Revised_Logic_Applicable_Flag\",\n\t\t/*case when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else elt2.\"paymentCourse\" end as \"mainpaymentCourse\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n\t\t */\n  \t\tcase when \"only_prep_bought\" = 1 then NULL \n            else \"paymentCourse\" end as \"mainpaymentCourse\",\n        case when \"only_prep_bought\" = 1 then NULL \n            else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n  \n\t\tcase when elt2.\"currency\" = 'USD' THEN 1\n\t\t\t\t when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n\t\t\t\t when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"conv_to_USD\",\n\t\tcase when elt2.\"currency\"='INR' then 1\n\t\t\t\t\t  when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n\t\tend as \"to_inr\",\t\t \n\t\tcase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"deductionsCurrency_to_USD\"\n\n\tfrom elt2_refunds_monthly as  elt2\n\t \n  \t---------------------------------------------------------------------------------------------------\n\t------------ Finance Control_Currency Conversion sheet for monthly conversion values --------------\n\t---------------------------------------------------------------------------------------------------\n\tLEFT OUTER JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n\ton extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) \n\t\tand extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\t \n  \t-----------------------------------------------------------------------------\n\t------------ PG payouts input sheet owned by product team -------------------\n\t-----------------------------------------------------------------------------\n  \tLEFT JOIN \n\t(\n\t\tselect distinct * from  ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" \n\t)  pgpay_inp \n\ton elt2.\"Program Name\" = pgpay_inp.\"programName\"      \n\t\tand elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\t\tand elt2.\"order ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n\t\tand elt2.\"order ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" >= pgpay_inp.\"minASP\" \n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" <= pgpay_inp.\"maxASP\"\n\t\tand pgpay_inp.\"universityFlag\" is not null \n\t\tand pgpay_inp.\"programName\" is not null\n\t\t\n  \t\n\t-----------------------------------------------------------------------------\n  \t------------------ To get the orders payout for the same purchase -----------\n  \t-----------------------------------------------------------------------------\t\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"order_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"order_payout_INR\" \n\t\tfrom\n\t\t(\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\"='Order' \n         \n         \tunion \n\n\t\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\"='Order' \n\t\t\t\n\t\t)\n\t\tgroup by 1,2,3,4\n\t) odr \n\ton elt2.\"userEmail\" = odr.\"Email\" \n\t\tand  elt2.\"Program Name\" =  odr.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  odr.\"University_flag\"  \n  \t\tand elt2.\"RefundReconciliation_id\" =  odr.\"reconciliation_id\"   \n\t  \n \t-----------------------------------------------------------------------------\n  \t------ To get the previously made refund payouts for the same purchase ------\n  \t-----------------------------------------------------------------------------\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"RefundReconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"refund_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"refund_payout_INR\", \n\t\t\t\tsum(\"POS_order_selling_price\") as \"ref_POS_order_selling_price\" \n\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\"\n\t\twhere \"order_type\" like any ('Refund','Chargeback') \n\t\t\tand \"ndate\" <= '2022-03-31'\n\t\tgroup by 1,2,3,4\n\t) ref \n\ton elt2.\"userEmail\" = ref.\"Email\" \n\t\tand elt2.\"Program Name\" =  ref.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  ref.\"University_flag\" \n  \t\tand elt2.\"RefundReconciliation_id\" =  ref.\"RefundReconciliation_id\" \n\t  \n\twhere elt2.\"order_type\" like any ('Refund','Chargeback')\n\n),\n\norder_final_agg_cte as\n(\n select \n  main.\"userEmail\" as \"Email\",     \n  main.\"order_type\" as \"order_type\",\n  main.\"New_Program Name\" as \"Program Name\",\n  main.\"universityFlag\" as \"University_flag\",\n  \"New_reconciliation_id\" as \"reconciliation_id\", -- Added new column in the level of this table\n  max(\"mapped_reconciliation_id\") \"mapped_reconciliation_id\", -- Added on 20240305 : SP\n  max(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\n  max(\"main_bundles_max_ndate\") \"main_bundles_max_ndate\",\n  --max(main.\"reconciliation_id\" ) as \"reconciliation_id\",\n  REPLACE(NVL(max(case when main.\"mainorderNumber\" like '%_UPG_%' then 'ZZZ_'||main.\"mainorderNumber\"\n                        else main.\"mainorderNumber\" end\n                      ),\n              max( main.\"mainorderNumber\")),\n          'ZZZ_','') as \"orderNumber\",\n  NULL as \"refundedOrderNumber\",\n  max(main.\"New_Program Type\") \"Program Type\", -- Added on 20240305 : SP\n  max(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\n  max(main.\"paymentGateway\" ) as \"paymentGateway\" ,\n  max(main.\"paymentGeo\" ) as \"paymentGeo\" ,\n  max(main.\"paymentQueryType\" ) as \"paymentQueryType\" ,\n  max(main.\"ndate\") as \"ndate\",\n  sum(emi.\"POS_subvention_excluded\") as \"POS_subvention_excluded\" ,\n  sum(main.\"order_selling_price\") as \"POS_order_selling_price\" ,\n  max(main.\"minPayout\" ) as \"minPayout\" ,\n  max(main.\"payoutPercentage\") as \"payoutPercentage\",\n  max(main.\"order_rank\") \"order_rank\",\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax\",\n  max(main.\"conv_to_USD\" ) as \"conv_to_USD\",\n  max(main.\"to_inr\") as \"to_inr\",\n  max(main.\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n  max(main.\"deductionsCurrency_to_INR\") as \"deductionsCurrency_to_INR\",\n  max(main.\"parent_collection_USD\" ) as \"parent_collection_USD\",\n  max(main.\"discount_Amount_USD\" ) as \"discount_Amount_USD\",\n  max(main.\"discount_Amount_INR\" ) as \"discount_Amount_INR\",\n  max(main.\"discount_percentage\" ) as \"discount_percentage\",\n  max(main.\"maincohort_name\" ) as \"cohort_name\",\n  max(\"latest_payment_dt\") as \"latest_payment_date\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"collection_amount\" ,\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax_adjusted\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") - sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"collection_minus_GST\",\n  sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") as \"collection_minus_GST_and_TDR_subvention_costs\",\n  max(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") as \"FinanceCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") as \"SalesCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") as \"MarketingCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") as \"Voucher_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") as \"Instructor_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\") as \"Platform_cost\",\n  sum(main.\"service_Tax_INR\") as \"serviceTax_INR\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"order_selling_price_USD\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") as \"order_selling_price_INR\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") - sum(main.\"service_Tax_INR\") as \"collection_minus_GST_INR\",\n  sum(emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") as \"POS_subvention_excluded_USD\",\n  sum(emi.\"POS_subvention_excluded\"*main.\"to_inr\") as \"POS_subvention_excluded_INR\",\n  sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) as \"collection_minus_GST_and_TDR_subvention_costs_INR\"\n\n  ,max(upt.\"final_payout\") as \"upt_final_payout\"  \n  \n  from university_orders_with_conversion_CTE main\n\n  LEFT JOIN \n  ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n  ON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  \n      and main.\"orderNumber\" = emi.\"orderNumber\"\n\n  -- To balance the payout for getting started purchases for same program\n  LEFT JOIN \n  (\n      select \"Email\" EMAIL,\"Program Name\" PN,\"University_flag\" UF,\n          sum(\"final_payout\") \"final_payout\",\n          sum(\"final_payout_INR\") \"final_payout_INR\"\n      from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n      group by 1,2,3\n  ) upt\n  ON main.\"userEmail\" = upt.EMAIL  \n      and main.\"New_Program Name\" = upt.PN\n      and main.\"universityFlag\" = upt.UF\n\n  where  main.\"only_prep_bought\" <> 1 \n      and (ABS (main.\"Total_Collection_USD\" - main.\"max_SellingPrice_USD\") <= 1 \n           or main.\"Total_Collection_USD\" > main.\"max_SellingPrice_USD\")\n\n  group by 1,2,3,4,5\n\n)\n\n\n\n------------------- Main Query starts from here ----------------------\nselect\n    SHA2_HEX(\n        concat(\n            ifnull(\"Email\", '-'),\n            ifnull(\"Program Name\", '-'),\n            ifnull(\"Order Number\", '-'),\n            ifnull(\"Payment Geo\", '-'),\n            ifnull(\"University\", '-'),\n            ifnull(\"Deviation\", '0'),\n            ifnull(\"Category\", '-'),\n            ifnull(\"Sub-Category\", '-'),\n            ifnull(\"Status\", '-')\n        )\n    ) as \"SHA2_HEX_ID\",\n    current_date \"TimeStamp\",\n    0 \"No. of Days\",\n    *\nfrom\n(\n    \n    -------------------------------------------\n    --- checkpoint 1- elt2 order check --------\n    -------------------------------------------\n    (\t\n        select\n        null as \"Email\",\n        null as \"Program Name\",\n        \"orderNumber\" as \"Order Number\",\n        null as \"Payment Geo\",\n        null as \"Month\",\n        null as \"University\",\n        null as \"Deviation\",\n        'elt2 Check' as \"Category\",\n        'Order check' as \"Sub-Category\",\n        'Missing order' as \"Status\"\n        from\n        (\n    \tselect\n    \t\tdistinct \"orderNumber\"\n    \tfrom\n    \t\t(\n    \t\t\tselect\n    \t\t\t\t*,\n    \t\t\t\tto_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n    \t\t\tfrom\n    \t\t\t\t${ev_default_db_name}.\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n    \t\t\twhere\n    \t\t\t\t\"payment_date\" >= '2024-03-01'\n    \t\t\t\tand not(\"orderNumber\" like any ('SMPL_B2B%', 'CSTM_CORP%'))\n    \t\t\t\tand not (\"transactionId\" like any ('APP_FREE%', 'WEB_FREE%'))\n    \t\t\t\tand \"course_id\" not in (1018, 1019, 1020)\n    \t\t\t\tand not(\"userEmail\" like any ('%simplilearnautomation%'))\n    \t\t\t\tand \"is_test_payment\" = 0\n    \t\t)\n    \twhere\n    \t\"orderNumber\" not in (\n    \t\t\tselect distinct \"orderNumber\"\n    \t\t\t\tfrom\n    \t\t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n    \t\t\t\twhere\n    \t\t\t\t\t\"ndate\" >= '2024-03-01'\n    \t\t\t\t)\n    \tand \"orderNumber\" is not null\n    \tand not(\"orderNumber\" like any ('00%')) --and \"orderNumber\"!='BACKEND_1641204895_SP718612'\n    \t\n    \torder by \"orderNumber\"\t\n        )\n    )\n    \t\t\n    union all\n    ----------------------------------------\n    -------- elt2 collection check ---------\n    ----------------------------------------\n    (\n        select\n    \t\"userEmail\" as \"Email\",\n    \t\"Program Name\",\n    \t\"orderNumber\" as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"University\",\n    \t\"deviation\" as \"Deviation\",\n    \t'elt2 Check' as \"Category\",\n    \t'Collection check' as \"Sub-Category\",\n    \t'Deviation in Collection' as \"Status\"\n        from\n        (\n        \tselect\n        \t\t\"userEmail\",\n        \t\t\"Program Name\",\n        \t\t\"orderNumber\",\n        \t\t\"collection_pr\",\n        \t\t\"collection_ue\",\n        \t\t\"paymentCountry\",\n        \t\t\"paymentGeo\",\n        \t\t\"University\",\n        \t\t\"collection_pr\" - \"collection_ue\" as \"deviation\",\n        \t\t\"currency\"\n        \tfrom(\n        \t\t\tselect\n        \t\t\t\t*,\n        \t\t\t\tcase\n        \t\t\t\t\twhen \"collection_pr\" = \"collection_ue\" then 1\n        \t\t\t\t\telse 0\n        \t\t\t\tend as \"flag\"\n        \t\t\tfrom(\n        \t\t\t\t\t(\n        \t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\"orderNumber\",\n        \t\t\t\t\t\t\tround(sum(\"amount\"), 0) as \"collection_pr\",\n        \t\t\t\t\t\t\tmax(\"paymentRegion\") as \"paymentRegion\",\n        \t\t\t\t\t\t\tmax(\"paymentCountry\") as \"paymentCountry\",\n        \t\t\t\t\t\t\tsum(\"discountAmount\") as \"discountAmount\"\n        \t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t(\n        \t\t\t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\t\t*,\n        \t\t\t\t\t\t\t\t\tto_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n        \t\t\t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t\t\t${ev_default_db_name}.\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n        \t\t\t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\t\t\"payment_date\" >= '2024-03-01'\n        \t\t\t\t\t\t\t\t\tand not(\"orderNumber\" like any ('SMPL_B2B%', 'CSTM_CORP%'))\n        \t\t\t\t\t\t\t\t\tand not (\"transactionId\" like any ('APP_FREE%', 'WEB_FREE%')\t\t\t\t\t\t\t\t\t)\n        \t\t\t\t\t\t\t\t\tand \"course_id\" not in (1018, 1019, 1020)\n        \t\t\t\t\t\t\t\t\tand not(\"userEmail\" like any ('%simplilearnautomation%'))\n        \t\t\t\t\t\t\t\t\tand \"is_test_payment\" = 0\n        \t\t\t\t\t\t\t)\n        \t\t\t\t\t\tgroup by 1\n        \t\t\t\t\t) pr\n        \t\t\t\t\tleft join \n        \t\t\t\t\t(\n        \t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\"orderNumber\" as \"oN\",\n        \t\t\t\t\t\t\tround(sum(\"order_selling_price\"), 0) as \"collection_ue\",\n        \t\t\t\t\t\t\tmax(\"paymentGeo\") as \"paymentGeo\",\n        \t\t\t\t\t\t\tmax(\"University Name\") as \"University\",\n        \t\t\t\t\t\t\tmax(\"userEmail\") as \"userEmail\",\n        \t\t\t\t\t\t\tmax(\"Program Name\") as \"Program Name\",\n        \t\t\t\t\t\t\tmax(\"currency\") as \"currency\",\n        \t\t\t\t\t\t\tmax(\"ndate\") as \"ndate\"\n        \t\t\t\t\t\tfrom(\n        \t\t\t\t\t\t\t\tselect *\n        \t\t\t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n        \t\t\t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\t\t\"ndate\" >= '2024-03-01'\n        \t\t\t\t\t\t\t)\n        \t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\"orderNumber\" is not null\n        \t\t\t\t\t\t\tand not(\"orderNumber\" like any ('00%'))\n        \t\t\t\t\t\tgroup by 1\n        \t\t\t\t\t) ue \n        \t\t\t\t\ton pr.\"orderNumber\" = ue.\"oN\"\n        \t\t\t\t\n        \t\t\t)\n        \t\t\torder by \"orderNumber\"\n        \t\t\t\t\n        \t\t)\n        \twhere\n        \t\t\"flag\" = 0\n        \t\tand abs(\"deviation\") > 1\n        \t\tand \"University\" is not null\n        )\n    )\n    \n    union all\n    ----------------------------------------------------------------\n    ---checkpoint 3----pg payout inputs duplicate entry check\n    ----------------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Duplicate entry check' as \"Sub-Category\",\n    \t'Duplicate Entry' as \"Status\"\n        from\n        (\n        \tselect\n        \t\t\"universityFlag\" as \"University\",\n        \t\t\"programName\" as \"Program Name\",\n        \t\t\"paymentGeo\" as \"Payment Geo\"\n        \tfrom(\n        \t\t\tselect\n        \t\t\t\t\"universityFlag\",\n        \t\t\t\t\"programName\",\n        \t\t\t\t\"paymentGeo\",\n        \t\t\t\tcount(\"programName\") as \"count\"\n        \t\t\tfrom\n        \t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\"\n        \t\t\tgroup by 1, 2, 3\n        \t\t\t\thaving \"count\" > 1\n        \t\t)\n        )\n    )            \n    union all\n    --------------------------------------------------------\n    -------- pg payout inputs missing value check ----------\n    --------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"programName\" as \"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"universityFlag\" as \"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Missing value check' as \"Sub-Category\",\n    \t'Missing value' as \"Status\"\n        from\n        (\n            select\n                *\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\"\n            where concat(\"universityFlag\", \"programName\", \"paymentGeo\", \"deductionsCurrency\", \"affiliatePaymentCosts\", \"minPayout\", \"payoutPercentage\", \"contractStartDate\",   \"contractEndDate\", \"minASP\", \"maxASP\", \"financeCharges\", \"SalesCharges\", \"marketingCharges\", \"voucherCosts\", \"instructorCosts\", \"teachingAssistantsCosts\", \"platformCosts\", \"Revised_Logic_Applicable_Flag\") is null\n        )\n    )\n    \n    union all\n    ---------------------------------------------------------------\n    --------- pg payout inputs program name validation ------------\n    ---------------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"programName\" as \"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"universityFlag\" as \"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Program Name validation' as \"Sub-Category\",\n    \t'Program Name mismatch' as \"Status\"\n        from\n    \t(\n    \t\tselect\n    \t\t\t*\n    \t\tfrom \n    \t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" pgp_inp\n    \t\tleft join \n    \t\t(\n    \t\t\tselect\n    \t\t\t\tdistinct case when \"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n    \t\t\t\t\t\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n    \t\t\t\t\t\t\telse \"Program Name\" end as \"Program Name\"\n    \t\t\tfrom\n    \t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n    \t\t\twhere\n    \t\t\t\t\"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n    \t\t) elt2 on pgp_inp.\"programName\" = elt2.\"Program Name\"\n    \t\n    \t\twhere\n    \t\t\telt2.\"Program Name\" is null\n    \t\torder by\n    \t\t\telt2.\"Program Name\"\n    \t)\n    )\n    \n    union all\n    -------------------------------------------------------------------\n    --- checkpoint 4 - finance control check for current month entry --\n    -------------------------------------------------------------------\n    (\n    \tselect\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\tdate_trunc('month',current_date) as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Current Month Entry Check' as \"Sub-Category\",\n    \t\t'Missing Current Month Entry' as \"Status\"\n    \tfrom\n    \t\t(\n            select\n                max(to_date(\"Month\")) as \"current_month_crm\"\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n            having date_trunc('month',\"current_month_crm\") <> date_trunc('month',current_date)\n    \t\t)\n    )\t\t\n    \n    union all\n    ---------------------------------------------------------------\n    -------- finance control check for historical entries ---------\n    ---------------------------------------------------------------\n    (\n    \tselect\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\tNULL as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Historical entry check' as \"Sub-Category\",\n    \t\t'Missing Historical Entry' as \"Status\"\n    \tfrom\n    \t\t(\n                select\n                   datediff('months',\"Start_date\",\"Latest_month\")+1 \"expected_#months\",\n                   \"actual_#months\",\n                   abs(\"expected_#months\" - \"actual_#months\") \"#missing_months\"\n                from(\n                        select\n                            distinct\n                            to_date('2018-12-01') as \"Start_date\",\n                            max(\"Month\") \"Latest_month\" ,\n                            count(distinct date(\"Month\")) \"actual_#months\"\n                        from\n                            ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" \n                    )\n                where \"#missing_months\" > 0\n    \t\t)\n    )\n            \n    union all\n    ------------------------------------------------------\n    ------ finance control check for missing values ------\n    ------------------------------------------------------\n    (\n        select\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\t\"Month\" as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Missing value check' as \"Sub-Category\",\n    \t\t'Missing Value' as \"Status\"\n    \tfrom\n    \t\t(\n    \t\tselect\n    \t\t\t*\n    \t\tfrom\n    \t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n    \t\twhere concat(\"Month\", \"INR.to.1.USD\", \"AUD.to.1.USD\", \"GBP.to.1.USD\", \"EUR.to.1.USD\", \n    \t\t\t\t\t\"USD.to.INR\", \"AUD.to.INR\", \"GBP.to.INR\", \"EUR.to.INR\", \"CAD.to.INR\", \"SGD.to.INR\",       \n    \t\t\t\t\t\"CAD.to.1.USD\", \"TDR.IN\", \"TDR.AMERICAS\", \"TDR.ROW\", \"Sales.Commission.IN\", \n    \t\t\t\t\t\"Sales.Commission.AMERICAS\", \"Sales.Commission.ROW\", \"Trainer.fee.LVC\", \"Trainer.fee.CR\", \n    \t\t\t\t\tcase when \"Month\" >= '2021-10-01' then \"SGD.to.1.USD\" else 1 end) is null\n    \t\t)\n    )\n    \n    union all\n    ------------------------------------------------------------------------------\n    -----checkpoint 2-------------------------------------------------------------\n    ------------------------------------------------------------------------------\n    ------- Complete Order Check FullPayment order check ---------\n    \n    (\n        select\n        \"userEmail\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(A.\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" as \"Payment Geo\",\n        date(\"latest_payment_dt\") as \"Month\",\n        \"universityFlag\" as \"University\",\n        null as \"Deviation\",\n        'Complete order check' as \"Category\",\n        'Full Payment check' as \"Sub-Category\",\n        'Missing order' as \"Status\"\n        from\n    \n    \t(\n    \tselect\n        distinct \n        \"userEmail\",\n        \"New_Program Name\" \"Program Name\",\n        \"latest_payment_dt\",\n        \"New_reconciliation_id\" \"reconciliation_id\",\n        \"paymentGeo\",\n        \"universityFlag\" ,\n        max(\"orderNumber\") \"orderNumber\"\n        \n        from\n            university_orders_with_conversion_CTE elt2\n            \n            left join\n            (\n    \t\t\tselect distinct csa.email,dim.\"Program Name\" program_name\n    \t\t\t\t  ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n    \t\t\t\t  ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n    \t\t\tfrom ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n    \t\t\tleft join\n    \t\t\t(\n    \t\t\t\t  select \"Course\",\"Program Name\" \n    \t\t\t\t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n    \t\t\t\t  group by 1,2 \n    \t\t\t) dim\n    \t\t\ton  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n    \t\t) csa\n    \t\tON elt2.\"userEmail\" = csa.email and trim(csa.program_name) = trim(elt2.\"New_Program Name\")\n            \n        where \"universityFlag\" is not null\n            and \"latest_payment_dt\" >= '2024-03-01'\n            and \"only_prep_bought\" != 1\n            and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n               or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n            and ((\"Revised_Logic_Applicable_Flag\" ilike 'yes' and At_least_1_LVC_attended = 1 )\n                or  \"Revised_Logic_Applicable_Flag\" ilike 'no')\n            and \"latest_payment_dt\"<=\"main_bundles_max_ndate\"\n        group by 1,2,3,4,5,6\n        ) A\n    \n    ---------------------- University Payout Table ------------\n        left join \n        (\n            select\n                \"Email\",\n                case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                    else prod_dim.\"Program Name\" end as \"Program_Name\",\n                \"University_flag\",\n                \"reconciliation_id\",\n                \"order_type\"\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n                left join\n                EDW.DW.DIM_PRODUCT_REF prod_dim\n                ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n            where\n                \"latest_payment_date\" >= '2024-03-01'\n                and \"order_type\" = 'Order'\n                and \"University_flag\" is not null\n                and \"paymentQueryType\" = 'B2C'\n            group by\n                1,2,3,4,5\n        ) B \n    \ton A.\"userEmail\" = B.\"Email\"\n    \t\tand A.\"Program Name\" = B.\"Program_Name\"\n    \t\tand A.\"universityFlag\" = B.\"University_flag\"\n    \t\tand A.\"reconciliation_id\" = B.\"reconciliation_id\"\n    \n        where \"Email\" is null \n    )\n    -------------------------------------------------------------\n    \n    \n    union all\n    -------------------------- Checkpoint -----------------------------------\n    ----------- complete order Full Payment order Collection check ----------\n    -------------------------------------------------------------------------\n    (    \n        select\n        \"userEmail\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(A.\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" ,\n        date(\"latest_payment_dt\") as \"Month\",\n        \"universityFlag\" ,\n        (\"elt2_collection\"-\"upf_collection\") \"Deviation\",\n        'Complete order check' as \"Category\",\n        'Full Payment collection check' as \"Sub-Category\",\n        'Deviation in Collection' as \"Status\"\n        from\n        \n        \t(\n        \tselect\n        \t\t\"userEmail\",\n        \t\t\"New_Program Name\" \"Program Name\",\n        \t\t\"latest_payment_dt\",\n        \t\t\"New_reconciliation_id\" \"reconciliation_id\",\n        \t\t\"paymentGeo\",\n        \t\t\"universityFlag\",\n                max(\"orderNumber\") \"orderNumber\",\n        \t\tsum(\"order_selling_price\" / \"conv_to_USD\") \"elt2_collection\"\n        \t\t\n        \tfrom\n                university_orders_with_conversion_CTE elt2\n        \tleft join\n                (\n                select distinct csa.email,dim.\"Program Name\" program_name\n        \t\t\t  ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n        \t\t\t  ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n                  from ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n                  left join\n                  (\n                \t  select \"Course\",\"Program Name\" \n                \t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n                \t  group by 1,2 \n                  ) dim\n                  on  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n                 ) csa\n                 ON elt2.\"userEmail\" = csa.email and trim(csa.program_name) = trim(elt2.\"New_Program Name\")\n                \n            where \"universityFlag\" is not null\n                and \"latest_payment_dt\" >= '2024-03-01'\n                and \"only_prep_bought\" != 1\n                and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n                   or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n                   -- );\n                and ((\"Revised_Logic_Applicable_Flag\" ilike 'yes' and At_least_1_LVC_attended = 1 )\n                    or  \"Revised_Logic_Applicable_Flag\" ilike 'no')\n                and \"latest_payment_dt\"<=\"main_bundles_max_ndate\"\n                \n            group by 1,2,3,4,5,6\n            \n        \t) A\n        \t---------------------- University Payout Table ------------\n            left join \n            (\n                select\n                    distinct\n                    \"Email\",\n                    case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                        else prod_dim.\"Program Name\" end as \"Program_Name\",\n                    \"University_flag\",\n                    \"reconciliation_id\",\n                    \"order_type\",\n                    \"collection_amount\" \"upf_collection\"\n                from\n                    ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n                    left join\n                    edw.dw.DIM_PRODUCT_REF prod_dim\n                    ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n                where\n                    \"latest_payment_date\" >= '2024-03-01'\n                    and \"order_type\" = 'Order'\n                    and \"University_flag\" is not null\n                    and \"paymentQueryType\" = 'B2C'\n                \n            ) B \n        \ton A.\"userEmail\" = B.\"Email\"\n            and A.\"Program Name\" = B.\"Program_Name\"\n            and A.\"universityFlag\" = B.\"University_flag\"\n            and A.\"reconciliation_id\" = B.\"reconciliation_id\"\n        \n            where abs(round(\"elt2_collection\") - round(\"upf_collection\")) > 1\t\n    )\n    \t\t\n    -----------------------------------------------------------------------------\n    -----------------------------------------------------------------------------\n    \n    \n    union all\n    -------------------------------------------------------\n    ----- checkpoint 6 - Deviation in Refund Collection ---\n    -------------------------------------------------------\n    (\n        select\n        \"Email\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" as \"Payment Geo\",\n        null as \"Month\",\n        \"University_flag\" as \"University\",\n        (\"collection_amount\" + \"refund_elt2_USD\") *(-1) as \"Deviation\",\n        'Refund' as \"Category\",\n        \"Sub-Category\",\n        'Deviation in Refund Collection' as \"Status\"\n        from\n        (\n            \tselect\n            \t\t*\n                from\n                    (\n                        select\n                            \"Email\",\n                            \"Program Name\",\n                            \"University_flag\",\n                            \"reconciliation_id\",\n                            sum(\"collection_amount\") as \"collection_amount\",\n                            max(\"orderNumber\") as \"orderNumber\",\n                            max(\"paymentGeo\") as \"paymentGeo\"\n                        from\n                            (\n                                select\n                                    *\n                                from\n                                    ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n                                where\n                                    \"order_type\" in ('Refund', 'Chargeback')\n                                    and \"latest_payment_date\" >= '2024-03-01'\n                                    and \"paymentQueryType\" = 'B2C'\n                                order by\n                                    \"latest_payment_date\"\n                            )\n                        group by 1,2,3,4\n                    ) pay\n                    LEFT JOIN \n                    (\n                        select\n                            \"userEmail\",\n                            \"Program Name\" as \"Program Name_\",\n                            \"RefundReconciliation_id\",\n                            sum(\"partialRefundAmount_USD\") as \"refund_elt2_USD\",\n                            max(\"Sub-Category\") as \"Sub-Category\"\n                        from(\n                                select\n                                *,\n                                case\n                                    when \"currency\" = 'USD' THEN 1\n                                    when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n                                    when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                                    when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                                    when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                                    when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\"\n                                    when \"currency\" = 'SGD' THEN \"SGD.to.INR\" / \"INR.to.1.USD\"\n                                end as \"conv_to_USD_\",\n                                case\n                                    when (\"order_selling_price_order\" - sum(\"partialRefundAmount\") over (partition by \"userEmail\", \"Program Name\")) > 0\n                                        then 'Partial Refund'\n                                    else 'Full Refund'\n                                end as \"Sub-Category\",\n                                \"partialRefundAmount\" / \"conv_to_USD_\" as \"partialRefundAmount_USD\"\n                                \n                                from\n                                (\n                                    select * from        \n                                        (\n                                            select * from\n                                                ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n                                            where\n                                                \"refundedOrderNumber\" is not null\n                                                and \"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n                                                and \"ndate\" >= '2024-03-01'\n                                                and \"partialRefundAmount\" > 0\n                                            order by\n                                                \"userEmail\",\n                                                \"Program Name\"\n                                        ) A\n                                        LEFT JOIN \n                                        (\n                                            select\n                                                \"userEmail\" as \"email\",\n                                                \"Program Name\" as \"PName\",\n                                                sum(\"order_selling_price\") as \"order_selling_price_order\"\n                                            from\n                                                ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n                                            where\n                                                \"orderNumber\" is not null\n                                                and \"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n                                            group by\n                                                \"userEmail\",\n                                                \"Program Name\"\n                                        ) B \n                                        on A.\"userEmail\" = B.\"email\"\n                                        and A.\"Program Name\" = B.\"PName\"\n                                ) elt2\n                                LEFT JOIN \n                                (\n                                    select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n                                ) rate \n                                on year(elt2.\"ndate\") = year(to_date(rate.\"Month\"))\n                                and month(elt2.\"ndate\") = month(to_date(rate.\"Month\"))   \n                            )\n                            group by 1, 2, 3\n                    ) elt \n                    on pay.\"Email\" = elt.\"userEmail\"\n                    and pay.\"Program Name\" = elt.\"Program Name_\"\n                    and pay.\"reconciliation_id\" = elt.\"RefundReconciliation_id\"\t \n                where \"collection_amount\" + \"refund_elt2_USD\" > 1\n            )\n    )\n                    \n    -------------------------------------------------------\n    ----- checkpoint 6 - Deviation in Refund Payout -------\n    -------------------------------------------------------\t\t\n    /*\n    union all\n        (\n        select\n        \t\"Email\" as \"Email\",\n        \t\"Program Name\",\n            concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"orderNumber\",\n        \t\"paymentGeo\" as \"Payment Geo\",\n        \t\"latest_payment_date\" as \"Month\",\n        \t\"University_flag\" as \"University\",\n        \t\"sum_final_payout\" as \"Deviation\",\n        \t'Refund' as \"Category\",\n        \t'Refund Payout Check' as \"Sub-Category\",\n        \t'Deviation in Refund Payout' as \"Status\"\n        from\n        \t(\n        \t\tselect\n        \t\t\t*\n        \t\tfrom\n        \t\t\t\t(\n        \t\t\t\t\tselect\n        \t\t\t\t\t\tdistinct \"Email\",\"Program Name\",\"orderNumber\",\"reconciliation_id\",\"University_flag\",\"paymentGeo\",\"latest_payment_date\"\n        \t\t\t\t\tfrom\n        \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n        \t\t\t\t\twhere\n        \t\t\t\t\t\t\"order_type\" not in ('Chargeback', 'Refund')\n        \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n        \t\t\t\t) A\n        \t\t\t\tleft join \n        \t\t\t\t(\n        \t\t\t\t\tselect\n        \t\t\t\t\t\t\"Email\" as \"email\",\n        \t\t\t\t\t\t\"Program Name\" as \"programName\",\n        \t\t\t\t\t\t\"University_flag\" as \"uni\",\n                                \"reconciliation_id\" \"reconId\",\n        \t\t\t\t\t\tsum(\"final_payout\") as \"sum_final_payout\"\n        \t\t\t\t\tfrom\n        \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n        \t\t\t\t\tgroup by 1,2,3,4 having \"sum_final_payout\" < -1\n        \t\t\t\t\torder by\n        \t\t\t\t\t\t\"Email\",\n        \t\t\t\t\t\t\"Program Name\"\n        \t\t\t\t) B \n        \t\t\t\ton A.\"Email\" = B.\"email\"\n        \t\t\t\tand A.\"Program Name\" = B.\"programName\"\n        \t\t\t\tand A.\"University_flag\" = B.\"uni\"\n                        and a.\"reconciliation_id\" = b.\"reconId\"\n        \t\twhere\n        \t\t\t\"email\" is not null\n        \t\t\tand \"latest_payment_date\" >= '2024-03-01'\n        \t)\n        )\n    */\n    \n    -----------------------------------------------\n    --checkpoint 7 - Deviation in Payout ----------\n    ----------------------------------------------- \n    ----- FullPayment or PartialPayment Order -----\n    union all\n    (\n       select\n    \t\t\"Email\",\n    \t\t\"Program Name\",\n    \t\tconcat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"Order Number\",\n    \t\t\"paymentGeo\" as \"Payment Geo\",\n    \t\t\"latest_payment_date\" as \"Month\",\n    \t\t\"University_flag\" as \"University\",\n    \t\t\"Deviation in Payout\" as \"Deviation\", \n    \t\t'Payout Check' as \"Category\",\n    \t\t'FullPayment or PartialPayment Order' as \"Sub-Category\", \n    \t\t'Deviation in Payout' as \"Status\"\n    \tfrom\n    \t\t(\n    \t\t\tselect\n    \t\t\t\telt.*,\n    \t\t\t\t\"final_payout_elt2\" - \"final_payout\" as \"Deviation in Payout\"\n    \t\t\tfrom\n    \t\t\t(\n    \t\t\t\tselect \"Email\",\n    \t\t\t\t\tmain.\"reconciliation_id\",\n    \t\t\t\t\t\"Program Name\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\"University_flag\",\n    \t\t\t\t\tmax(main.\"orderNumber\") \"orderNumber\",\n    \t\t\t\t\tmax(\"paymentGeo\") \"paymentGeo\",\n    \t\t\t\t\tmax(\"latest_payment_date\") \"latest_payment_date\",\n    \t\t\t\t\tmax(case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n                              then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100)\n                          when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n                              then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n                          else  GREATEST((\"collection_minus_GST_and_TDR_subvention_costs\" - \n                                          \"Affiliate_payment_cost\" - \"FinanceCharges_cost\" - \n                                          \"SalesCharges_cost\" - \"MarketingCharges_cost\" - \"Voucher_cost\" - \n                                          \"Instructor_cost\" - \"TeachingAssistants_cost\" - \"Platform_cost\"\n                                          )* \n                                          ((main.\"payoutPercentage\" )/100)\n                                         , case when (\"paymentCourse\") ilike '%getting%started%' and (\"upt_final_payout\")>((main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) then 0\n                                                 else (main.\"minPayout\" / main.\"deductionsCurrency_to_USD\") end)\n    \t\t\t\t\t\tend) as \"final_payout_elt2\"\n    \t\t\t\tfrom\n    \t\t\t\t\t(\n                            select * exclude(\"payoutPercentage\"),\n                                  max(case when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 1 and 230 then 20\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 231 and 500 then 15\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 501 and 715 then 12\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" > 715 then 10\n                                      \t\t\telse \"payoutPercentage\" end) \n                                  \t\t\tover (partition by \"Email\",\"order_type\",\"Program Name\",\"University_flag\",\"reconciliation_id\") as \"payoutPercentage\"  \n                                  from\n                                  (\n                                  select *\n                                    ,case when \"University_flag\" ilike '%ihub%' then \n                                                row_number() over (partition by \"University_flag\" order by \"latest_payment_date\", \"reconciliation_id\",\"Email\") \n                                  \t\t\telse null end \"enrollment_rn\"\n                                  from \n                                  (\n                                      select ord.* exclude(\"latest_payment_date\") , \n                                          \"latest_payment_date\",\n                                          \"latest_payment_date\" \"old_latest_payment_date\",\n                                          NULL \"first_lvc_attended_date\",\n                                          NULL At_least_1_LVC_attended\n                                      from order_final_agg_cte ord\n                                      where \"ndate\" < '2023-12-11' or \"Revised_Logic_Applicable_Flag\" ilike 'no'\n                                \n                                      union\n                                \n                                      select ord.* exclude(\"latest_payment_date\") ,\n                                          greatest(first_lvc_attended_date,\"latest_payment_date\") \"latest_payment_date\",\n                                          \"latest_payment_date\" \"old_latest_payment_date\",\n                                          first_lvc_attended_date \"first_lvc_attended_date\",\n                                          At_least_1_LVC_attended\n                                      from order_final_agg_cte ord\n                                \n                                      left join\n                                      (\n                                          select distinct csa.email,dim.\"Program Name\" program_name\n                                          ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n                                          ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n                                          from ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n                                          left join\n                                          (\n                                        \t  select \"Course\",\"Program Name\" \n                                        \t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n                                        \t  group by 1,2 \n                                          ) dim\n                                          on  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n                                      ) as csa\n                                      ON ord.\"Email\" = csa.email and trim(csa.program_name) = trim(ord.\"Program Name\")\n                                \n                                      where At_least_1_LVC_attended = 1 and \"Revised_Logic_Applicable_Flag\" ilike 'yes' and \"ndate\" >= '2023-12-11' \n                                  )\n                                  qualify min(case when \"paymentCourse\" ilike '%getting%started%' or \"paymentCourse\" ilike '%complement%' then 'zzzzz' else  \"paymentCourse\" end) \n                                              over (partition by \"Email\",\"University_flag\",\"Program Name\") not ilike 'zzzzz'\n                                  )\n                        ) main\n    \t\t\t\tLEFT JOIN \n    \t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n    \t\t\t\tON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  \n    \t\t\t\t  and main.\"orderNumber\" = emi.\"orderNumber\"\n    \t\t\t\t\n                    where \"latest_payment_date\" >= '2024-03-01'\n                        and \"University_flag\" is not null\n                        \n    \t\t\t\tgroup by 1,2,3,4,5\n    \t\t\t) elt\n    \t\t\tleft join\n    \t\t\t(\n    \t\t\t\tselect\n    \t\t\t\t\t\"Email\",\n    \t\t\t\t\tcase when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n    \t\t\t\t\t\telse prod_dim.\"Program Name\" end as \"Program Name\",\n    \t\t\t\t\t\"University_flag\",\n    \t\t\t\t\t\"reconciliation_id\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\"final_payout\"\n    \t\t\t\tfrom\n    \t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n    \t\t\t\t\tleft join\n    \t\t\t\t\tEDW.DW.DIM_PRODUCT_REF prod_dim\n    \t\t\t\t\tON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n    \t\t\t\twhere\n    \t\t\t\t\t\"latest_payment_date\" >= '2024-03-01'\n    \t\t\t\t\tand \"University_flag\" is not null\n    \t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n    \t\t\t) payout\n    \t\t\ton payout.\"Email\" = elt.\"Email\"\n    \t\t\tand payout.\"Program Name\" = elt.\"Program Name\"\n    \t\t\tand payout.\"reconciliation_id\" = elt.\"reconciliation_id\"\n    \t\t\tand payout.\"University_flag\" = elt.\"University_flag\"\n    \t\t\tand payout.\"order_type\" = elt.\"order_type\"\n    \t\t\n\t\t\twhere payout.\"Email\" is not null\n    \t\t\tand abs(\"Deviation in Payout\") > 1\n    \t\t)\n    ) \n    \n    ----- FullPayment or PartialPayment Refunds -----\n    union all\n    (\n    \tselect\n          \"Email\",\n          \"Program Name\",\n          concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"Order Number\",\n          \"paymentGeo\" as \"Payment Geo\",\n          \"latest_payment_date\" as \"Month\",\n          \"universityFlag\" as \"University\",\n          \"Deviation in Payout\" as \"Deviation\",\n          'Payout Check' as \"Category\",\n          'FullPayment or PartialPayment Refund' as \"Sub-Category\" ,\n          'Deviation in Payout' as \"Status\"\t\n\n      from\n      (\n          select\n              elt.*,\n              \"final_payout_elt2\" - \"final_payout\" as \"Deviation in Payout\"\n          from\n              (\n                  select \n                      \"userEmail\" \"Email\",\n                      \"RefundReconciliation_id\" \"reconciliation_id\",\n                      \"Program Name\",\n                      \"order_type\",\n                      \"universityFlag\",\t\t\t\t\n                      to_char(main.\"ndate\",'YYYYMM') \"nmonth\",\n                      max(\"refundedOrderNumber\") \"orderNumber\",\n                      max(\"paymentGeo\") \"paymentGeo\",\n                      greatest(max(\"latest_payment_dt\"),max(\"ndate\")) \"latest_payment_date\",\n                      max(\"latest_payment_dt\") \"latest_payment_dt\",\n                      GREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n                          +  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n                          ) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\"/main.\"conv_to_USD\")\n                        ) * (-1) as \"order_payout\",\n\n                      -1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order  \n                                          by to_char(\"ndate\",'YYYYMM')) = 1 \n                                  then case when ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) then 0 \n                                            else LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n                                else LEAST ( \n                                              abs(\"order_payout\"),\n                                              case when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(\"ndate\",'YYYYMM')) - abs(\"order_payout\")) <=0 then 0\n                                              else max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(\"ndate\",'YYYYMM')) - abs(\"order_payout\")) end\n                                           )\n                        end as \"final_payout_elt2\"\n                  from main_refunds_cte main\n\n                  where main.\"only_prep_bought\" <> 1 \n                      and \"latest_payment_dt\" >= '2024-03-01'\n\n                  group by 1,2,3,4,5,6 \n              ) elt\n              left join\n              (\n                  select\n                      \"Email\",\n                      case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                          else prod_dim.\"Program Name\" end as \"Program Name\",\n                      \"University_flag\",\n                      \"reconciliation_id\",\n                      \"order_type\",\n                      to_char(\"ndate\",'YYYYMM') \"nmonth\",  \n                      max(\"refundedOrderNumber\") \"orderNumber\",\n                      sum(\"final_payout\") \"final_payout\"\n                  from\n                      ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n                      left join\n                      EDW.DW.DIM_PRODUCT_REF prod_dim\n                      ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n                  where\n                      \"latest_payment_date\" >= '2024-03-01'\n                      and \"University_flag\" is not null\n                      and \"paymentQueryType\" = 'B2C'\n                  group by 1,2,3,4,5,6\n              ) payout\n              on payout.\"Email\" = elt.\"Email\"\n              and payout.\"Program Name\" = elt.\"Program Name\"\n              and payout.\"reconciliation_id\" = elt.\"reconciliation_id\"\n              and payout.\"University_flag\" = elt.\"universityFlag\"\n              and payout.\"order_type\" = elt.\"order_type\"\n              and payout.\"nmonth\" = elt.\"nmonth\"\n          where\n              abs(\"Deviation in Payout\") > 1\n      )\n    )\n    \n    union all\n    (\n    select\n    \t\"Email\",\n    \t\"Program Name\",\n    \tconcat(\"orderNumber\",'-',\"reconciliation_id\") as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \t\"latest_payment_date\" as \"Month\",\n    \t\"University_flag\" as \"University\",\n        case\n    \t\twhen \"flag1\" = 1 then \"collection_amount\" - \"collection_amount1\"\n    \t\twhen \"flag2\" = 1 then \"collection_minus_GST\" - \"collection_minus_GST1\"\n    \t\twhen \"flag3\" = 1 then \"Revenue_for_payout_calculation\" - \"Revenue_for_payout_calculation1\"\n    \t\twhen \"flag4\" = 1 then \"final_payout\" - \"final_payout1\"\n    \t\telse null\n    \tend as \"Deviation\",\n    \t'Historical Data Check' as \"Category\",\n    \tcase\n    \t\twhen \"flag1\" = 1 then 'Collection'\n    \t\twhen \"flag2\" = 1 then 'Collection minus GST'\n    \t\twhen \"flag3\" = 1 then 'Revenue for Payout'\n    \t\twhen \"flag4\" = 1 then 'Final Payout'\n    \t\telse null\n    \tend as \"Sub-Category\",\n    \t'Deviation from Historical Data' as \"Status\"\n    from\n    \t(\n    \t\tselect\n    \t\t\t*,\n    \t\t\tcase\n    \t\t\t\twhen abs(\"collection_amount\" - \"collection_amount1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag1\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\"collection_minus_GST\" - \"collection_minus_GST1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag2\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\n    \t\t\t\t\t\"Revenue_for_payout_calculation\" - \"Revenue_for_payout_calculation1\"\n    \t\t\t\t) > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag3\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\"final_payout\" - \"final_payout1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag4\"\n    \t\tfrom(\n    \t\t\t\t(\n    \t\t\t\t\tselect\n    \t\t\t\t\t\t\"Email\",\n    \t\t\t\t\t\t\"Program Name\",\n                            \"reconciliation_id\",\n    \t\t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\t\"University_flag\",\n                            \"paymentGeo\",\n                            max(\"latest_payment_date\") \"latest_payment_date\",\n                            max(\"orderNumber\") as \"orderNumber\",\n    \t\t\t\t\t\tsum(\"collection_amount\") as \"collection_amount\",\n    \t\t\t\t\t\tsum(\"collection_minus_GST\") as \"collection_minus_GST\",\n    \t\t\t\t\t\tsum(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",\n    \t\t\t\t\t\tsum(\"final_payout\") as \"final_payout\"\n    \t\t\t\t\tfrom\n    \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n    \t\t\t\t\twhere\n    \t\t\t\t\t\t\"latest_payment_date\" < date_trunc('month',CURRENT_DATE)\n    \t\t\t\t\t\tand \"latest_payment_date\" >= '2024-03-01'\n    \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n                        group by 1,2,3,4,5,6\n    \t\t\t\t) A\n    \t\t\t\tleft join (\n    \t\t\t\t\tselect\n    \t\t\t\t\t\t\"Email\" as \"email\",\n    \t\t\t\t\t\t\"Program Name\" as \"Program_Name\",\n                            \"reconciliation_id\" \"reconciliation_id1\",\n    \t\t\t\t\t\t\"order_type\" as \"orderType\",\n    \t\t\t\t\t\t\"University_flag\" as \"UniversityFlag\",\n                            max(\"orderNumber\") as \"orderNumber1\",\n    \t\t\t\t\t\tsum(\"collection_amount\") as \"collection_amount1\",\n    \t\t\t\t\t\tsum(\"collection_minus_GST\") as \"collection_minus_GST1\",\n    \t\t\t\t\t\tsum(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation1\",\n    \t\t\t\t\t\tsum(\"final_payout\") as \"final_payout1\"\n    \t\t\t\t\tfrom\n    \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n                        where \n                            \"latest_payment_date\" < date_trunc('month',CURRENT_DATE)\n    \t\t\t\t\t\tand \"latest_payment_date\" >= '2024-03-01'\n    \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n                        group by 1,2,3,4,5\n    \t\t\t\t) B on A.\"Email\" = B.\"email\"\n    \t\t\t\tand A.\"Program Name\" = B.\"Program_Name\"\n    \t\t\t\tand A.\"order_type\" = B.\"orderType\"\n    \t\t\t\tand A.\"University_flag\" = B.\"UniversityFlag\"\n    \t\t\t\tand A.\"reconciliation_id\" = B.\"reconciliation_id1\"\n    \t\t\t)\n    \t\twhere\n    \t\t\t\"email\" is not null\n    \t)\n    where\n    \t\"flag1\" = 1 or \"flag2\" = 1 or \"flag3\" = 1 or \"flag4\" = 1\n    )\n    \n)\nwhere \"Order Number\" not in ('CSTM_9L4EVNVELPB-4815036.00000','CSTM_PARTIAL_SUBS_CL9YL89VWTS-4814716.00000',\n                            'CSTM_D385LFNDDLQ-4814710.00000','CSTM_6YGHLGLVBT6-4814160.00000',\n                            'CSTM_CJ2UA76PEJ4-4813979.00000','CSTM_429L7MQ092K-4813519.00000') -- IITB missing orders in March                            \n--     \tand (\"Status\" <> 'Program Name mismatch' and \"Program Name\" <> 'Professional Certificate Program in Cloud Computing and DevOps') -- Prorgam Renamed to create new program with same name\n\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2913695":{"id":2913695,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":592,"y":544,"width":32,"height":32,"inputConnectorIDs":[2913680],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_PUBLIC_target_anomaly_alerts_1 (1)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--CREATE Or replace table \"SL_ANALYTICS_DB\".\"PUBLIC\".\"target_anomaly_alerts\" AS\n\ndelete from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\"\nwhere \"TimeStamp\" = current_date;\n\nINSERT INTO ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\"\n\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\",\n0 \"No. of Days\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" \nwhere \"SHA2_HEX_ID\" not in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\") \n\nunion all\n\nselect a.*,b.\"No. of Days\"+1 from\n(\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" \nwhere \"SHA2_HEX_ID\" in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\") \n)a\nleft join\n(\n  select \"SHA2_HEX_ID\" ,max( \"No. of Days\") as \"No. of Days\" \n  from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\" \n  group by 1\n) b\nON a.\"SHA2_HEX_ID\" = b.\"SHA2_HEX_ID\"\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2957777":{"id":2957777,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-768,"y":400,"width":32,"height":32,"inputConnectorIDs":[2957804],"outputSuccessConnectorIDs":[2957801],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pythn_file_watcher"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"####################################################################\n## Functionality: \tThe code waits for trigger file, tries thrice and then fails/passes the module\n####################################################################\n\nimport os\nimport sys\nimport time\nimport logging\n\nwaitingTime = 60\nexecCtr = 20\ntrgFilePath = ev_aws_prod_tableau_trg\ntrgFileName = 'university_payout.trg'\ntrgFile = trgFilePath + trgFileName\n\nwhile execCtr >= 1:\n    isFile = os.path.isfile(trgFile)\n    trgFile1Exists = (isFile)    \n\n    if (trgFile1Exists is True):\n        print('Trigger file : ' + trgFileName + ' is present at location: ' + trgFilePath)\n        break\n    else:\n        time.sleep(waitingTime)\n        print('Try: '+ str(execCtr) + ': Waiting for File(s): '+ trgFile)\n        logging.info('Watchdog counter = ' + str(execCtr))\n        execCtr = execCtr - 1\n        continue\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2979332":{"id":2979332,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":304,"y":624,"width":32,"height":32,"inputConnectorIDs":[2979302],"outputSuccessConnectorIDs":[2979334],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_PUBLIC_target_anomaly_alerts_stg_1 (2)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"---------- Main select query starts from line 566 ------------\n\nCREATE OR REPLACE TABLE ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" AS\n\n------------- Orders CTE -------------------\nwith elt2_with_upg_orders as\n(\nselect distinct main.* exclude(\"New_Program Name\",\"New_paymentCourse\",\"New_reconciliation_id\",\"New_Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"New_Program Name\") end as \"New_Program Name\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"New_reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg2.\"paymentCourse\",main.\"New_paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg2.\"Program Type\",main.\"New_Program Type\") as \"New_Program Type\" \n\t\tfrom\n        \n    (select distinct main.*, \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"New_Program Name\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"reconciliation_id\") as \"New_reconciliation_id\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"New_paymentCourse\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"New_Program Type\" \n\n\t\tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level og upgrades ------------------\n  \t\t-----------------------------------------------------------\n        left outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"reconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"reconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"orderNumber\" not ilike '%repeat%' \n                and \"mapped_reconciliation_id\" is not null \n                and \"collection_USD\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n                and \"payment Fulfillment type\" = 'Fully paid order' -- added to exclude incomplete upg orders\n          \t) upg\n        \ton elt.\"reconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"New_reconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\n\n--------------------------------------------------------------------------------------------\n---------- To get all the valid orders with some derivations from unified_elt2 -------------\n--------------------------------------------------------------------------------------------\nelt2_orders_CTE as \n(\n  select a.* , --gst.\"GST\", \n\tcase when (lower(\"New_paymentCourse\") like '%getting started%' \n\t\t\t\tor  lower(\"New_paymentCourse\") like '%complimentary%') \n              and count(distinct \"New_paymentCourse\" ) over (partition by a.\"userEmail\",\"New_Program Name\") = 1 \n  \t\t\tthen 1\n\t\tElse 0 end as \"only_prep_bought\",   \n\tifnull(pr.\"serviceTax\",0) \"serviceTax_adjusted\",\n  \tmax(a.\"ndate\") over (partition by a.\"userEmail\",\"New_Program Name\",\"New_reconciliation_id\" ) as \"latest_payment_dt\",\n    round(sum(\"collection_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  as \"Total_Collection_USD\", \n\tcase when NVL(round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2),0) > 0 \n\t\t\t then round( max(\"SellingPrice_USD\") over (partition by a.\"userEmail\",\"Program Name\",a.\"New_reconciliation_id\" ),2)  \n\t\t else \"Total_Collection_USD\" end \n\t\t as \"max_SellingPrice_USD\",\n\tcase when \"New_reconciliation_id\" is not null then 'Order' \n\t\twhen \"RefundReconciliation_id\" is not null then 'Refund' \n\t\telse NULL end \n\t\tas \"order_type\"\n         \n\tfrom elt2_with_upg_orders a\n\tleft join\n  \t(\n    \tselect * from ${ev_default_db_name}.melv1n_crm2.\"target_paymentReconciliations\"\n    ) PR\n  \tON PR.\"orderNumber\" = a.\"orderNumber\"\n  \t\tand pr.\"reconciliation_id\" = a.\"reconciliation_id\"\n\t\t\n    where a.\"orderNumber\" is not null \n\t\tand  \"collection_USD\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"New_Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad')\n\t\tand  a.\"orderNumber\" not like '%_EXTN_%' \n),\n\n--------------------------------------------------------------------------------------\n---------- Mapping orders with university programs and currency conversions ----------\n--------------------------------------------------------------------------------------\nuniversity_orders_with_conversion_CTE as \n(\n  select * from\t\t\t\n  (\n    select elt2.* , --exclude(\"payoutPercentage\"),\n            case when \"currency\" = 'USD' THEN 1\n             when \"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n             when \"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n             when \"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n             when \"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n             when \"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n             when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n            end as \"conv_to_USD\",\n            case when \"currency\"='INR' then 1\n                 when \"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"to_inr\",\t\t \n            case when \"deductionsCurrency\" = 'USD' THEN 1\n                 when \"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                 when \"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                 when \"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                 when \"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n                end as \"deductionsCurrency_to_USD\",\n            case when \"deductionsCurrency\"='INR' then 1\n                 when \"deductionsCurrency\" = 'USD' THEN rate.\"USD.to.INR\"\n                 when \"deductionsCurrency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n                 when \"deductionsCurrency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n                 when \"deductionsCurrency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n                 when \"deductionsCurrency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n                 when \"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n                END as \"deductionsCurrency_to_INR\"\t\n  \n  \t\t\t\n        from \n  \t\t(\n              select elt2.* exclude(\"latest_payment_dt\",\"ndate\"),\n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"latest_payment_dt\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"latest_payment_dt\" \n            end \"latest_payment_dt\", -- Adjusted for getting started \n\n            case when lead(\"New_paymentCourse\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") not in ('%getting%started%','%complimentary%') \n                        and \"New_paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                    then lead(\"ndate\") over (partition by \"userEmail\",\"New_Program Name\",\"universityFlag\" order by \"latest_payment_dt\") \n                else \"ndate\" \n            end \"ndate\", -- Adjusted for getting started \n\n            max(case when \"paymentCourse\" ilike any('%getting%started%','%complimentary%') \n                   then NULL  \n                 when (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 or \"Total_Collection_USD\" > \"max_SellingPrice_USD\") \n                   then \"ndate\" end) over (partition by \"userEmail\",\"New_Program Name\")\n            \"main_bundles_max_ndate\", -- -- Adjusted for getting started purchased after the main bundle\n\n            pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", \n            pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", \n            pgpay_inp.\"instructorCosts\", pgpay_inp.\"teachingAssistantsCosts\", pgpay_inp.\"platformCosts\",\n            pgpay_inp.\"universityFlag\" , pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n            pgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\",pgpay_inp.\"maxASP\",pgpay_inp.\"Revised_Logic_Applicable_Flag\",\n\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"New_paymentCourse\" end as \"mainpaymentCourse\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"orderNumber\" end as \"mainorderNumber\",\n            case when \"only_prep_bought\" = 1 then NULL \n                else \"cohort_name\" end as \"maincohort_name\" \n\n          \t,case when \"universityFlag\" ilike '%ihub%' and \"New_paymentCourse\" not ilike '%gettiing%started%' \n                    and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n                           or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n            then \n                dense_rank() over (partition by \"universityFlag\" order by \"New_reconciliation_id\") \n  \t\t\telse null end \"order_rank\"\n\n        from  elt2_orders_CTE elt2\n\t\t\n        ---------------------------------------------------------------------\n        ------------ PG payouts input sheet owned by product team -----------\n        ---------------------------------------------------------------------\n        LEFT JOIN \n        (\n            select distinct * from  ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" \n        ) pgpay_inp \n        on trim(elt2.\"New_Program Name\") = trim(pgpay_inp.\"programName\")     \n            and elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n            and \"latest_payment_dt\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n            and \"latest_payment_dt\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n            and elt2.\"Total_Collection_USD\" >= pgpay_inp.\"minASP\" \n            and elt2.\"Total_Collection_USD\" <= pgpay_inp.\"maxASP\"\n            and pgpay_inp.\"universityFlag\" is not null \n            and pgpay_inp.\"programName\" is not null\n    \t)elt2\n    \n  \t\t------------------------------------------------------------------------------------------------\n  \t\t------------ Finance Control_Currency Conversion sheet for monthly conversion values -----------\n  \t\t------------------------------------------------------------------------------------------------\n        LEFT OUTER JOIN \n        ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n        on extract(year from elt2.\"latest_payment_dt\") =  extract(year from to_date(rate.\"Month\")) \n            and extract(month from elt2.\"latest_payment_dt\") =   extract(month from to_date(rate.\"Month\"))\n\n\t\t--where    elt2.\"order_type\" = 'Order' \n\t)\n),\n\n----------- Refunds CTE -------------\nelt2_with_upg_refunds as\n(\nselect distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg2.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg2.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg2.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg2.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom\n        \n    (select distinct main.* exclude(\"Program Name\",\"paymentCourse\",\"RefundReconciliation_id\",\"Program Type\"), \n      \t  case when main.\"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management'\n\t\t\telse NVL(upg.\"Program Name\",main.\"Program Name\") end as \"Program Name\",\n          NVL(upg.\"paymentCourse\",main.\"paymentCourse\") as \"paymentCourse\",\n          NVL(upg.\"upg_reconciliation_id\",main.\"RefundReconciliation_id\") as \"RefundReconciliation_id\",\n          NVL(upg.\"Program Type\",main.\"Program Type\") as \"Program Type\" \n\n\t\tfrom \n        -- (select * from\n        ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n        -- where \"userEmail\" = 'denizzkut@gmail.com')\n        main\n\t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n\t\t\t\tand \"refundedOrderNumber\" is not null\n                and \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg \n\t\ton main.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n        ) main\n\n  \t\t-----------------------------------------------------------\n  \t\t--------------- second level of upgrades ------------------\n  \t\t-----------------------------------------------------------\n  \t\tleft outer join \n\t\t(select \"old_reconciliation_id\",\"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" from\n           \t(select \"RefundReconciliation_id\" \n             \tfrom ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n             \twhere \"mapped_reconciliation_id\" is not null \n            ) elt\n            inner join\n            (\n              select \"mapped_reconciliation_id\" as \"old_reconciliation_id\",\"RefundReconciliation_id\" \"upg_reconciliation_id\" , \"Program Name\",\"Program Type\",\"paymentCourse\" \n              from ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\" \n              where \"refundedOrderNumber\" not ilike '%repeat%' \n                and \"refundedOrderNumber\" is not null\n\t\t\t\tand \"mapped_reconciliation_id\" is not null \n                and \"partialRefundAmount\">0 \n                and lower(\"paymentCourse\") not like '%complimentary%' \n          \t) upg\n        \ton elt.\"RefundReconciliation_id\"  =  upg.\"old_reconciliation_id\"\n\t\t)upg2\n\t\ton main.\"RefundReconciliation_id\"  =  upg2.\"old_reconciliation_id\"\n),\n\nelt2_refunds_monthly as \n(\n\tselect a.* exclude(\"cohort_name\"), --gst.\"GST\",\n\t\t--max(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"latest_payment_dt\",\n  \t\t\"order_latest_pdate\"  as \"latest_payment_dt\",\n\t\t--min(a.\"ndate\") over (partition by a.\"userEmail\",a.\"Program Name\",a.\"RefundReconciliation_id\" ) as \"first_payment_dt\",\n\t\t\"ndate\" as \"first_payment_dt\",\n  \t\tcase when lower(\"paymentCourse\") like '%getting started%' and count(distinct \"paymentCourse\" ) over (partition by a.\"userEmail\",a.\"Program Name\") = 1 then 1\n\t\t\tElse 0 end as \"only_prep_bought\",   \n\t\t\n\t\tcase when a.\"reconciliation_id\" is not null then 'Order' \n\t\t\twhen \"RefundReconciliation_id\" is not null then \"refundUnit\" \n\t\t\telse NULL end as \"order_type\",\n\t\tb.\"order ndate\",\n\t\t\"first_lvc_attended_date\",\n\t\tAt_least_1_LVC_attended\n\n\tfrom elt2_with_upg_refunds a \n\t \n  \t-----------------------------------------------------------\n  \t--------- getting orders for refund payout ----------------\n  \t-----------------------------------------------------------\n  \tinner join \n\t(\n\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\n\t\t\t\tmin(\"ndate\") as \"order ndate\" , \n      \t\t\tmin(\"latest_payment_date\") \"order_latest_pdate\",\n\t\t\t\tmin(\"first_lvc_attended_date\") \"first_lvc_attended_date\",\n\t\t\t\tmin(At_least_1_LVC_attended) At_least_1_LVC_attended \n\t\tfrom \n\t\t(\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\",\"first_lvc_attended_date\",At_least_1_LVC_attended \n\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\" ='Order' \n\t\t\t\tand At_least_1_LVC_attended = 1 \n\t\t\t\tand \"Revised_Logic_Applicable_Flag\" ilike 'yes' \n\t\t\t\tand \"latest_payment_date\" >= '2023-12-11' \n\t\tunion\n\t\t\tselect \"Email\", \"Program Name\",\"reconciliation_id\",\"ndate\",\"latest_payment_date\",\"first_lvc_attended_date\",At_least_1_LVC_attended \n\t\t\tfrom ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\" ='Order'\n\t\t\t\tand At_least_1_LVC_attended = 1 \n\t\t\t\tand \"Revised_Logic_Applicable_Flag\" ilike 'yes' \n\t\t\t\tand \"latest_payment_date\" >= '2023-12-11' \n\t\t)\n\t\tgroup by 1,2,3\n\t) b \n\ton a.\"userEmail\" = b.\"Email\" \n\t\tand a.\"Program Name\" = b.\"Program Name\"\n  \t\tand a.\"RefundReconciliation_id\" = b.\"reconciliation_id\"\n\n\twhere a.\"refundedOrderNumber\" is not null \n\t\tand \"partialRefundAmount\"> 0 \n\t\tand \"paymentQueryType\" ='B2C' \n\t\tand lower(\"Program Type\") in ('pg', 'bootcamp', 'jg', 'study abroad') \n\t\tand a.\"ndate\">= '2024-01-01' \n),\n\nmain_refunds_cte as\n(\n--------------------------------------------------------------------------------------\n---------- Mapping refunds with university programs and currency conversions ---------\n--------------------------------------------------------------------------------------\n\tselect elt2.*, odr.\"order_payout\" as \"odr_order_payout\",odr.\"order_payout_INR\" as \"odr_order_payout_INR\" ,ref.\"refund_payout_INR\", ref.\"refund_payout\",\n\t\tref.\"ref_POS_order_selling_price\",pgpay_inp.\"affiliatePaymentCosts\", pgpay_inp.\"financeCharges\", pgpay_inp.\"SalesCharges\", pgpay_inp.\"marketingCharges\", pgpay_inp.\"voucherCosts\", pgpay_inp.\"instructorCosts\",\n\t\tpgpay_inp.\"teachingAssistantsCosts\",pgpay_inp.\"platformCosts\",pgpay_inp.\"universityFlag\", pgpay_inp.\"payoutPercentage\" , pgpay_inp.\"minPayout\",\n\t\tpgpay_inp.\"deductionsCurrency\",pgpay_inp.\"minASP\" ,pgpay_inp.\"maxASP\",\"Revised_Logic_Applicable_Flag\",\n\t\t/*case when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else elt2.\"paymentCourse\" end as \"mainpaymentCourse\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n\t\tcase when lower(elt2.\"paymentCourse\") like '%getting started%' then NULL else \"cohort_name\" end as \"maincohort_name\",\n\t\t */\n  \t\tcase when \"only_prep_bought\" = 1 then NULL \n            else \"paymentCourse\" end as \"mainpaymentCourse\",\n        case when \"only_prep_bought\" = 1 then NULL \n            else \"refundedOrderNumber\" end as \"mainrefundedOrderNumber\",\n  \n\t\tcase when elt2.\"currency\" = 'USD' THEN 1\n\t\t\t\t when elt2.\"currency\" = 'INR' THEN rate.\"INR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.1.USD\"\n\t\t\t\t when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.1.USD\" \n\t\t\t\t when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"conv_to_USD\",\n\t\tcase when elt2.\"currency\"='INR' then 1\n\t\t\t\t\t  when elt2.\"currency\" = 'USD' THEN rate.\"USD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'AUD' THEN rate.\"AUD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'GBP' THEN rate.\"GBP.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'EUR' THEN rate.\"EUR.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'CAD' THEN rate.\"CAD.to.INR\"\n\t\t\t\t\t  when elt2.\"currency\" = 'SGD' THEN rate.\"SGD.to.INR\"\n\t\tend as \"to_inr\",\t\t \n\t\tcase when pgpay_inp.\"deductionsCurrency\" = 'USD' THEN 1\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'INR' THEN \"INR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'AUD' THEN \"AUD.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'GBP' THEN \"GBP.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'EUR' THEN \"EUR.to.1.USD\"\n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'CAD' THEN \"CAD.to.1.USD\" \n\t\t\t\t when pgpay_inp.\"deductionsCurrency\" = 'SGD' THEN rate.\"SGD.to.INR\"/\"INR.to.1.USD\" \n\t\tend as \"deductionsCurrency_to_USD\"\n\n\tfrom elt2_refunds_monthly as  elt2\n\t \n  \t---------------------------------------------------------------------------------------------------\n\t------------ Finance Control_Currency Conversion sheet for monthly conversion values --------------\n\t---------------------------------------------------------------------------------------------------\n\tLEFT OUTER JOIN ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" rate \n\ton extract(year from elt2.\"ndate\") =  extract(year from to_date(rate.\"Month\")) \n\t\tand extract(month from elt2.\"ndate\") =   extract(month from to_date(rate.\"Month\"))\n\t \n  \t-----------------------------------------------------------------------------\n\t------------ PG payouts input sheet owned by product team -------------------\n\t-----------------------------------------------------------------------------\n  \tLEFT JOIN \n\t(\n\t\tselect distinct * from  ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" \n\t)  pgpay_inp \n\ton elt2.\"Program Name\" = pgpay_inp.\"programName\"      \n\t\tand elt2.\"paymentGeo\" = pgpay_inp.\"paymentGeo\"\n\t\tand elt2.\"order ndate\" >= iff(\"contractStartDate\"='', '2019-01-01',\"contractStartDate\") \n\t\tand elt2.\"order ndate\" <= iff(\"contractEndDate\"='', '2099-01-01',\"contractEndDate\")\n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" >= pgpay_inp.\"minASP\" \n\t\tand elt2.\"partialRefundAmount\"/\"conv_to_USD\" <= pgpay_inp.\"maxASP\"\n\t\tand pgpay_inp.\"universityFlag\" is not null \n\t\tand pgpay_inp.\"programName\" is not null\n\t\t\n  \t\n\t-----------------------------------------------------------------------------\n  \t------------------ To get the orders payout for the same purchase -----------\n  \t-----------------------------------------------------------------------------\t\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"order_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"order_payout_INR\" \n\t\tfrom\n\t\t(\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"pg_university_payout_orders\" \n\t\t\twhere \"order_type\"='Order' \n         \n         \tunion \n\n\t\t\tselect \"Email\",\"Program Name\",\"reconciliation_id\",\"University_flag\" ,\n\t\t\t\t\tround(\"order_payout\",4) \"order_payout\", \n\t\t\t\t\tround(\"order_payout_INR\",4) \"order_payout_INR\" \n\t\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\" \n\t\t\twhere \"order_type\"='Order' \n\t\t\t\n\t\t)\n\t\tgroup by 1,2,3,4\n\t) odr \n\ton elt2.\"userEmail\" = odr.\"Email\" \n\t\tand  elt2.\"Program Name\" =  odr.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  odr.\"University_flag\"  \n  \t\tand elt2.\"RefundReconciliation_id\" =  odr.\"reconciliation_id\"   \n\t  \n \t-----------------------------------------------------------------------------\n  \t------ To get the previously made refund payouts for the same purchase ------\n  \t-----------------------------------------------------------------------------\n  \tleft outer join \n\t(\n\t\tselect \"Email\",\"Program Name\",\"RefundReconciliation_id\",\"University_flag\" , \n\t\t\t\tsum(\"order_payout\") as \"refund_payout\", \n\t\t\t\tsum(\"order_payout_INR\") as \"refund_payout_INR\", \n\t\t\t\tsum(\"POS_order_selling_price\") as \"ref_POS_order_selling_price\" \n\t\tfrom  ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table\"\n\t\twhere \"order_type\" like any ('Refund','Chargeback') \n\t\t\tand \"ndate\" <= '2022-03-31'\n\t\tgroup by 1,2,3,4\n\t) ref \n\ton elt2.\"userEmail\" = ref.\"Email\" \n\t\tand elt2.\"Program Name\" =  ref.\"Program Name\" \n\t\tand pgpay_inp.\"universityFlag\" =  ref.\"University_flag\" \n  \t\tand elt2.\"RefundReconciliation_id\" =  ref.\"RefundReconciliation_id\" \n\t  \n\twhere elt2.\"order_type\" like any ('Refund','Chargeback')\n\n),\n\norder_final_agg_cte as\n(\n select \n  main.\"userEmail\" as \"Email\",     \n  main.\"order_type\" as \"order_type\",\n  main.\"New_Program Name\" as \"Program Name\",\n  main.\"universityFlag\" as \"University_flag\",\n  \"New_reconciliation_id\" as \"reconciliation_id\", -- Added new column in the level of this table\n  max(\"mapped_reconciliation_id\") \"mapped_reconciliation_id\", -- Added on 20240305 : SP\n  max(\"Revised_Logic_Applicable_Flag\") \"Revised_Logic_Applicable_Flag\",\n  max(\"main_bundles_max_ndate\") \"main_bundles_max_ndate\",\n  --max(main.\"reconciliation_id\" ) as \"reconciliation_id\",\n  REPLACE(NVL(max(case when main.\"mainorderNumber\" like '%_UPG_%' then 'ZZZ_'||main.\"mainorderNumber\"\n                        else main.\"mainorderNumber\" end\n                      ),\n              max( main.\"mainorderNumber\")),\n          'ZZZ_','') as \"orderNumber\",\n  NULL as \"refundedOrderNumber\",\n  max(main.\"New_Program Type\") \"Program Type\", -- Added on 20240305 : SP\n  max(main.\"mainpaymentCourse\") as \"paymentCourse\" ,\n  max(main.\"paymentGateway\" ) as \"paymentGateway\" ,\n  max(main.\"paymentGeo\" ) as \"paymentGeo\" ,\n  max(main.\"paymentQueryType\" ) as \"paymentQueryType\" ,\n  max(main.\"ndate\") as \"ndate\",\n  sum(emi.\"POS_subvention_excluded\") as \"POS_subvention_excluded\" ,\n  sum(main.\"order_selling_price\") as \"POS_order_selling_price\" ,\n  max(main.\"minPayout\" ) as \"minPayout\" ,\n  max(main.\"payoutPercentage\") as \"payoutPercentage\",\n  max(main.\"order_rank\") \"order_rank\",\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax\",\n  max(main.\"conv_to_USD\" ) as \"conv_to_USD\",\n  max(main.\"to_inr\") as \"to_inr\",\n  max(main.\"deductionsCurrency_to_USD\") as \"deductionsCurrency_to_USD\",\n  max(main.\"deductionsCurrency_to_INR\") as \"deductionsCurrency_to_INR\",\n  max(main.\"parent_collection_USD\" ) as \"parent_collection_USD\",\n  max(main.\"discount_Amount_USD\" ) as \"discount_Amount_USD\",\n  max(main.\"discount_Amount_INR\" ) as \"discount_Amount_INR\",\n  max(main.\"discount_percentage\" ) as \"discount_percentage\",\n  max(main.\"maincohort_name\" ) as \"cohort_name\",\n  max(\"latest_payment_dt\") as \"latest_payment_date\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"collection_amount\" ,\n  sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"serviceTax_adjusted\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") - sum(main.\"serviceTax_adjusted\"/main.\"conv_to_USD\") as \"collection_minus_GST\",\n  sum((emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") - NVL(main.\"serviceTax_adjusted\",0)/main.\"conv_to_USD\") as \"collection_minus_GST_and_TDR_subvention_costs\",\n  max(main.\"affiliatePaymentCosts\" / main.\"deductionsCurrency_to_USD\") as \"Affiliate_payment_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"financeCharges\") as \"FinanceCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"SalesCharges\") as \"SalesCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"marketingCharges\") as \"MarketingCharges_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"voucherCosts\") as \"Voucher_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"instructorCosts\") as \"Instructor_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"teachingAssistantsCosts\") as \"TeachingAssistants_cost\",\n  max((main.\"order_selling_price\"/ main.\"conv_to_USD\")*main.\"platformCosts\") as \"Platform_cost\",\n  sum(main.\"service_Tax_INR\") as \"serviceTax_INR\",\n  sum(main.\"order_selling_price\"/main.\"conv_to_USD\") as \"order_selling_price_USD\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") as \"order_selling_price_INR\",\n  sum(main.\"order_selling_price\"*main.\"to_inr\") - sum(main.\"service_Tax_INR\") as \"collection_minus_GST_INR\",\n  sum(emi.\"POS_subvention_excluded\"/ main.\"conv_to_USD\") as \"POS_subvention_excluded_USD\",\n  sum(emi.\"POS_subvention_excluded\"*main.\"to_inr\") as \"POS_subvention_excluded_INR\",\n  sum((emi.\"POS_subvention_excluded\"*main.\"to_inr\") - main.\"service_Tax_INR\" ) as \"collection_minus_GST_and_TDR_subvention_costs_INR\"\n\n  ,max(upt.\"final_payout\") as \"upt_final_payout\"  \n  \n  from university_orders_with_conversion_CTE main\n\n  LEFT JOIN \n  ${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n  ON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  \n      and main.\"orderNumber\" = emi.\"orderNumber\"\n\n  -- To balance the payout for getting started purchases for same program\n  LEFT JOIN \n  (\n      select \"Email\" EMAIL,\"Program Name\" PN,\"University_flag\" UF,\n          sum(\"final_payout\") \"final_payout\",\n          sum(\"final_payout_INR\") \"final_payout_INR\"\n      from ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n      group by 1,2,3\n  ) upt\n  ON main.\"userEmail\" = upt.EMAIL  \n      and main.\"New_Program Name\" = upt.PN\n      and main.\"universityFlag\" = upt.UF\n\n  where  main.\"only_prep_bought\" <> 1 \n      and (ABS (main.\"Total_Collection_USD\" - main.\"max_SellingPrice_USD\") <= 1 \n           or main.\"Total_Collection_USD\" > main.\"max_SellingPrice_USD\")\n\n  group by 1,2,3,4,5\n\n)\n\n\n\n------------------- Main Query starts from here ----------------------\nselect\n    SHA2_HEX(\n        concat(\n            ifnull(\"Email\", '-'),\n            ifnull(\"Program Name\", '-'),\n            ifnull(\"Order Number\", '-'),\n            ifnull(\"Payment Geo\", '-'),\n            ifnull(\"University\", '-'),\n            ifnull(\"Deviation\", '0'),\n            ifnull(\"Category\", '-'),\n            ifnull(\"Sub-Category\", '-'),\n            ifnull(\"Status\", '-')\n        )\n    ) as \"SHA2_HEX_ID\",\n    current_date \"TimeStamp\",\n    0 \"No. of Days\",\n    *\nfrom\n(\n    \n    -------------------------------------------\n    --- checkpoint 1- elt2 order check --------\n    -------------------------------------------\n    (\t\n        select\n        null as \"Email\",\n        null as \"Program Name\",\n        \"orderNumber\" as \"Order Number\",\n        null as \"Payment Geo\",\n        null as \"Month\",\n        null as \"University\",\n        null as \"Deviation\",\n        'elt2 Check' as \"Category\",\n        'Order check' as \"Sub-Category\",\n        'Missing order' as \"Status\"\n        from\n        (\n    \tselect\n    \t\tdistinct \"orderNumber\"\n    \tfrom\n    \t\t(\n    \t\t\tselect\n    \t\t\t\t*,\n    \t\t\t\tto_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n    \t\t\tfrom\n    \t\t\t\t${ev_default_db_name}.\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n    \t\t\twhere\n    \t\t\t\t\"payment_date\" >= '2024-01-01'\n    \t\t\t\tand not(\"orderNumber\" like any ('SMPL_B2B%', 'CSTM_CORP%'))\n    \t\t\t\tand not (\"transactionId\" like any ('APP_FREE%', 'WEB_FREE%'))\n    \t\t\t\tand \"course_id\" not in (1018, 1019, 1020)\n    \t\t\t\tand not(\"userEmail\" like any ('%simplilearnautomation%'))\n    \t\t\t\tand \"is_test_payment\" = 0\n    \t\t)\n    \twhere\n    \t\"orderNumber\" not in (\n    \t\t\tselect distinct \"orderNumber\"\n    \t\t\t\tfrom\n    \t\t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n    \t\t\t\twhere\n    \t\t\t\t\t\"ndate\" >= '2024-01-01'\n    \t\t\t\t)\n    \tand \"orderNumber\" is not null\n    \tand not(\"orderNumber\" like any ('00%')) --and \"orderNumber\"!='BACKEND_1641204895_SP718612'\n    \t\n    \torder by \"orderNumber\"\t\n        )\n    )\n    \t\t\n    union all\n    ----------------------------------------\n    -------- elt2 collection check ---------\n    ----------------------------------------\n    (\n        select\n    \t\"userEmail\" as \"Email\",\n    \t\"Program Name\",\n    \t\"orderNumber\" as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"University\",\n    \t\"deviation\" as \"Deviation\",\n    \t'elt2 Check' as \"Category\",\n    \t'Collection check' as \"Sub-Category\",\n    \t'Deviation in Collection' as \"Status\"\n        from\n        (\n        \tselect\n        \t\t\"userEmail\",\n        \t\t\"Program Name\",\n        \t\t\"orderNumber\",\n        \t\t\"collection_pr\",\n        \t\t\"collection_ue\",\n        \t\t\"paymentCountry\",\n        \t\t\"paymentGeo\",\n        \t\t\"University\",\n        \t\t\"collection_pr\" - \"collection_ue\" as \"deviation\",\n        \t\t\"currency\"\n        \tfrom(\n        \t\t\tselect\n        \t\t\t\t*,\n        \t\t\t\tcase\n        \t\t\t\t\twhen \"collection_pr\" = \"collection_ue\" then 1\n        \t\t\t\t\telse 0\n        \t\t\t\tend as \"flag\"\n        \t\t\tfrom(\n        \t\t\t\t\t(\n        \t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\"orderNumber\",\n        \t\t\t\t\t\t\tround(sum(\"amount\"), 0) as \"collection_pr\",\n        \t\t\t\t\t\t\tmax(\"paymentRegion\") as \"paymentRegion\",\n        \t\t\t\t\t\t\tmax(\"paymentCountry\") as \"paymentCountry\",\n        \t\t\t\t\t\t\tsum(\"discountAmount\") as \"discountAmount\"\n        \t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t(\n        \t\t\t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\t\t*,\n        \t\t\t\t\t\t\t\t\tto_date(to_timestamp(\"paymentDate\")) as \"payment_date\"\n        \t\t\t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t\t\t${ev_default_db_name}.\"MELV1N_CRM2\".\"target_paymentReconciliations\"\n        \t\t\t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\t\t\"payment_date\" >= '2024-01-01'\n        \t\t\t\t\t\t\t\t\tand not(\"orderNumber\" like any ('SMPL_B2B%', 'CSTM_CORP%'))\n        \t\t\t\t\t\t\t\t\tand not (\"transactionId\" like any ('APP_FREE%', 'WEB_FREE%')\t\t\t\t\t\t\t\t\t)\n        \t\t\t\t\t\t\t\t\tand \"course_id\" not in (1018, 1019, 1020)\n        \t\t\t\t\t\t\t\t\tand not(\"userEmail\" like any ('%simplilearnautomation%'))\n        \t\t\t\t\t\t\t\t\tand \"is_test_payment\" = 0\n        \t\t\t\t\t\t\t)\n        \t\t\t\t\t\tgroup by 1\n        \t\t\t\t\t) pr\n        \t\t\t\t\tleft join \n        \t\t\t\t\t(\n        \t\t\t\t\t\tselect\n        \t\t\t\t\t\t\t\"orderNumber\" as \"oN\",\n        \t\t\t\t\t\t\tround(sum(\"order_selling_price\"), 0) as \"collection_ue\",\n        \t\t\t\t\t\t\tmax(\"paymentGeo\") as \"paymentGeo\",\n        \t\t\t\t\t\t\tmax(\"University Name\") as \"University\",\n        \t\t\t\t\t\t\tmax(\"userEmail\") as \"userEmail\",\n        \t\t\t\t\t\t\tmax(\"Program Name\") as \"Program Name\",\n        \t\t\t\t\t\t\tmax(\"currency\") as \"currency\",\n        \t\t\t\t\t\t\tmax(\"ndate\") as \"ndate\"\n        \t\t\t\t\t\tfrom(\n        \t\t\t\t\t\t\t\tselect *\n        \t\t\t\t\t\t\t\tfrom\n        \t\t\t\t\t\t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n        \t\t\t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\t\t\"ndate\" >= '2024-01-01'\n        \t\t\t\t\t\t\t)\n        \t\t\t\t\t\twhere\n        \t\t\t\t\t\t\t\"orderNumber\" is not null\n        \t\t\t\t\t\t\tand not(\"orderNumber\" like any ('00%'))\n        \t\t\t\t\t\tgroup by 1\n        \t\t\t\t\t) ue \n        \t\t\t\t\ton pr.\"orderNumber\" = ue.\"oN\"\n        \t\t\t\t\n        \t\t\t)\n        \t\t\torder by \"orderNumber\"\n        \t\t\t\t\n        \t\t)\n        \twhere\n        \t\t\"flag\" = 0\n        \t\tand abs(\"deviation\") > 1\n        \t\tand \"University\" is not null\n        )\n    )\n    \n    union all\n    ----------------------------------------------------------------\n    ---checkpoint 3----pg payout inputs duplicate entry check\n    ----------------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Duplicate entry check' as \"Sub-Category\",\n    \t'Duplicate Entry' as \"Status\"\n        from\n        (\n        \tselect\n        \t\t\"universityFlag\" as \"University\",\n        \t\t\"programName\" as \"Program Name\",\n        \t\t\"paymentGeo\" as \"Payment Geo\"\n        \tfrom(\n        \t\t\tselect\n        \t\t\t\t\"universityFlag\",\n        \t\t\t\t\"programName\",\n        \t\t\t\t\"paymentGeo\",\n        \t\t\t\tcount(\"programName\") as \"count\"\n        \t\t\tfrom\n        \t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\"\n        \t\t\tgroup by 1, 2, 3\n        \t\t\t\thaving \"count\" > 1\n        \t\t)\n        )\n    )            \n    union all\n    --------------------------------------------------------\n    -------- pg payout inputs missing value check ----------\n    --------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"programName\" as \"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"universityFlag\" as \"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Missing value check' as \"Sub-Category\",\n    \t'Missing value' as \"Status\"\n        from\n        (\n            select\n                *\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\"\n            where concat(\"universityFlag\", \"programName\", \"paymentGeo\", \"deductionsCurrency\", \"affiliatePaymentCosts\", \"minPayout\", \"payoutPercentage\", \"contractStartDate\",   \"contractEndDate\", \"minASP\", \"maxASP\", \"financeCharges\", \"SalesCharges\", \"marketingCharges\", \"voucherCosts\", \"instructorCosts\", \"teachingAssistantsCosts\", \"platformCosts\", \"Revised_Logic_Applicable_Flag\") is null\n        )\n    )\n    \n    union all\n    ---------------------------------------------------------------\n    --------- pg payout inputs program name validation ------------\n    ---------------------------------------------------------------\n    (\n        select\n    \tnull as \"Email\",\n    \t\"programName\" as \"Program Name\",\n    \tnull as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \tnull as \"Month\",\n    \t\"universityFlag\" as \"University\",\n    \tnull as \"Deviation\",\n    \t'PG Payout Input sheet check' as \"Category\",\n    \t'Program Name validation' as \"Sub-Category\",\n    \t'Program Name mismatch' as \"Status\"\n        from\n    \t(\n    \t\tselect\n    \t\t\t*\n    \t\tfrom \n    \t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"PG_payout_inputs\" pgp_inp\n    \t\tleft join \n    \t\t(\n    \t\t\tselect\n    \t\t\t\tdistinct case when \"paymentCourse\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n    \t\t\t\t\t\t\t\tthen 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' \n    \t\t\t\t\t\t\telse \"Program Name\" end as \"Program Name\"\n    \t\t\tfrom\n    \t\t\t\t${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n    \t\t\twhere\n    \t\t\t\t\"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n    \t\t) elt2 on pgp_inp.\"programName\" = elt2.\"Program Name\"\n    \t\n    \t\twhere\n    \t\t\telt2.\"Program Name\" is null\n    \t\torder by\n    \t\t\telt2.\"Program Name\"\n    \t)\n    )\n    \n    union all\n    -------------------------------------------------------------------\n    --- checkpoint 4 - finance control check for current month entry --\n    -------------------------------------------------------------------\n    (\n    \tselect\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\tdate_trunc('month',current_date) as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Current Month Entry Check' as \"Sub-Category\",\n    \t\t'Missing Current Month Entry' as \"Status\"\n    \tfrom\n    \t\t(\n            select\n                max(to_date(\"Month\")) as \"current_month_crm\"\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n            having date_trunc('month',\"current_month_crm\") <> date_trunc('month',current_date)\n    \t\t)\n    )\t\t\n    \n    union all\n    ---------------------------------------------------------------\n    -------- finance control check for historical entries ---------\n    ---------------------------------------------------------------\n    (\n    \tselect\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\tNULL as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Historical entry check' as \"Sub-Category\",\n    \t\t'Missing Historical Entry' as \"Status\"\n    \tfrom\n    \t\t(\n                select\n                   datediff('months',\"Start_date\",\"Latest_month\")+1 \"expected_#months\",\n                   \"actual_#months\",\n                   abs(\"expected_#months\" - \"actual_#months\") \"#missing_months\"\n                from(\n                        select\n                            distinct\n                            to_date('2018-12-01') as \"Start_date\",\n                            max(\"Month\") \"Latest_month\" ,\n                            count(distinct date(\"Month\")) \"actual_#months\"\n                        from\n                            ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\" \n                    )\n                where \"#missing_months\" > 0\n    \t\t)\n    )\n            \n    union all\n    ------------------------------------------------------\n    ------ finance control check for missing values ------\n    ------------------------------------------------------\n    (\n        select\n    \t\tnull as \"Email\",\n    \t\tnull as \"Program Name\",\n    \t\tnull as \"Order Number\",\n    \t\tnull as \"Payment Geo\",\n    \t\t\"Month\" as \"Month\",\n    \t\tnull as \"University\",\n    \t\tnull as \"Deviation\",\n    \t\t'Finance Control sheet check' as \"Category\",\n    \t\t'Missing value check' as \"Sub-Category\",\n    \t\t'Missing Value' as \"Status\"\n    \tfrom\n    \t\t(\n    \t\tselect\n    \t\t\t*\n    \t\tfrom\n    \t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n    \t\twhere concat(\"Month\", \"INR.to.1.USD\", \"AUD.to.1.USD\", \"GBP.to.1.USD\", \"EUR.to.1.USD\", \n    \t\t\t\t\t\"USD.to.INR\", \"AUD.to.INR\", \"GBP.to.INR\", \"EUR.to.INR\", \"CAD.to.INR\", \"SGD.to.INR\",       \n    \t\t\t\t\t\"CAD.to.1.USD\", \"TDR.IN\", \"TDR.AMERICAS\", \"TDR.ROW\", \"Sales.Commission.IN\", \n    \t\t\t\t\t\"Sales.Commission.AMERICAS\", \"Sales.Commission.ROW\", \"Trainer.fee.LVC\", \"Trainer.fee.CR\", \n    \t\t\t\t\tcase when \"Month\" >= '2021-10-01' then \"SGD.to.1.USD\" else 1 end) is null\n    \t\t)\n    )\n    \n    union all\n    ------------------------------------------------------------------------------\n    -----checkpoint 2-------------------------------------------------------------\n    ------------------------------------------------------------------------------\n    ------- Complete Order Check FullPayment order check ---------\n    \n    (\n        select\n        \"userEmail\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(A.\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" as \"Payment Geo\",\n        date(\"latest_payment_dt\") as \"Month\",\n        \"universityFlag\" as \"University\",\n        null as \"Deviation\",\n        'Complete order check' as \"Category\",\n        'Full Payment check' as \"Sub-Category\",\n        'Missing order' as \"Status\"\n        from\n    \n    \t(\n    \tselect\n        distinct \n        \"userEmail\",\n        \"New_Program Name\" \"Program Name\",\n        \"latest_payment_dt\",\n        \"New_reconciliation_id\" \"reconciliation_id\",\n        \"paymentGeo\",\n        \"universityFlag\" ,\n        max(\"orderNumber\") \"orderNumber\"\n        \n        from\n            university_orders_with_conversion_CTE elt2\n            \n            left join\n            (\n    \t\t\tselect distinct csa.email,dim.\"Program Name\" program_name\n    \t\t\t\t  ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n    \t\t\t\t  ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n    \t\t\tfrom ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n    \t\t\tleft join\n    \t\t\t(\n    \t\t\t\t  select \"Course\",\"Program Name\" \n    \t\t\t\t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n    \t\t\t\t  group by 1,2 \n    \t\t\t) dim\n    \t\t\ton  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n    \t\t) csa\n    \t\tON elt2.\"userEmail\" = csa.email and trim(csa.program_name) = trim(elt2.\"New_Program Name\")\n            \n        where \"universityFlag\" is not null\n            and \"latest_payment_dt\" >= '2024-01-01'\n            and \"only_prep_bought\" != 1\n            and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n               or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n            and ((\"Revised_Logic_Applicable_Flag\" ilike 'yes' and At_least_1_LVC_attended = 1 )\n                or  \"Revised_Logic_Applicable_Flag\" ilike 'no')\n            and \"latest_payment_dt\"<=\"main_bundles_max_ndate\"\n        group by 1,2,3,4,5,6\n        ) A\n    \n    ---------------------- University Payout Table ------------\n        left join \n        (\n            select\n                \"Email\",\n                case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                    else prod_dim.\"Program Name\" end as \"Program_Name\",\n                \"University_flag\",\n                \"reconciliation_id\",\n                \"order_type\"\n            from\n                ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n                left join\n                EDW.DW.DIM_PRODUCT_REF prod_dim\n                ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n            where\n                \"latest_payment_date\" >= '2024-01-01'\n                and \"order_type\" = 'Order'\n                and \"University_flag\" is not null\n                and \"paymentQueryType\" = 'B2C'\n            group by\n                1,2,3,4,5\n        ) B \n    \ton A.\"userEmail\" = B.\"Email\"\n    \t\tand A.\"Program Name\" = B.\"Program_Name\"\n    \t\tand A.\"universityFlag\" = B.\"University_flag\"\n    \t\tand A.\"reconciliation_id\" = B.\"reconciliation_id\"\n    \n        where \"Email\" is null \n    )\n    -------------------------------------------------------------\n    \n    \n    union all\n    -------------------------- Checkpoint -----------------------------------\n    ----------- complete order Full Payment order Collection check ----------\n    -------------------------------------------------------------------------\n    (    \n        select\n        \"userEmail\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(A.\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" ,\n        date(\"latest_payment_dt\") as \"Month\",\n        \"universityFlag\" ,\n        (\"elt2_collection\"-\"upf_collection\") \"Deviation\",\n        'Complete order check' as \"Category\",\n        'Full Payment collection check' as \"Sub-Category\",\n        'Deviation in Collection' as \"Status\"\n        from\n        \n        \t(\n        \tselect\n        \t\t\"userEmail\",\n        \t\t\"New_Program Name\" \"Program Name\",\n        \t\t\"latest_payment_dt\",\n        \t\t\"New_reconciliation_id\" \"reconciliation_id\",\n        \t\t\"paymentGeo\",\n        \t\t\"universityFlag\",\n                max(\"orderNumber\") \"orderNumber\",\n        \t\tsum(\"order_selling_price\" / \"conv_to_USD\") \"elt2_collection\"\n        \t\t\n        \tfrom\n                university_orders_with_conversion_CTE elt2\n        \tleft join\n                (\n                select distinct csa.email,dim.\"Program Name\" program_name\n        \t\t\t  ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n        \t\t\t  ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n                  from ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n                  left join\n                  (\n                \t  select \"Course\",\"Program Name\" \n                \t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n                \t  group by 1,2 \n                  ) dim\n                  on  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n                 ) csa\n                 ON elt2.\"userEmail\" = csa.email and trim(csa.program_name) = trim(elt2.\"New_Program Name\")\n                \n            where \"universityFlag\" is not null\n                and \"latest_payment_dt\" >= '2024-01-01'\n                and \"only_prep_bought\" != 1\n                and (ABS (\"Total_Collection_USD\" - \"max_SellingPrice_USD\") <= 1 \n                   or \"Total_Collection_USD\" > \"max_SellingPrice_USD\")\n                   -- );\n                and ((\"Revised_Logic_Applicable_Flag\" ilike 'yes' and At_least_1_LVC_attended = 1 )\n                    or  \"Revised_Logic_Applicable_Flag\" ilike 'no')\n                and \"latest_payment_dt\"<=\"main_bundles_max_ndate\"\n                \n            group by 1,2,3,4,5,6\n            \n        \t) A\n        \t---------------------- University Payout Table ------------\n            left join \n            (\n                select\n                    distinct\n                    \"Email\",\n                    case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                        else prod_dim.\"Program Name\" end as \"Program_Name\",\n                    \"University_flag\",\n                    \"reconciliation_id\",\n                    \"order_type\",\n                    \"collection_amount\" \"upf_collection\"\n                from\n                    ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n                    left join\n                    edw.dw.DIM_PRODUCT_REF prod_dim\n                    ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n                where\n                    \"latest_payment_date\" >= '2024-01-01'\n                    and \"order_type\" = 'Order'\n                    and \"University_flag\" is not null\n                    and \"paymentQueryType\" = 'B2C'\n                \n            ) B \n        \ton A.\"userEmail\" = B.\"Email\"\n            and A.\"Program Name\" = B.\"Program_Name\"\n            and A.\"universityFlag\" = B.\"University_flag\"\n            and A.\"reconciliation_id\" = B.\"reconciliation_id\"\n        \n            where abs(round(\"elt2_collection\") - round(\"upf_collection\")) > 1\t\n    )\n    \t\t\n    -----------------------------------------------------------------------------\n    -----------------------------------------------------------------------------\n    \n    \n    union all\n    -------------------------------------------------------\n    ----- checkpoint 6 - Deviation in Refund Collection ---\n    -------------------------------------------------------\n    (\n        select\n        \"Email\" as \"Email\",\n        \"Program Name\",\n        concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"orderNumber\",\n        \"paymentGeo\" as \"Payment Geo\",\n        null as \"Month\",\n        \"University_flag\" as \"University\",\n        (\"collection_amount\" + \"refund_elt2_USD\") *(-1) as \"Deviation\",\n        'Refund' as \"Category\",\n        \"Sub-Category\",\n        'Deviation in Refund Collection' as \"Status\"\n        from\n        (\n            \tselect\n            \t\t*\n                from\n                    (\n                        select\n                            \"Email\",\n                            \"Program Name\",\n                            \"University_flag\",\n                            \"reconciliation_id\",\n                            sum(\"collection_amount\") as \"collection_amount\",\n                            max(\"orderNumber\") as \"orderNumber\",\n                            max(\"paymentGeo\") as \"paymentGeo\"\n                        from\n                            (\n                                select\n                                    *\n                                from\n                                    ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n                                where\n                                    \"order_type\" in ('Refund', 'Chargeback')\n                                    and \"latest_payment_date\" >= '2024-01-01'\n                                    and \"paymentQueryType\" = 'B2C'\n                                order by\n                                    \"latest_payment_date\"\n                            )\n                        group by 1,2,3,4\n                    ) pay\n                    LEFT JOIN \n                    (\n                        select\n                            \"userEmail\",\n                            \"Program Name\" as \"Program Name_\",\n                            \"RefundReconciliation_id\",\n                            sum(\"partialRefundAmount_USD\") as \"refund_elt2_USD\",\n                            max(\"Sub-Category\") as \"Sub-Category\"\n                        from(\n                                select\n                                *,\n                                case\n                                    when \"currency\" = 'USD' THEN 1\n                                    when \"currency\" = 'INR' THEN \"INR.to.1.USD\"\n                                    when \"currency\" = 'AUD' THEN \"AUD.to.1.USD\"\n                                    when \"currency\" = 'GBP' THEN \"GBP.to.1.USD\"\n                                    when \"currency\" = 'EUR' THEN \"EUR.to.1.USD\"\n                                    when \"currency\" = 'CAD' THEN \"CAD.to.1.USD\"\n                                    when \"currency\" = 'SGD' THEN \"SGD.to.INR\" / \"INR.to.1.USD\"\n                                end as \"conv_to_USD_\",\n                                case\n                                    when (\"order_selling_price_order\" - sum(\"partialRefundAmount\") over (partition by \"userEmail\", \"Program Name\")) > 0\n                                        then 'Partial Refund'\n                                    else 'Full Refund'\n                                end as \"Sub-Category\",\n                                \"partialRefundAmount\" / \"conv_to_USD_\" as \"partialRefundAmount_USD\"\n                                \n                                from\n                                (\n                                    select * from        \n                                        (\n                                            select * from\n                                                ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n                                            where\n                                                \"refundedOrderNumber\" is not null\n                                                and \"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n                                                and \"ndate\" >= '2024-01-01'\n                                                and \"partialRefundAmount\" > 0\n                                            order by\n                                                \"userEmail\",\n                                                \"Program Name\"\n                                        ) A\n                                        LEFT JOIN \n                                        (\n                                            select\n                                                \"userEmail\" as \"email\",\n                                                \"Program Name\" as \"PName\",\n                                                sum(\"order_selling_price\") as \"order_selling_price_order\"\n                                            from\n                                                ${ev_default_db_name}.\"SALES_TEMP\".\"unified_elt2\"\n                                            where\n                                                \"orderNumber\" is not null\n                                                and \"Program Type\" in ('PG', 'Bootcamp','JG', 'Study Abroad')\n                                            group by\n                                                \"userEmail\",\n                                                \"Program Name\"\n                                        ) B \n                                        on A.\"userEmail\" = B.\"email\"\n                                        and A.\"Program Name\" = B.\"PName\"\n                                ) elt2\n                                LEFT JOIN \n                                (\n                                    select * from ${ev_default_db_name}.\"PRODCT_TEMP\".\"conversion_rates_monthwise\"\n                                ) rate \n                                on year(elt2.\"ndate\") = year(to_date(rate.\"Month\"))\n                                and month(elt2.\"ndate\") = month(to_date(rate.\"Month\"))   \n                            )\n                            group by 1, 2, 3\n                    ) elt \n                    on pay.\"Email\" = elt.\"userEmail\"\n                    and pay.\"Program Name\" = elt.\"Program Name_\"\n                    and pay.\"reconciliation_id\" = elt.\"RefundReconciliation_id\"\t \n                where \"collection_amount\" + \"refund_elt2_USD\" > 1\n            )\n    )\n                    \n    -------------------------------------------------------\n    ----- checkpoint 6 - Deviation in Refund Payout -------\n    -------------------------------------------------------\t\t\n    /*\n    union all\n        (\n        select\n        \t\"Email\" as \"Email\",\n        \t\"Program Name\",\n            concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"orderNumber\",\n        \t\"paymentGeo\" as \"Payment Geo\",\n        \t\"latest_payment_date\" as \"Month\",\n        \t\"University_flag\" as \"University\",\n        \t\"sum_final_payout\" as \"Deviation\",\n        \t'Refund' as \"Category\",\n        \t'Refund Payout Check' as \"Sub-Category\",\n        \t'Deviation in Refund Payout' as \"Status\"\n        from\n        \t(\n        \t\tselect\n        \t\t\t*\n        \t\tfrom\n        \t\t\t\t(\n        \t\t\t\t\tselect\n        \t\t\t\t\t\tdistinct \"Email\",\"Program Name\",\"orderNumber\",\"reconciliation_id\",\"University_flag\",\"paymentGeo\",\"latest_payment_date\"\n        \t\t\t\t\tfrom\n        \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n        \t\t\t\t\twhere\n        \t\t\t\t\t\t\"order_type\" not in ('Chargeback', 'Refund')\n        \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n        \t\t\t\t) A\n        \t\t\t\tleft join \n        \t\t\t\t(\n        \t\t\t\t\tselect\n        \t\t\t\t\t\t\"Email\" as \"email\",\n        \t\t\t\t\t\t\"Program Name\" as \"programName\",\n        \t\t\t\t\t\t\"University_flag\" as \"uni\",\n                                \"reconciliation_id\" \"reconId\",\n        \t\t\t\t\t\tsum(\"final_payout\") as \"sum_final_payout\"\n        \t\t\t\t\tfrom\n        \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n        \t\t\t\t\tgroup by 1,2,3,4 having \"sum_final_payout\" < -1\n        \t\t\t\t\torder by\n        \t\t\t\t\t\t\"Email\",\n        \t\t\t\t\t\t\"Program Name\"\n        \t\t\t\t) B \n        \t\t\t\ton A.\"Email\" = B.\"email\"\n        \t\t\t\tand A.\"Program Name\" = B.\"programName\"\n        \t\t\t\tand A.\"University_flag\" = B.\"uni\"\n                        and a.\"reconciliation_id\" = b.\"reconId\"\n        \t\twhere\n        \t\t\t\"email\" is not null\n        \t\t\tand \"latest_payment_date\" >= '2024-01-01'\n        \t)\n        )\n    */\n    \n    -----------------------------------------------\n    --checkpoint 7 - Deviation in Payout ----------\n    ----------------------------------------------- \n    ----- FullPayment or PartialPayment Order -----\n    union all\n    (\n       select\n    \t\t\"Email\",\n    \t\t\"Program Name\",\n    \t\tconcat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"Order Number\",\n    \t\t\"paymentGeo\" as \"Payment Geo\",\n    \t\t\"latest_payment_date\" as \"Month\",\n    \t\t\"University_flag\" as \"University\",\n    \t\t\"Deviation in Payout\" as \"Deviation\", \n    \t\t'Payout Check' as \"Category\",\n    \t\t'FullPayment or PartialPayment Order' as \"Sub-Category\", \n    \t\t'Deviation in Payout' as \"Status\"\n    \tfrom\n    \t\t(\n    \t\t\tselect\n    \t\t\t\telt.*,\n    \t\t\t\t\"final_payout\" - \"final_payout_elt2\" as \"Deviation in Payout\"\n    \t\t\tfrom\n    \t\t\t(\n    \t\t\t\tselect \"Email\",\n    \t\t\t\t\tmain.\"reconciliation_id\",\n    \t\t\t\t\t\"Program Name\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\"University_flag\",\n    \t\t\t\t\tmax(main.\"orderNumber\") \"orderNumber\",\n    \t\t\t\t\tmax(\"paymentGeo\") \"paymentGeo\",\n    \t\t\t\t\tmax(\"latest_payment_date\") \"latest_payment_date\",\n    \t\t\t\t\tmax(case when main.\"University_flag\" in ('MIT xPRO','Wharton') -- Updated on 20240307 for 'Wharton' :SP\n                              then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100)\n                          when main.\"University_flag\" = 'IFACET, IIT Kanpur' and (main.\"paymentGateway\") <> 'CardLessEmi_Liquiloan' \n                              then \"collection_minus_GST\" * ((main.\"payoutPercentage\" )/100) -- Added on 2023-05-30 : By SP - LI-510\n                          else  GREATEST((\"collection_minus_GST_and_TDR_subvention_costs\" - \n                                          \"Affiliate_payment_cost\" - \"FinanceCharges_cost\" - \n                                          \"SalesCharges_cost\" - \"MarketingCharges_cost\" - \"Voucher_cost\" - \n                                          \"Instructor_cost\" - \"TeachingAssistants_cost\" - \"Platform_cost\"\n                                          )* \n                                          ((main.\"payoutPercentage\" )/100)\n                                         , case when (\"paymentCourse\") ilike '%getting%started%' and (\"upt_final_payout\")>((main.\"minPayout\" / main.\"deductionsCurrency_to_USD\")) then 0\n                                                 else (main.\"minPayout\" / main.\"deductionsCurrency_to_USD\") end)\n    \t\t\t\t\t\tend) as \"final_payout_elt2\"\n    \t\t\t\tfrom\n    \t\t\t\t\t(\n                            select * exclude(\"payoutPercentage\"),\n                                  max(case when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 1 and 230 then 20\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 231 and 500 then 15\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" between 501 and 715 then 12\n                                                    when \"University_flag\" ilike '%ihub%' and \"enrollment_rn\" > 715 then 10\n                                      \t\t\telse \"payoutPercentage\" end) \n                                  \t\t\tover (partition by \"Email\",\"order_type\",\"Program Name\",\"University_flag\",\"reconciliation_id\") as \"payoutPercentage\"  \n                                  from\n                                  (\n                                  select *\n                                    ,case when \"University_flag\" ilike '%ihub%' then \n                                                row_number() over (partition by \"University_flag\" order by \"latest_payment_date\", \"reconciliation_id\",\"Email\") \n                                  \t\t\telse null end \"enrollment_rn\"\n                                  from \n                                  (\n                                      select ord.* exclude(\"latest_payment_date\") , \n                                          \"latest_payment_date\",\n                                          \"latest_payment_date\" \"old_latest_payment_date\",\n                                          NULL \"first_lvc_attended_date\",\n                                          NULL At_least_1_LVC_attended\n                                      from order_final_agg_cte ord\n                                      where \"ndate\" < '2023-12-11' or \"Revised_Logic_Applicable_Flag\" ilike 'no'\n                                \n                                      union\n                                \n                                      select ord.* exclude(\"latest_payment_date\") ,\n                                          greatest(first_lvc_attended_date,\"latest_payment_date\") \"latest_payment_date\",\n                                          \"latest_payment_date\" \"old_latest_payment_date\",\n                                          first_lvc_attended_date \"first_lvc_attended_date\",\n                                          At_least_1_LVC_attended\n                                      from order_final_agg_cte ord\n                                \n                                      left join\n                                      (\n                                          select distinct csa.email,dim.\"Program Name\" program_name\n                                          ,max(At_least_1_LVC_attended) over (partition by email,dim.\"Program Name\" )  At_least_1_LVC_attended\n                                          ,min(first_lvc_attended_date) over (partition by email,dim.\"Program Name\" ) first_lvc_attended_date\n                                          from ${ev_default_db_name}.user_journey.\"Cohort_Session_Attendance_Final\" csa\n                                          left join\n                                          (\n                                        \t  select \"Course\",\"Program Name\" \n                                        \t  from \"EDW\".\"DW\".\"DIM_PRODUCT_REF\" \n                                        \t  group by 1,2 \n                                          ) dim\n                                          on  Replace(ltrim(rtrim(lower(dim.\"Course\"))),'  ',' ') = lower(csa.program_name)\n                                      ) as csa\n                                      ON ord.\"Email\" = csa.email and trim(csa.program_name) = trim(ord.\"Program Name\")\n                                \n                                      where At_least_1_LVC_attended = 1 and \"Revised_Logic_Applicable_Flag\" ilike 'yes' and \"ndate\" >= '2023-12-11' \n                                  )\n                                  qualify min(case when \"paymentCourse\" ilike '%getting%started%' or \"paymentCourse\" ilike '%complement%' then 'zzzzz' else  \"paymentCourse\" end) \n                                              over (partition by \"Email\",\"University_flag\",\"Program Name\") not ilike 'zzzzz'\n                                  )\n                        ) main\n    \t\t\t\tLEFT JOIN \n    \t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"orders_subvention\" emi\n    \t\t\t\tON main.\"reconciliation_id\" = emi.\"reconciliation_id\"  \n    \t\t\t\t  and main.\"orderNumber\" = emi.\"orderNumber\"\n    \t\t\t\t\n                    where \"latest_payment_date\" >= '2024-01-01'\n                        and \"University_flag\" is not null\n                        \n    \t\t\t\tgroup by 1,2,3,4,5\n    \t\t\t) elt\n    \t\t\tleft join\n    \t\t\t(\n    \t\t\t\tselect\n    \t\t\t\t\t\"Email\",\n    \t\t\t\t\tcase when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n    \t\t\t\t\t\telse prod_dim.\"Program Name\" end as \"Program Name\",\n    \t\t\t\t\t\"University_flag\",\n    \t\t\t\t\t\"reconciliation_id\",\n    \t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\"final_payout\"\n    \t\t\t\tfrom\n    \t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n    \t\t\t\t\tleft join\n    \t\t\t\t\tEDW.DW.DIM_PRODUCT_REF prod_dim\n    \t\t\t\t\tON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n    \t\t\t\twhere\n    \t\t\t\t\t\"latest_payment_date\" >= '2024-01-01'\n    \t\t\t\t\tand \"University_flag\" is not null\n    \t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n    \t\t\t) payout\n    \t\t\ton payout.\"Email\" = elt.\"Email\"\n    \t\t\tand payout.\"Program Name\" = elt.\"Program Name\"\n    \t\t\tand payout.\"reconciliation_id\" = elt.\"reconciliation_id\"\n    \t\t\tand payout.\"University_flag\" = elt.\"University_flag\"\n    \t\t\tand payout.\"order_type\" = elt.\"order_type\"\n    \t\t\n\t\t\twhere payout.\"Email\" is not null\n    \t\t\tand abs(\"Deviation in Payout\") > 1\n    \t\t)\n    ) \n    \n    ----- FullPayment or PartialPayment Refunds -----\n    union all\n    (\n    \tselect\n          \"Email\",\n          \"Program Name\",\n          concat(\"orderNumber\",'-',to_varchar(\"reconciliation_id\")) as \"Order Number\",\n          \"paymentGeo\" as \"Payment Geo\",\n          \"latest_payment_date\" as \"Month\",\n          \"universityFlag\" as \"University\",\n          \"Deviation in Payout\" as \"Deviation\",\n          'Payout Check' as \"Category\",\n          'FullPayment or PartialPayment Refund' as \"Sub-Category\" ,\n          'Deviation in Payout' as \"Status\"\t\n\n      from\n      (\n          select\n              elt.*,\n              \"final_payout\" - \"final_payout_elt2\" as \"Deviation in Payout\"\n          from\n              (\n                  select \n                      \"userEmail\" \"Email\",\n                      \"RefundReconciliation_id\" \"reconciliation_id\",\n                      \"Program Name\",\n                      \"order_type\",\n                      \"universityFlag\",\t\t\t\t\n                      to_char(main.\"ndate\",'YYYYMM') \"nmonth\",\n                      max(\"refundedOrderNumber\") \"orderNumber\",\n                      max(\"paymentGeo\") \"paymentGeo\",\n                      greatest(max(\"latest_payment_dt\"),max(\"ndate\")) \"latest_payment_date\",\n                      max(\"latest_payment_dt\") \"latest_payment_dt\",\n                      GREATEST ((sum(main.\"partialRefundAmount\"/main.\"conv_to_USD\") \n                          +  max(NVL(\"ref_POS_order_selling_price\",0)/main.\"conv_to_USD\" )\n                          ) *(max(\"payoutPercentage\")/100) ,max(main.\"minPayout\"/main.\"conv_to_USD\")\n                        ) * (-1) as \"order_payout\",\n\n                      -1 * case when row_number() over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order  \n                                          by to_char(\"ndate\",'YYYYMM')) = 1 \n                                  then case when ABS(NVL(max(\"refund_payout\"),0)) >= LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) then 0 \n                                            else LEAST(max(main.\"odr_order_payout\"),abs(\"order_payout\") ) -  ABS(NVL(max(\"refund_payout\"),0)) end\n                                else LEAST ( \n                                              abs(\"order_payout\"),\n                                              case when max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(\"ndate\",'YYYYMM')) - abs(\"order_payout\")) <=0 then 0\n                                              else max(main.\"odr_order_payout\") - (sum(abs(\"order_payout\")) over ( partition by main.\"userEmail\" ,main.\"Program Name\",main.\"universityFlag\",main.\"RefundReconciliation_id\" order by to_char(\"ndate\",'YYYYMM')) - abs(\"order_payout\")) end\n                                           )\n                        end as \"final_payout_elt2\"\n                  from main_refunds_cte main\n\n                  where main.\"only_prep_bought\" <> 1 \n                      and \"latest_payment_dt\" >= '2024-01-01'\n\n                  group by 1,2,3,4,5,6 \n              ) elt\n              left join\n              (\n                  select\n                      \"Email\",\n                      case when upt.\"Program Name\" = 'IIM Indore Campus Immersion - Executive Certificate Program in General Management' then upt.\"Program Name\" \n                          else prod_dim.\"Program Name\" end as \"Program Name\",\n                      \"University_flag\",\n                      \"reconciliation_id\",\n                      \"order_type\",\n                      to_char(\"ndate\",'YYYYMM') \"nmonth\",  \n                      max(\"refundedOrderNumber\") \"orderNumber\",\n                      sum(\"final_payout\") \"final_payout\"\n                  from\n                      ${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\" upt\n                      left join\n                      EDW.DW.DIM_PRODUCT_REF prod_dim\n                      ON trim(lower(upt.\"Program Name\")) = trim(lower(prod_dim.\"Course\"))\n                  where\n                      \"latest_payment_date\" >= '2024-01-01'\n                      and \"University_flag\" is not null\n                      and \"paymentQueryType\" = 'B2C'\n                  group by 1,2,3,4,5,6\n              ) payout\n              on payout.\"Email\" = elt.\"Email\"\n              and payout.\"Program Name\" = elt.\"Program Name\"\n              and payout.\"reconciliation_id\" = elt.\"reconciliation_id\"\n              and payout.\"University_flag\" = elt.\"universityFlag\"\n              and payout.\"order_type\" = elt.\"order_type\"\n              and payout.\"nmonth\" = elt.\"nmonth\"\n          where\n              abs(\"Deviation in Payout\") > 1\n      )\n    )\n    \n    union all\n    (\n    select\n    \t\"Email\",\n    \t\"Program Name\",\n    \tconcat(\"orderNumber\",'-',\"reconciliation_id\") as \"Order Number\",\n    \t\"paymentGeo\" as \"Payment Geo\",\n    \t\"latest_payment_date\" as \"Month\",\n    \t\"University_flag\" as \"University\",\n        case\n    \t\twhen \"flag1\" = 1 then \"collection_amount\" - \"collection_amount1\"\n    \t\twhen \"flag2\" = 1 then \"collection_minus_GST\" - \"collection_minus_GST1\"\n    \t\twhen \"flag3\" = 1 then \"Revenue_for_payout_calculation\" - \"Revenue_for_payout_calculation1\"\n    \t\twhen \"flag4\" = 1 then \"final_payout\" - \"final_payout1\"\n    \t\telse null\n    \tend as \"Deviation\",\n    \t'Historical Data Check' as \"Category\",\n    \tcase\n    \t\twhen \"flag1\" = 1 then 'Collection'\n    \t\twhen \"flag2\" = 1 then 'Collection minus GST'\n    \t\twhen \"flag3\" = 1 then 'Revenue for Payout'\n    \t\twhen \"flag4\" = 1 then 'Final Payout'\n    \t\telse null\n    \tend as \"Sub-Category\",\n    \t'Deviation from Historical Data' as \"Status\"\n    from\n    \t(\n    \t\tselect\n    \t\t\t*,\n    \t\t\tcase\n    \t\t\t\twhen abs(\"collection_amount\" - \"collection_amount1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag1\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\"collection_minus_GST\" - \"collection_minus_GST1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag2\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\n    \t\t\t\t\t\"Revenue_for_payout_calculation\" - \"Revenue_for_payout_calculation1\"\n    \t\t\t\t) > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag3\",\n    \t\t\tcase\n    \t\t\t\twhen abs(\"final_payout\" - \"final_payout1\") > 1 then 1\n    \t\t\t\telse 0\n    \t\t\tend as \"flag4\"\n    \t\tfrom(\n    \t\t\t\t(\n    \t\t\t\t\tselect\n    \t\t\t\t\t\t\"Email\",\n    \t\t\t\t\t\t\"Program Name\",\n                            \"reconciliation_id\",\n    \t\t\t\t\t\t\"order_type\",\n    \t\t\t\t\t\t\"University_flag\",\n                            \"paymentGeo\",\n                            max(\"latest_payment_date\") \"latest_payment_date\",\n                            max(\"orderNumber\") as \"orderNumber\",\n    \t\t\t\t\t\tsum(\"collection_amount\") as \"collection_amount\",\n    \t\t\t\t\t\tsum(\"collection_minus_GST\") as \"collection_minus_GST\",\n    \t\t\t\t\t\tsum(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation\",\n    \t\t\t\t\t\tsum(\"final_payout\") as \"final_payout\"\n    \t\t\t\t\tfrom\n    \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_test\"\n    \t\t\t\t\twhere\n    \t\t\t\t\t\t\"latest_payment_date\" < date_trunc('month',CURRENT_DATE)\n    \t\t\t\t\t\tand \"latest_payment_date\" >= '2024-01-01'\n    \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n                        group by 1,2,3,4,5,6\n    \t\t\t\t) A\n    \t\t\t\tleft join (\n    \t\t\t\t\tselect\n    \t\t\t\t\t\t\"Email\" as \"email\",\n    \t\t\t\t\t\t\"Program Name\" as \"Program_Name\",\n                            \"reconciliation_id\" \"reconciliation_id1\",\n    \t\t\t\t\t\t\"order_type\" as \"orderType\",\n    \t\t\t\t\t\t\"University_flag\" as \"UniversityFlag\",\n                            max(\"orderNumber\") as \"orderNumber1\",\n    \t\t\t\t\t\tsum(\"collection_amount\") as \"collection_amount1\",\n    \t\t\t\t\t\tsum(\"collection_minus_GST\") as \"collection_minus_GST1\",\n    \t\t\t\t\t\tsum(\"Revenue_for_payout_calculation\") as \"Revenue_for_payout_calculation1\",\n    \t\t\t\t\t\tsum(\"final_payout\") as \"final_payout1\"\n    \t\t\t\t\tfrom\n    \t\t\t\t\t\t${ev_default_db_name}.\"PRODCT_TEMP\".\"university_payout_table_with_b2b_freezed\"\n                        where \n                            \"latest_payment_date\" < date_trunc('month',CURRENT_DATE)\n    \t\t\t\t\t\tand \"latest_payment_date\" >= '2024-01-01'\n    \t\t\t\t\t\tand \"paymentQueryType\" = 'B2C'\n                        group by 1,2,3,4,5\n    \t\t\t\t) B on A.\"Email\" = B.\"email\"\n    \t\t\t\tand A.\"Program Name\" = B.\"Program_Name\"\n    \t\t\t\tand A.\"order_type\" = B.\"orderType\"\n    \t\t\t\tand A.\"University_flag\" = B.\"UniversityFlag\"\n    \t\t\t\tand A.\"reconciliation_id\" = B.\"reconciliation_id1\"\n    \t\t\t)\n    \t\twhere\n    \t\t\t\"email\" is not null\n    \t)\n    where\n    \t\"flag1\" = 1 or \"flag2\" = 1 or \"flag3\" = 1 or \"flag4\" = 1\n    )\n    \n)\nwhere \"Order Number\" not in ('CSTM_9L4EVNVELPB-4815036.00000','CSTM_PARTIAL_SUBS_CL9YL89VWTS-4814716.00000',\n                            'CSTM_D385LFNDDLQ-4814710.00000','CSTM_6YGHLGLVBT6-4814160.00000',\n                            'CSTM_CJ2UA76PEJ4-4813979.00000','CSTM_429L7MQ092K-4813519.00000') -- IITB missing orders in March                            \n--     \tand (\"Status\" <> 'Program Name mismatch' and \"Program Name\" <> 'Professional Certificate Program in Cloud Computing and DevOps') -- Prorgam Renamed to create new program with same name\n\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2979335":{"id":2979335,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":48,"y":624,"width":32,"height":32,"inputConnectorIDs":[2979334],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of sql_PUBLIC_target_anomaly_alerts_1 (2)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--CREATE Or replace table \"SL_ANALYTICS_DB\".\"PUBLIC\".\"target_anomaly_alerts\" AS\n\ndelete from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\"\nwhere \"TimeStamp\" = current_date;\n\nINSERT INTO ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\"\n\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\",\n0 \"No. of Days\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" \nwhere \"SHA2_HEX_ID\" not in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\") \n\nunion all\n\nselect a.*,b.\"No. of Days\"+1 from\n(\nselect  \"SHA2_HEX_ID\",\n\"TimeStamp\",\n--\"No. of Days\",\n\"Email\",\n\"Program Name\",\n\"Order Number\",\n\"Payment Geo\",\n\"Month\",\n\"University\",\n\"Deviation\",\n\"Category\",\n\"Sub-Category\",\n\"Status\"\nfrom ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_stg_test\" \nwhere \"SHA2_HEX_ID\" in (select \"SHA2_HEX_ID\" from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\") \n)a\nleft join\n(\n  select \"SHA2_HEX_ID\" ,max( \"No. of Days\") as \"No. of Days\" \n  from ${ev_default_db_name}.\"PUBLIC\".\"target_anomaly_alerts_test\" \n  group by 1\n) b\nON a.\"SHA2_HEX_ID\" = b.\"SHA2_HEX_ID\"\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2591334":{"id":2591334,"sourceID":2591210,"targetID":2591244},"2957801":{"id":2957801,"sourceID":2957777,"targetID":2591215},"2591336":{"id":2591336,"sourceID":2591245,"targetID":2591204},"2591208":{"id":2591208,"sourceID":2591215,"targetID":2591236},"2591223":{"id":2591223,"sourceID":2591214,"targetID":2591238},"2591221":{"id":2591221,"sourceID":2591201,"targetID":2591203},"2913598":{"id":2913598,"sourceID":2912164,"targetID":2913574},"2591220":{"id":2591220,"sourceID":2591244,"targetID":2591245},"2591219":{"id":2591219,"sourceID":2591248,"targetID":2591237},"2591218":{"id":2591218,"sourceID":2591202,"targetID":2591205},"2591217":{"id":2591217,"sourceID":2591212,"targetID":2591207},"2591216":{"id":2591216,"sourceID":2591236,"targetID":2591213},"2591231":{"id":2591231,"sourceID":2591207,"targetID":2591205},"2591230":{"id":2591230,"sourceID":2591213,"targetID":2591235},"2591229":{"id":2591229,"sourceID":2591211,"targetID":2591206},"2591228":{"id":2591228,"sourceID":2591235,"targetID":2591210},"2591227":{"id":2591227,"sourceID":2591246,"targetID":2591201},"2591226":{"id":2591226,"sourceID":2591248,"targetID":2591234},"2591225":{"id":2591225,"sourceID":2591204,"targetID":2591209},"2591224":{"id":2591224,"sourceID":2591241,"targetID":2591240},"2979334":{"id":2979334,"sourceID":2979332,"targetID":2979335},"2951554":{"id":2951554,"sourceID":2591239,"targetID":2912164},"2899935":{"id":2899935,"sourceID":2899804,"targetID":2899907},"2913680":{"id":2913680,"sourceID":2913574,"targetID":2913695}},"failureConnectors":{},"unconditionalConnectors":{"2957804":{"id":2957804,"sourceID":2591232,"targetID":2957777},"2591267":{"id":2591267,"sourceID":2591205,"targetID":2591239},"2899801":{"id":2899801,"sourceID":2591203,"targetID":2899804},"2979302":{"id":2979302,"sourceID":2591203,"targetID":2979332}},"trueConnectors":{"2591199":{"id":2591199,"sourceID":2591209,"targetID":2591212}},"falseConnectors":{"2591270":{"id":2591270,"sourceID":2591209,"targetID":2591202},"2591269":{"id":2591269,"sourceID":2591247,"targetID":2591241}},"iterationConnectors":{},"noteConnectors":{},"canUndo":true,"undoCommand":"Set Parameter","undoCreated":1716963461203,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"2591192":{"id":2591192,"x":-594,"y":170,"width":463,"height":118,"text":"Legacy EXT code for table having data till 30-NOV-2023 - **pg_university_payout_ext**\n**BKP TABLE : \"SL_ANALYTICS_DB\".\"PRODCT_TEMP\".\"pg_university_payout_ext_BKP_till30Nov2023\" **","colour":"e6e63c"},"2591193":{"id":2591193,"x":-10,"y":-23,"width":509,"height":140,"text":"** KPMG 202201 - 202206 Data table **","colour":"e6e63c"},"2591194":{"id":2591194,"x":-482,"y":-7,"width":198,"height":123,"text":"`` Do not Delete : B2b Payout order history till June 2022, payout calculated and freezed using old logic ``","colour":"d60000"},"2926246":{"id":2926246,"x":470,"y":485,"width":496,"height":120,"text":"**New Anomaly Engine**","colour":"e6e63c"},"2979329":{"id":2979329,"x":-80,"y":571,"width":496,"height":120,"text":"**New Anomaly Engine** (2024-01-01)","colour":"e6e63c"}},"variables":{},"grids":{}}],"transformationJobs":[],"variables":[],"environments":[]}